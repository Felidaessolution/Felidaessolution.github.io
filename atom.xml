<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Hexo</title>
  
  
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2023-10-23T16:00:00.000Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>John Doe</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Linux 平台 PHP 最小编译/拓展安装/调试 食用指北</title>
    <link href="http://example.com/2023/10/24/PHP-minimum-compilation-extended-installation-debugging-guide/"/>
    <id>http://example.com/2023/10/24/PHP-minimum-compilation-extended-installation-debugging-guide/</id>
    <published>2023-10-23T16:00:00.000Z</published>
    <updated>2023-10-23T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>Windows 平台的 php 的集成环境如 phpStudy 用过的都说好，它的开发者帮助我们完成了大量繁琐的配置工作。</p><p>那么在 Linux 平台下进行环境搭建时，为什么不用包管理器直接安装 Apache&#x2F;Nginx&#x2F;phpStudy-linux 呢？</p><p>很明显，默认的软件源只会提供生产环境所需的稳定版本，对于我们进行各个版本的漏洞复现以及漏洞研究肯定是不方便的。</p><p>更重要的原因当然还是要保证工作环境干净啦<del>（系统洁癖</del></p><h2 id="单-PHP-本机编译-源码调试"><a href="#单-PHP-本机编译-源码调试" class="headerlink" title="单 PHP 本机编译&#x2F;源码调试"></a>单 PHP 本机编译&#x2F;源码调试</h2><p>首先去 php 官网下载对应版本的 php 源码，这里以 php-7.4.33 为例</p><p><a class="link"   href="https://www.php.net/releases/index.php" >https://www.php.net/releases/index.php <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p><p>下载完成并解压后进入源码文件夹，运行配置脚本</p><p><a class="link"   href="https://www.php.net/manual/zh/configure.about.php" >https://www.php.net/manual/zh/configure.about.php <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./configure --prefix=/opt/php7.4.33 --disable-all --enable-debug</span><br></pre></td></tr></table></figure></div><p>对于本机来说，我们的主要目的是对 php 本身进行源码级别的调试，因此<code>--disable-all</code>选项能让我们得到一个最精简的 php 可执行程序。<code>--enable-debug</code>选项则会在编译 php 时保留调试符号。</p><p>运行 configure 脚本过程中可能会由于缺少工具链或某些依赖库而报错，这时候根据报错去安装对应的依赖库就好。</p><p>个人习惯将安装路径手动指定在 &#x2F;opt 下。由于<code>make install</code>的默认安装路径是 &#x2F;usr&#x2F;local，一来由于 PATH 的搜索优先级，&#x2F;usr&#x2F;bin 中的环境（如包管理器安装的最新版本 php）会被 &#x2F;usr&#x2F;local&#x2F;bin 覆盖，二是相同程序编译的不同版本也无法共存，因此最好还是手动指定一个安装路径。</p><p>接下来运行<code>make -jx</code>进行编译，<code>x</code>为指定的线程数，如<code>make -j4</code>，最高线程<code>make -j $(nproc)</code>。</p><p>等待编译完成，显示 Build complete 就可以<code>sudo make install</code>了。</p><p><img src="/images/PHP-minimum-compilation-extended-installation-debugging-guide/1687860445539-c6d7fa69-05ab-47ae-a0bb-3475d4673190.png" alt="img"></p><p>可以看到成功安装于 &#x2F;opt 目录。</p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$&gt; /opt/php7.4.33/bin/php -v                                                  </span><br><span class="line">PHP 7.4.33 (cli) (built: Jun 27 2023 18:05:22) ( NTS DEBUG )</span><br><span class="line">Copyright (c) The PHP Group</span><br><span class="line">Zend Engine v3.4.0, Copyright (c) Zend Technologies</span><br></pre></td></tr></table></figure></div><p>之后就能用编译出的 phpdbg 或者 gdb 来进行调试了。以 gdb + pwndbg 调试内置 Web 服务为例，运行<code>gdb /opt/php7.4.33/bin/php</code></p><p><img src="/images/PHP-minimum-compilation-extended-installation-debugging-guide/1687862998629-48af8914-eca4-400e-8855-a578f792897a.png" alt="img"></p><p>设置程序参数</p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pwndbg&gt; set args -S 0.0.0.0:8888</span><br></pre></td></tr></table></figure></div><p>之后用<code>start</code>命令启动 php，默认会在程序可断的第一处停下，输入<code>c</code>即可继续运行程序。</p><p><img src="/images/PHP-minimum-compilation-extended-installation-debugging-guide/1687862926629-e1ae2046-762f-4fe5-92c6-58d4f84f2382.png" alt="img"></p><p>然后就和调试其它程序差不太多了，打断点，步进步入，打印堆栈变量之类的。</p><p>php 源码文件夹中还自带了一个<code>.gdbinit</code>文件，定义了几个方便调试和查看 php 变量或对象的外部命令，也挺实用的。</p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pwndbg&gt; source php-src/.gdbinit</span><br></pre></td></tr></table></figure></div><p>关于 phpdbg 的使用可以参考官方过于简陋的手册。</p><p><a class="link"   href="https://www.php.net/manual/zh/intro.phpdbg.php" >https://www.php.net/manual/zh/intro.phpdbg.php <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p><h2 id="PHP-Apache-Docker-Xdebug-远程调试"><a href="#PHP-Apache-Docker-Xdebug-远程调试" class="headerlink" title="PHP + Apache Docker&#x2F;Xdebug 远程调试"></a>PHP + Apache Docker&#x2F;Xdebug 远程调试</h2><p>当 php 需要与 Apache&#x2F;Nginx 等中间件配合工作时，在本机进行配置反而更加麻烦。个人认为 Docker 才是 Linux 平台下最方便使用的隔离环境。</p><p>同时推荐 VSCode 中的 Docker 和 Dev Containers 两个插件，前者可将 Docker 的镜像&#x2F;容器&#x2F;网络在 VSCode 界面中可视化，后者可 Attach 整个 VSCode 进入 Docker 环境，极大方便了我们调试容器中的环境。</p><p><img src="/images/PHP-minimum-compilation-extended-installation-debugging-guide/1688049547078-775850d9-6210-4204-b75a-d7e86690ec42.png" alt="img"></p><p>php Docker 仓库：</p><p><a class="link"   href="https://hub.docker.com/_/php" >https://hub.docker.com/_/php <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p><p>以 php7.4.33 + apache2.4.54 环境为例，首先拉取基础镜像</p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$&gt; docker pull php:7.4.33-apache</span><br></pre></td></tr></table></figure></div><p>进入 Docker 环境，运行<code>php -m</code>命令，可以看到 Docker 版本的 php 已经预装了一些常用拓展。</p><p>以安装 xdebug 拓展为例，我们只需复制 phpinfo 粘贴到 Installation Wizard 页面，就能找到合适的版本。</p><p><a class="link"   href="https://xdebug.org/wizard" >https://xdebug.org/wizard <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p><p><img src="/images/PHP-minimum-compilation-extended-installation-debugging-guide/1688048127689-2372154f-42f8-44e3-8c88-5d692c24d05b.png" alt="img"></p><p>用<code>pecl</code>即可下载源码并自动编译安装，最后运行<code>docker-php-ext-enable</code>脚本启用拓展。</p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$&gt; pecl install xdebug-3.1.6 &amp;&amp; docker-php-ext-enable xdebug</span><br></pre></td></tr></table></figure></div><p>再次运行<code>php -m</code>命令，可以看到 xdebug 拓展已启用。</p><p>使用<code>pecl</code>安装的拓展，对应的配置文件都会单独放在 &#x2F;usr&#x2F;local&#x2F;etc&#x2F;php&#x2F;conf.d&#x2F;docker-php-ext-xxx.ini 中。这种针对每个拓展单独设立配置文件的做法显然更加方便管理。</p><p><img src="/images/PHP-minimum-compilation-extended-installation-debugging-guide/1688048854497-d04d2f02-f32c-407f-a915-f110ad270ae4.png" alt="img"></p><p>网上能搜到乱七八糟的 xdebug 配置文件写法，其实三行足矣，其他配置对照官方手册按需添加即可。</p><p><a class="link"   href="https://xdebug.org/docs/all_settings" >https://xdebug.org/docs/all_settings <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p><div class="highlight-container" data-rel="Ini"><figure class="iseeu highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">zend_extension</span>=xdebug</span><br><span class="line"><span class="attr">xdebug.mode</span>=develop,gcstats,debug,trace</span><br><span class="line"><span class="attr">xdebug.discover_client_host</span>=<span class="number">1</span></span><br></pre></td></tr></table></figure></div><p>最后重启容器即可完成配置。</p><p>据此编写的 Dockerfile 和 docker-compose 配置文件如下：</p><div class="highlight-container" data-rel="Dockerfile"><figure class="iseeu highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">FROM</span> php:<span class="number">7.4</span>.<span class="number">33</span>-apache</span><br><span class="line"></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> pecl install xdebug-3.1.6 &amp;&amp; docker-php-ext-enable xdebug</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> <span class="built_in">echo</span> <span class="string">&#x27;xdebug.mode=develop,gcstats,debug,trace&#x27;</span> &gt;&gt; /usr/local/etc/php/conf.d/docker-php-ext-xdebug.ini &amp;&amp; \</span></span><br><span class="line"><span class="language-bash">    <span class="built_in">echo</span> <span class="string">&quot;xdebug.discover_client_host=1&quot;</span> &gt;&gt; /usr/local/etc/php/conf.d/docker-php-ext-xdebug.ini</span></span><br></pre></td></tr></table></figure></div><div class="highlight-container" data-rel="Yaml"><figure class="iseeu highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&#x27;3&#x27;</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">php-apache-xdebug-9003:</span></span><br><span class="line">    <span class="attr">build:</span> <span class="string">.</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">$PWD/wwwroot:/var/www/html</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;8880:80&quot;</span></span><br></pre></td></tr></table></figure></div><p>这将映射容器的 80 端口到本机的 8880 端口，并将当前目录的 wwwroot 文件夹映射到网站根目录中。</p><p>这样只需在访问 php 页面时带上<code>?XDEBUG_SESSION_START</code>参数即可向本机的 9003 端口发送调试请求。如果没有触发调试，可以检查一下是不是本机的防火墙拦截了请求。</p><p><img src="/images/PHP-minimum-compilation-extended-installation-debugging-guide/20231024_223605.png" alt="img"></p>]]></content>
    
    
    <summary type="html">false</summary>
    
    
    
    
  </entry>
  
</feed>
